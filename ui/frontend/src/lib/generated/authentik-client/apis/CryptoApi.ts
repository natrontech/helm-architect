// tslint:disable
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2023.10.2
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    CertificateData,
    CertificateGenerationRequest,
    CertificateKeyPair,
    CertificateKeyPairRequest,
    GenericError,
    PaginatedCertificateKeyPairList,
    PatchedCertificateKeyPairRequest,
    UsedBy,
    ValidationError,
} from '../models';

export interface CryptoCertificatekeypairsCreateRequest {
    certificateKeyPairRequest: CertificateKeyPairRequest;
}

export interface CryptoCertificatekeypairsDestroyRequest {
    kpUuid: string;
}

export interface CryptoCertificatekeypairsGenerateCreateRequest {
    certificateGenerationRequest: CertificateGenerationRequest;
}

export interface CryptoCertificatekeypairsListRequest {
    hasKey?: boolean;
    includeDetails?: boolean;
    managed?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface CryptoCertificatekeypairsPartialUpdateRequest {
    kpUuid: string;
    patchedCertificateKeyPairRequest?: PatchedCertificateKeyPairRequest;
}

export interface CryptoCertificatekeypairsRetrieveRequest {
    kpUuid: string;
}

export interface CryptoCertificatekeypairsUpdateRequest {
    kpUuid: string;
    certificateKeyPairRequest: CertificateKeyPairRequest;
}

export interface CryptoCertificatekeypairsUsedByListRequest {
    kpUuid: string;
}

export interface CryptoCertificatekeypairsViewCertificateRetrieveRequest {
    kpUuid: string;
    download?: boolean;
}

export interface CryptoCertificatekeypairsViewPrivateKeyRetrieveRequest {
    kpUuid: string;
    download?: boolean;
}

/**
 * no description
 */
export class CryptoApi extends BaseAPI {

    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsCreate({ certificateKeyPairRequest }: CryptoCertificatekeypairsCreateRequest): Observable<CertificateKeyPair>
    cryptoCertificatekeypairsCreate({ certificateKeyPairRequest }: CryptoCertificatekeypairsCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<CertificateKeyPair>>
    cryptoCertificatekeypairsCreate({ certificateKeyPairRequest }: CryptoCertificatekeypairsCreateRequest, opts?: OperationOpts): Observable<CertificateKeyPair | AjaxResponse<CertificateKeyPair>> {
        throwIfNullOrUndefined(certificateKeyPairRequest, 'certificateKeyPairRequest', 'cryptoCertificatekeypairsCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<CertificateKeyPair>({
            url: '/crypto/certificatekeypairs/',
            method: 'POST',
            headers,
            body: certificateKeyPairRequest,
        }, opts?.responseOpts);
    };

    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsDestroy({ kpUuid }: CryptoCertificatekeypairsDestroyRequest): Observable<void>
    cryptoCertificatekeypairsDestroy({ kpUuid }: CryptoCertificatekeypairsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    cryptoCertificatekeypairsDestroy({ kpUuid }: CryptoCertificatekeypairsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(kpUuid, 'kpUuid', 'cryptoCertificatekeypairsDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/crypto/certificatekeypairs/{kp_uuid}/'.replace('{kp_uuid}', encodeURI(kpUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Generate a new, self-signed certificate-key pair
     */
    cryptoCertificatekeypairsGenerateCreate({ certificateGenerationRequest }: CryptoCertificatekeypairsGenerateCreateRequest): Observable<CertificateKeyPair>
    cryptoCertificatekeypairsGenerateCreate({ certificateGenerationRequest }: CryptoCertificatekeypairsGenerateCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<CertificateKeyPair>>
    cryptoCertificatekeypairsGenerateCreate({ certificateGenerationRequest }: CryptoCertificatekeypairsGenerateCreateRequest, opts?: OperationOpts): Observable<CertificateKeyPair | AjaxResponse<CertificateKeyPair>> {
        throwIfNullOrUndefined(certificateGenerationRequest, 'certificateGenerationRequest', 'cryptoCertificatekeypairsGenerateCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<CertificateKeyPair>({
            url: '/crypto/certificatekeypairs/generate/',
            method: 'POST',
            headers,
            body: certificateGenerationRequest,
        }, opts?.responseOpts);
    };

    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsList({ hasKey, includeDetails, managed, name, ordering, page, pageSize, search }: CryptoCertificatekeypairsListRequest): Observable<PaginatedCertificateKeyPairList>
    cryptoCertificatekeypairsList({ hasKey, includeDetails, managed, name, ordering, page, pageSize, search }: CryptoCertificatekeypairsListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedCertificateKeyPairList>>
    cryptoCertificatekeypairsList({ hasKey, includeDetails, managed, name, ordering, page, pageSize, search }: CryptoCertificatekeypairsListRequest, opts?: OperationOpts): Observable<PaginatedCertificateKeyPairList | AjaxResponse<PaginatedCertificateKeyPairList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (hasKey != null) { query['has_key'] = hasKey; }
        if (includeDetails != null) { query['include_details'] = includeDetails; }
        if (managed != null) { query['managed'] = managed; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedCertificateKeyPairList>({
            url: '/crypto/certificatekeypairs/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsPartialUpdate({ kpUuid, patchedCertificateKeyPairRequest }: CryptoCertificatekeypairsPartialUpdateRequest): Observable<CertificateKeyPair>
    cryptoCertificatekeypairsPartialUpdate({ kpUuid, patchedCertificateKeyPairRequest }: CryptoCertificatekeypairsPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<CertificateKeyPair>>
    cryptoCertificatekeypairsPartialUpdate({ kpUuid, patchedCertificateKeyPairRequest }: CryptoCertificatekeypairsPartialUpdateRequest, opts?: OperationOpts): Observable<CertificateKeyPair | AjaxResponse<CertificateKeyPair>> {
        throwIfNullOrUndefined(kpUuid, 'kpUuid', 'cryptoCertificatekeypairsPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<CertificateKeyPair>({
            url: '/crypto/certificatekeypairs/{kp_uuid}/'.replace('{kp_uuid}', encodeURI(kpUuid)),
            method: 'PATCH',
            headers,
            body: patchedCertificateKeyPairRequest,
        }, opts?.responseOpts);
    };

    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsRetrieve({ kpUuid }: CryptoCertificatekeypairsRetrieveRequest): Observable<CertificateKeyPair>
    cryptoCertificatekeypairsRetrieve({ kpUuid }: CryptoCertificatekeypairsRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<CertificateKeyPair>>
    cryptoCertificatekeypairsRetrieve({ kpUuid }: CryptoCertificatekeypairsRetrieveRequest, opts?: OperationOpts): Observable<CertificateKeyPair | AjaxResponse<CertificateKeyPair>> {
        throwIfNullOrUndefined(kpUuid, 'kpUuid', 'cryptoCertificatekeypairsRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<CertificateKeyPair>({
            url: '/crypto/certificatekeypairs/{kp_uuid}/'.replace('{kp_uuid}', encodeURI(kpUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsUpdate({ kpUuid, certificateKeyPairRequest }: CryptoCertificatekeypairsUpdateRequest): Observable<CertificateKeyPair>
    cryptoCertificatekeypairsUpdate({ kpUuid, certificateKeyPairRequest }: CryptoCertificatekeypairsUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<CertificateKeyPair>>
    cryptoCertificatekeypairsUpdate({ kpUuid, certificateKeyPairRequest }: CryptoCertificatekeypairsUpdateRequest, opts?: OperationOpts): Observable<CertificateKeyPair | AjaxResponse<CertificateKeyPair>> {
        throwIfNullOrUndefined(kpUuid, 'kpUuid', 'cryptoCertificatekeypairsUpdate');
        throwIfNullOrUndefined(certificateKeyPairRequest, 'certificateKeyPairRequest', 'cryptoCertificatekeypairsUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<CertificateKeyPair>({
            url: '/crypto/certificatekeypairs/{kp_uuid}/'.replace('{kp_uuid}', encodeURI(kpUuid)),
            method: 'PUT',
            headers,
            body: certificateKeyPairRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    cryptoCertificatekeypairsUsedByList({ kpUuid }: CryptoCertificatekeypairsUsedByListRequest): Observable<Array<UsedBy>>
    cryptoCertificatekeypairsUsedByList({ kpUuid }: CryptoCertificatekeypairsUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    cryptoCertificatekeypairsUsedByList({ kpUuid }: CryptoCertificatekeypairsUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(kpUuid, 'kpUuid', 'cryptoCertificatekeypairsUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/crypto/certificatekeypairs/{kp_uuid}/used_by/'.replace('{kp_uuid}', encodeURI(kpUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return certificate-key pairs certificate and log access
     */
    cryptoCertificatekeypairsViewCertificateRetrieve({ kpUuid, download }: CryptoCertificatekeypairsViewCertificateRetrieveRequest): Observable<CertificateData>
    cryptoCertificatekeypairsViewCertificateRetrieve({ kpUuid, download }: CryptoCertificatekeypairsViewCertificateRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<CertificateData>>
    cryptoCertificatekeypairsViewCertificateRetrieve({ kpUuid, download }: CryptoCertificatekeypairsViewCertificateRetrieveRequest, opts?: OperationOpts): Observable<CertificateData | AjaxResponse<CertificateData>> {
        throwIfNullOrUndefined(kpUuid, 'kpUuid', 'cryptoCertificatekeypairsViewCertificateRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (download != null) { query['download'] = download; }

        return this.request<CertificateData>({
            url: '/crypto/certificatekeypairs/{kp_uuid}/view_certificate/'.replace('{kp_uuid}', encodeURI(kpUuid)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Return certificate-key pairs private key and log access
     */
    cryptoCertificatekeypairsViewPrivateKeyRetrieve({ kpUuid, download }: CryptoCertificatekeypairsViewPrivateKeyRetrieveRequest): Observable<CertificateData>
    cryptoCertificatekeypairsViewPrivateKeyRetrieve({ kpUuid, download }: CryptoCertificatekeypairsViewPrivateKeyRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<CertificateData>>
    cryptoCertificatekeypairsViewPrivateKeyRetrieve({ kpUuid, download }: CryptoCertificatekeypairsViewPrivateKeyRetrieveRequest, opts?: OperationOpts): Observable<CertificateData | AjaxResponse<CertificateData>> {
        throwIfNullOrUndefined(kpUuid, 'kpUuid', 'cryptoCertificatekeypairsViewPrivateKeyRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (download != null) { query['download'] = download; }

        return this.request<CertificateData>({
            url: '/crypto/certificatekeypairs/{kp_uuid}/view_private_key/'.replace('{kp_uuid}', encodeURI(kpUuid)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
