// tslint:disable
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2023.10.2
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    Cache,
    DummyPolicy,
    DummyPolicyRequest,
    EventMatcherPolicy,
    EventMatcherPolicyRequest,
    ExpressionPolicy,
    ExpressionPolicyRequest,
    GenericError,
    PaginatedDummyPolicyList,
    PaginatedEventMatcherPolicyList,
    PaginatedExpressionPolicyList,
    PaginatedPasswordExpiryPolicyList,
    PaginatedPasswordPolicyList,
    PaginatedPolicyBindingList,
    PaginatedPolicyList,
    PaginatedReputationList,
    PaginatedReputationPolicyList,
    PasswordExpiryPolicy,
    PasswordExpiryPolicyRequest,
    PasswordPolicy,
    PasswordPolicyRequest,
    PatchedDummyPolicyRequest,
    PatchedEventMatcherPolicyRequest,
    PatchedExpressionPolicyRequest,
    PatchedPasswordExpiryPolicyRequest,
    PatchedPasswordPolicyRequest,
    PatchedPolicyBindingRequest,
    PatchedReputationPolicyRequest,
    Policy,
    PolicyBinding,
    PolicyBindingRequest,
    PolicyTestRequest,
    PolicyTestResult,
    Reputation,
    ReputationPolicy,
    ReputationPolicyRequest,
    TypeCreate,
    UsedBy,
    ValidationError,
} from '../models';

export interface PoliciesAllDestroyRequest {
    policyUuid: string;
}

export interface PoliciesAllListRequest {
    bindingsIsnull?: boolean;
    ordering?: string;
    page?: number;
    pageSize?: number;
    promptstageIsnull?: boolean;
    search?: string;
}

export interface PoliciesAllRetrieveRequest {
    policyUuid: string;
}

export interface PoliciesAllTestCreateRequest {
    policyUuid: string;
    policyTestRequest: PolicyTestRequest;
}

export interface PoliciesAllUsedByListRequest {
    policyUuid: string;
}

export interface PoliciesBindingsCreateRequest {
    policyBindingRequest: PolicyBindingRequest;
}

export interface PoliciesBindingsDestroyRequest {
    policyBindingUuid: string;
}

export interface PoliciesBindingsListRequest {
    enabled?: boolean;
    order?: number;
    ordering?: string;
    page?: number;
    pageSize?: number;
    policy?: string;
    policyIsnull?: boolean;
    search?: string;
    target?: string;
    targetIn?: Array<string>;
    timeout?: number;
}

export interface PoliciesBindingsPartialUpdateRequest {
    policyBindingUuid: string;
    patchedPolicyBindingRequest?: PatchedPolicyBindingRequest;
}

export interface PoliciesBindingsRetrieveRequest {
    policyBindingUuid: string;
}

export interface PoliciesBindingsUpdateRequest {
    policyBindingUuid: string;
    policyBindingRequest: PolicyBindingRequest;
}

export interface PoliciesBindingsUsedByListRequest {
    policyBindingUuid: string;
}

export interface PoliciesDummyCreateRequest {
    dummyPolicyRequest: DummyPolicyRequest;
}

export interface PoliciesDummyDestroyRequest {
    policyUuid: string;
}

export interface PoliciesDummyListRequest {
    created?: string;
    executionLogging?: boolean;
    lastUpdated?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    policyUuid?: string;
    result?: boolean;
    search?: string;
    waitMax?: number;
    waitMin?: number;
}

export interface PoliciesDummyPartialUpdateRequest {
    policyUuid: string;
    patchedDummyPolicyRequest?: PatchedDummyPolicyRequest;
}

export interface PoliciesDummyRetrieveRequest {
    policyUuid: string;
}

export interface PoliciesDummyUpdateRequest {
    policyUuid: string;
    dummyPolicyRequest: DummyPolicyRequest;
}

export interface PoliciesDummyUsedByListRequest {
    policyUuid: string;
}

export interface PoliciesEventMatcherCreateRequest {
    eventMatcherPolicyRequest: EventMatcherPolicyRequest;
}

export interface PoliciesEventMatcherDestroyRequest {
    policyUuid: string;
}

export interface PoliciesEventMatcherListRequest {
    action?: PoliciesEventMatcherListActionEnum;
    app?: string;
    clientIp?: string;
    created?: string;
    executionLogging?: boolean;
    lastUpdated?: string;
    model?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    policyUuid?: string;
    search?: string;
}

export interface PoliciesEventMatcherPartialUpdateRequest {
    policyUuid: string;
    patchedEventMatcherPolicyRequest?: PatchedEventMatcherPolicyRequest;
}

export interface PoliciesEventMatcherRetrieveRequest {
    policyUuid: string;
}

export interface PoliciesEventMatcherUpdateRequest {
    policyUuid: string;
    eventMatcherPolicyRequest: EventMatcherPolicyRequest;
}

export interface PoliciesEventMatcherUsedByListRequest {
    policyUuid: string;
}

export interface PoliciesExpressionCreateRequest {
    expressionPolicyRequest: ExpressionPolicyRequest;
}

export interface PoliciesExpressionDestroyRequest {
    policyUuid: string;
}

export interface PoliciesExpressionListRequest {
    created?: string;
    executionLogging?: boolean;
    expression?: string;
    lastUpdated?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    policyUuid?: string;
    search?: string;
}

export interface PoliciesExpressionPartialUpdateRequest {
    policyUuid: string;
    patchedExpressionPolicyRequest?: PatchedExpressionPolicyRequest;
}

export interface PoliciesExpressionRetrieveRequest {
    policyUuid: string;
}

export interface PoliciesExpressionUpdateRequest {
    policyUuid: string;
    expressionPolicyRequest: ExpressionPolicyRequest;
}

export interface PoliciesExpressionUsedByListRequest {
    policyUuid: string;
}

export interface PoliciesPasswordCreateRequest {
    passwordPolicyRequest: PasswordPolicyRequest;
}

export interface PoliciesPasswordDestroyRequest {
    policyUuid: string;
}

export interface PoliciesPasswordExpiryCreateRequest {
    passwordExpiryPolicyRequest: PasswordExpiryPolicyRequest;
}

export interface PoliciesPasswordExpiryDestroyRequest {
    policyUuid: string;
}

export interface PoliciesPasswordExpiryListRequest {
    created?: string;
    days?: number;
    denyOnly?: boolean;
    executionLogging?: boolean;
    lastUpdated?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    policyUuid?: string;
    search?: string;
}

export interface PoliciesPasswordExpiryPartialUpdateRequest {
    policyUuid: string;
    patchedPasswordExpiryPolicyRequest?: PatchedPasswordExpiryPolicyRequest;
}

export interface PoliciesPasswordExpiryRetrieveRequest {
    policyUuid: string;
}

export interface PoliciesPasswordExpiryUpdateRequest {
    policyUuid: string;
    passwordExpiryPolicyRequest: PasswordExpiryPolicyRequest;
}

export interface PoliciesPasswordExpiryUsedByListRequest {
    policyUuid: string;
}

export interface PoliciesPasswordListRequest {
    amountDigits?: number;
    amountLowercase?: number;
    amountSymbols?: number;
    amountUppercase?: number;
    checkHaveIBeenPwned?: boolean;
    checkStaticRules?: boolean;
    checkZxcvbn?: boolean;
    created?: string;
    errorMessage?: string;
    executionLogging?: boolean;
    hibpAllowedCount?: number;
    lastUpdated?: string;
    lengthMin?: number;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    passwordField?: string;
    policyUuid?: string;
    search?: string;
    symbolCharset?: string;
    zxcvbnScoreThreshold?: number;
}

export interface PoliciesPasswordPartialUpdateRequest {
    policyUuid: string;
    patchedPasswordPolicyRequest?: PatchedPasswordPolicyRequest;
}

export interface PoliciesPasswordRetrieveRequest {
    policyUuid: string;
}

export interface PoliciesPasswordUpdateRequest {
    policyUuid: string;
    passwordPolicyRequest: PasswordPolicyRequest;
}

export interface PoliciesPasswordUsedByListRequest {
    policyUuid: string;
}

export interface PoliciesReputationCreateRequest {
    reputationPolicyRequest: ReputationPolicyRequest;
}

export interface PoliciesReputationDestroyRequest {
    policyUuid: string;
}

export interface PoliciesReputationListRequest {
    checkIp?: boolean;
    checkUsername?: boolean;
    created?: string;
    executionLogging?: boolean;
    lastUpdated?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    policyUuid?: string;
    search?: string;
    threshold?: number;
}

export interface PoliciesReputationPartialUpdateRequest {
    policyUuid: string;
    patchedReputationPolicyRequest?: PatchedReputationPolicyRequest;
}

export interface PoliciesReputationRetrieveRequest {
    policyUuid: string;
}

export interface PoliciesReputationScoresDestroyRequest {
    reputationUuid: string;
}

export interface PoliciesReputationScoresListRequest {
    identifier?: string;
    ip?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    score?: number;
    search?: string;
}

export interface PoliciesReputationScoresRetrieveRequest {
    reputationUuid: string;
}

export interface PoliciesReputationScoresUsedByListRequest {
    reputationUuid: string;
}

export interface PoliciesReputationUpdateRequest {
    policyUuid: string;
    reputationPolicyRequest: ReputationPolicyRequest;
}

export interface PoliciesReputationUsedByListRequest {
    policyUuid: string;
}

/**
 * no description
 */
export class PoliciesApi extends BaseAPI {

    /**
     * Clear policy cache
     */
    policiesAllCacheClearCreate(): Observable<void>
    policiesAllCacheClearCreate(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    policiesAllCacheClearCreate(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/policies/all/cache_clear/',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Info about cached policies
     */
    policiesAllCacheInfoRetrieve(): Observable<Cache>
    policiesAllCacheInfoRetrieve(opts?: OperationOpts): Observable<AjaxResponse<Cache>>
    policiesAllCacheInfoRetrieve(opts?: OperationOpts): Observable<Cache | AjaxResponse<Cache>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Cache>({
            url: '/policies/all/cache_info/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Policy Viewset
     */
    policiesAllDestroy({ policyUuid }: PoliciesAllDestroyRequest): Observable<void>
    policiesAllDestroy({ policyUuid }: PoliciesAllDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    policiesAllDestroy({ policyUuid }: PoliciesAllDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesAllDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/policies/all/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Policy Viewset
     */
    policiesAllList({ bindingsIsnull, ordering, page, pageSize, promptstageIsnull, search }: PoliciesAllListRequest): Observable<PaginatedPolicyList>
    policiesAllList({ bindingsIsnull, ordering, page, pageSize, promptstageIsnull, search }: PoliciesAllListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedPolicyList>>
    policiesAllList({ bindingsIsnull, ordering, page, pageSize, promptstageIsnull, search }: PoliciesAllListRequest, opts?: OperationOpts): Observable<PaginatedPolicyList | AjaxResponse<PaginatedPolicyList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (bindingsIsnull != null) { query['bindings__isnull'] = bindingsIsnull; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (promptstageIsnull != null) { query['promptstage__isnull'] = promptstageIsnull; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedPolicyList>({
            url: '/policies/all/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Policy Viewset
     */
    policiesAllRetrieve({ policyUuid }: PoliciesAllRetrieveRequest): Observable<Policy>
    policiesAllRetrieve({ policyUuid }: PoliciesAllRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<Policy>>
    policiesAllRetrieve({ policyUuid }: PoliciesAllRetrieveRequest, opts?: OperationOpts): Observable<Policy | AjaxResponse<Policy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesAllRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Policy>({
            url: '/policies/all/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Test policy
     */
    policiesAllTestCreate({ policyUuid, policyTestRequest }: PoliciesAllTestCreateRequest): Observable<PolicyTestResult>
    policiesAllTestCreate({ policyUuid, policyTestRequest }: PoliciesAllTestCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<PolicyTestResult>>
    policiesAllTestCreate({ policyUuid, policyTestRequest }: PoliciesAllTestCreateRequest, opts?: OperationOpts): Observable<PolicyTestResult | AjaxResponse<PolicyTestResult>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesAllTestCreate');
        throwIfNullOrUndefined(policyTestRequest, 'policyTestRequest', 'policiesAllTestCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PolicyTestResult>({
            url: '/policies/all/{policy_uuid}/test/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'POST',
            headers,
            body: policyTestRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get all creatable policy types
     */
    policiesAllTypesList(): Observable<Array<TypeCreate>>
    policiesAllTypesList(opts?: OperationOpts): Observable<AjaxResponse<Array<TypeCreate>>>
    policiesAllTypesList(opts?: OperationOpts): Observable<Array<TypeCreate> | AjaxResponse<Array<TypeCreate>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<TypeCreate>>({
            url: '/policies/all/types/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    policiesAllUsedByList({ policyUuid }: PoliciesAllUsedByListRequest): Observable<Array<UsedBy>>
    policiesAllUsedByList({ policyUuid }: PoliciesAllUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    policiesAllUsedByList({ policyUuid }: PoliciesAllUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesAllUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/policies/all/{policy_uuid}/used_by/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * PolicyBinding Viewset
     */
    policiesBindingsCreate({ policyBindingRequest }: PoliciesBindingsCreateRequest): Observable<PolicyBinding>
    policiesBindingsCreate({ policyBindingRequest }: PoliciesBindingsCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<PolicyBinding>>
    policiesBindingsCreate({ policyBindingRequest }: PoliciesBindingsCreateRequest, opts?: OperationOpts): Observable<PolicyBinding | AjaxResponse<PolicyBinding>> {
        throwIfNullOrUndefined(policyBindingRequest, 'policyBindingRequest', 'policiesBindingsCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PolicyBinding>({
            url: '/policies/bindings/',
            method: 'POST',
            headers,
            body: policyBindingRequest,
        }, opts?.responseOpts);
    };

    /**
     * PolicyBinding Viewset
     */
    policiesBindingsDestroy({ policyBindingUuid }: PoliciesBindingsDestroyRequest): Observable<void>
    policiesBindingsDestroy({ policyBindingUuid }: PoliciesBindingsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    policiesBindingsDestroy({ policyBindingUuid }: PoliciesBindingsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(policyBindingUuid, 'policyBindingUuid', 'policiesBindingsDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/policies/bindings/{policy_binding_uuid}/'.replace('{policy_binding_uuid}', encodeURI(policyBindingUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * PolicyBinding Viewset
     */
    policiesBindingsList({ enabled, order, ordering, page, pageSize, policy, policyIsnull, search, target, targetIn, timeout }: PoliciesBindingsListRequest): Observable<PaginatedPolicyBindingList>
    policiesBindingsList({ enabled, order, ordering, page, pageSize, policy, policyIsnull, search, target, targetIn, timeout }: PoliciesBindingsListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedPolicyBindingList>>
    policiesBindingsList({ enabled, order, ordering, page, pageSize, policy, policyIsnull, search, target, targetIn, timeout }: PoliciesBindingsListRequest, opts?: OperationOpts): Observable<PaginatedPolicyBindingList | AjaxResponse<PaginatedPolicyBindingList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (enabled != null) { query['enabled'] = enabled; }
        if (order != null) { query['order'] = order; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (policy != null) { query['policy'] = policy; }
        if (policyIsnull != null) { query['policy__isnull'] = policyIsnull; }
        if (search != null) { query['search'] = search; }
        if (target != null) { query['target'] = target; }
        if (targetIn != null) { query['target_in'] = targetIn; }
        if (timeout != null) { query['timeout'] = timeout; }

        return this.request<PaginatedPolicyBindingList>({
            url: '/policies/bindings/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * PolicyBinding Viewset
     */
    policiesBindingsPartialUpdate({ policyBindingUuid, patchedPolicyBindingRequest }: PoliciesBindingsPartialUpdateRequest): Observable<PolicyBinding>
    policiesBindingsPartialUpdate({ policyBindingUuid, patchedPolicyBindingRequest }: PoliciesBindingsPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<PolicyBinding>>
    policiesBindingsPartialUpdate({ policyBindingUuid, patchedPolicyBindingRequest }: PoliciesBindingsPartialUpdateRequest, opts?: OperationOpts): Observable<PolicyBinding | AjaxResponse<PolicyBinding>> {
        throwIfNullOrUndefined(policyBindingUuid, 'policyBindingUuid', 'policiesBindingsPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PolicyBinding>({
            url: '/policies/bindings/{policy_binding_uuid}/'.replace('{policy_binding_uuid}', encodeURI(policyBindingUuid)),
            method: 'PATCH',
            headers,
            body: patchedPolicyBindingRequest,
        }, opts?.responseOpts);
    };

    /**
     * PolicyBinding Viewset
     */
    policiesBindingsRetrieve({ policyBindingUuid }: PoliciesBindingsRetrieveRequest): Observable<PolicyBinding>
    policiesBindingsRetrieve({ policyBindingUuid }: PoliciesBindingsRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<PolicyBinding>>
    policiesBindingsRetrieve({ policyBindingUuid }: PoliciesBindingsRetrieveRequest, opts?: OperationOpts): Observable<PolicyBinding | AjaxResponse<PolicyBinding>> {
        throwIfNullOrUndefined(policyBindingUuid, 'policyBindingUuid', 'policiesBindingsRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PolicyBinding>({
            url: '/policies/bindings/{policy_binding_uuid}/'.replace('{policy_binding_uuid}', encodeURI(policyBindingUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * PolicyBinding Viewset
     */
    policiesBindingsUpdate({ policyBindingUuid, policyBindingRequest }: PoliciesBindingsUpdateRequest): Observable<PolicyBinding>
    policiesBindingsUpdate({ policyBindingUuid, policyBindingRequest }: PoliciesBindingsUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<PolicyBinding>>
    policiesBindingsUpdate({ policyBindingUuid, policyBindingRequest }: PoliciesBindingsUpdateRequest, opts?: OperationOpts): Observable<PolicyBinding | AjaxResponse<PolicyBinding>> {
        throwIfNullOrUndefined(policyBindingUuid, 'policyBindingUuid', 'policiesBindingsUpdate');
        throwIfNullOrUndefined(policyBindingRequest, 'policyBindingRequest', 'policiesBindingsUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PolicyBinding>({
            url: '/policies/bindings/{policy_binding_uuid}/'.replace('{policy_binding_uuid}', encodeURI(policyBindingUuid)),
            method: 'PUT',
            headers,
            body: policyBindingRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    policiesBindingsUsedByList({ policyBindingUuid }: PoliciesBindingsUsedByListRequest): Observable<Array<UsedBy>>
    policiesBindingsUsedByList({ policyBindingUuid }: PoliciesBindingsUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    policiesBindingsUsedByList({ policyBindingUuid }: PoliciesBindingsUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(policyBindingUuid, 'policyBindingUuid', 'policiesBindingsUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/policies/bindings/{policy_binding_uuid}/used_by/'.replace('{policy_binding_uuid}', encodeURI(policyBindingUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Dummy Viewset
     */
    policiesDummyCreate({ dummyPolicyRequest }: PoliciesDummyCreateRequest): Observable<DummyPolicy>
    policiesDummyCreate({ dummyPolicyRequest }: PoliciesDummyCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<DummyPolicy>>
    policiesDummyCreate({ dummyPolicyRequest }: PoliciesDummyCreateRequest, opts?: OperationOpts): Observable<DummyPolicy | AjaxResponse<DummyPolicy>> {
        throwIfNullOrUndefined(dummyPolicyRequest, 'dummyPolicyRequest', 'policiesDummyCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DummyPolicy>({
            url: '/policies/dummy/',
            method: 'POST',
            headers,
            body: dummyPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Dummy Viewset
     */
    policiesDummyDestroy({ policyUuid }: PoliciesDummyDestroyRequest): Observable<void>
    policiesDummyDestroy({ policyUuid }: PoliciesDummyDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    policiesDummyDestroy({ policyUuid }: PoliciesDummyDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesDummyDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/policies/dummy/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Dummy Viewset
     */
    policiesDummyList({ created, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, result, search, waitMax, waitMin }: PoliciesDummyListRequest): Observable<PaginatedDummyPolicyList>
    policiesDummyList({ created, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, result, search, waitMax, waitMin }: PoliciesDummyListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedDummyPolicyList>>
    policiesDummyList({ created, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, result, search, waitMax, waitMin }: PoliciesDummyListRequest, opts?: OperationOpts): Observable<PaginatedDummyPolicyList | AjaxResponse<PaginatedDummyPolicyList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (created != null) { query['created'] = (created as any).toISOString(); }
        if (executionLogging != null) { query['execution_logging'] = executionLogging; }
        if (lastUpdated != null) { query['last_updated'] = (lastUpdated as any).toISOString(); }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (policyUuid != null) { query['policy_uuid'] = policyUuid; }
        if (result != null) { query['result'] = result; }
        if (search != null) { query['search'] = search; }
        if (waitMax != null) { query['wait_max'] = waitMax; }
        if (waitMin != null) { query['wait_min'] = waitMin; }

        return this.request<PaginatedDummyPolicyList>({
            url: '/policies/dummy/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Dummy Viewset
     */
    policiesDummyPartialUpdate({ policyUuid, patchedDummyPolicyRequest }: PoliciesDummyPartialUpdateRequest): Observable<DummyPolicy>
    policiesDummyPartialUpdate({ policyUuid, patchedDummyPolicyRequest }: PoliciesDummyPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<DummyPolicy>>
    policiesDummyPartialUpdate({ policyUuid, patchedDummyPolicyRequest }: PoliciesDummyPartialUpdateRequest, opts?: OperationOpts): Observable<DummyPolicy | AjaxResponse<DummyPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesDummyPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DummyPolicy>({
            url: '/policies/dummy/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'PATCH',
            headers,
            body: patchedDummyPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Dummy Viewset
     */
    policiesDummyRetrieve({ policyUuid }: PoliciesDummyRetrieveRequest): Observable<DummyPolicy>
    policiesDummyRetrieve({ policyUuid }: PoliciesDummyRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<DummyPolicy>>
    policiesDummyRetrieve({ policyUuid }: PoliciesDummyRetrieveRequest, opts?: OperationOpts): Observable<DummyPolicy | AjaxResponse<DummyPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesDummyRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DummyPolicy>({
            url: '/policies/dummy/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Dummy Viewset
     */
    policiesDummyUpdate({ policyUuid, dummyPolicyRequest }: PoliciesDummyUpdateRequest): Observable<DummyPolicy>
    policiesDummyUpdate({ policyUuid, dummyPolicyRequest }: PoliciesDummyUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<DummyPolicy>>
    policiesDummyUpdate({ policyUuid, dummyPolicyRequest }: PoliciesDummyUpdateRequest, opts?: OperationOpts): Observable<DummyPolicy | AjaxResponse<DummyPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesDummyUpdate');
        throwIfNullOrUndefined(dummyPolicyRequest, 'dummyPolicyRequest', 'policiesDummyUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DummyPolicy>({
            url: '/policies/dummy/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'PUT',
            headers,
            body: dummyPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    policiesDummyUsedByList({ policyUuid }: PoliciesDummyUsedByListRequest): Observable<Array<UsedBy>>
    policiesDummyUsedByList({ policyUuid }: PoliciesDummyUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    policiesDummyUsedByList({ policyUuid }: PoliciesDummyUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesDummyUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/policies/dummy/{policy_uuid}/used_by/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Event Matcher Policy Viewset
     */
    policiesEventMatcherCreate({ eventMatcherPolicyRequest }: PoliciesEventMatcherCreateRequest): Observable<EventMatcherPolicy>
    policiesEventMatcherCreate({ eventMatcherPolicyRequest }: PoliciesEventMatcherCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<EventMatcherPolicy>>
    policiesEventMatcherCreate({ eventMatcherPolicyRequest }: PoliciesEventMatcherCreateRequest, opts?: OperationOpts): Observable<EventMatcherPolicy | AjaxResponse<EventMatcherPolicy>> {
        throwIfNullOrUndefined(eventMatcherPolicyRequest, 'eventMatcherPolicyRequest', 'policiesEventMatcherCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<EventMatcherPolicy>({
            url: '/policies/event_matcher/',
            method: 'POST',
            headers,
            body: eventMatcherPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Event Matcher Policy Viewset
     */
    policiesEventMatcherDestroy({ policyUuid }: PoliciesEventMatcherDestroyRequest): Observable<void>
    policiesEventMatcherDestroy({ policyUuid }: PoliciesEventMatcherDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    policiesEventMatcherDestroy({ policyUuid }: PoliciesEventMatcherDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesEventMatcherDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/policies/event_matcher/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Event Matcher Policy Viewset
     */
    policiesEventMatcherList({ action, app, clientIp, created, executionLogging, lastUpdated, model, name, ordering, page, pageSize, policyUuid, search }: PoliciesEventMatcherListRequest): Observable<PaginatedEventMatcherPolicyList>
    policiesEventMatcherList({ action, app, clientIp, created, executionLogging, lastUpdated, model, name, ordering, page, pageSize, policyUuid, search }: PoliciesEventMatcherListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedEventMatcherPolicyList>>
    policiesEventMatcherList({ action, app, clientIp, created, executionLogging, lastUpdated, model, name, ordering, page, pageSize, policyUuid, search }: PoliciesEventMatcherListRequest, opts?: OperationOpts): Observable<PaginatedEventMatcherPolicyList | AjaxResponse<PaginatedEventMatcherPolicyList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (action != null) { query['action'] = action; }
        if (app != null) { query['app'] = app; }
        if (clientIp != null) { query['client_ip'] = clientIp; }
        if (created != null) { query['created'] = (created as any).toISOString(); }
        if (executionLogging != null) { query['execution_logging'] = executionLogging; }
        if (lastUpdated != null) { query['last_updated'] = (lastUpdated as any).toISOString(); }
        if (model != null) { query['model'] = model; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (policyUuid != null) { query['policy_uuid'] = policyUuid; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedEventMatcherPolicyList>({
            url: '/policies/event_matcher/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Event Matcher Policy Viewset
     */
    policiesEventMatcherPartialUpdate({ policyUuid, patchedEventMatcherPolicyRequest }: PoliciesEventMatcherPartialUpdateRequest): Observable<EventMatcherPolicy>
    policiesEventMatcherPartialUpdate({ policyUuid, patchedEventMatcherPolicyRequest }: PoliciesEventMatcherPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<EventMatcherPolicy>>
    policiesEventMatcherPartialUpdate({ policyUuid, patchedEventMatcherPolicyRequest }: PoliciesEventMatcherPartialUpdateRequest, opts?: OperationOpts): Observable<EventMatcherPolicy | AjaxResponse<EventMatcherPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesEventMatcherPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<EventMatcherPolicy>({
            url: '/policies/event_matcher/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'PATCH',
            headers,
            body: patchedEventMatcherPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Event Matcher Policy Viewset
     */
    policiesEventMatcherRetrieve({ policyUuid }: PoliciesEventMatcherRetrieveRequest): Observable<EventMatcherPolicy>
    policiesEventMatcherRetrieve({ policyUuid }: PoliciesEventMatcherRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<EventMatcherPolicy>>
    policiesEventMatcherRetrieve({ policyUuid }: PoliciesEventMatcherRetrieveRequest, opts?: OperationOpts): Observable<EventMatcherPolicy | AjaxResponse<EventMatcherPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesEventMatcherRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<EventMatcherPolicy>({
            url: '/policies/event_matcher/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Event Matcher Policy Viewset
     */
    policiesEventMatcherUpdate({ policyUuid, eventMatcherPolicyRequest }: PoliciesEventMatcherUpdateRequest): Observable<EventMatcherPolicy>
    policiesEventMatcherUpdate({ policyUuid, eventMatcherPolicyRequest }: PoliciesEventMatcherUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<EventMatcherPolicy>>
    policiesEventMatcherUpdate({ policyUuid, eventMatcherPolicyRequest }: PoliciesEventMatcherUpdateRequest, opts?: OperationOpts): Observable<EventMatcherPolicy | AjaxResponse<EventMatcherPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesEventMatcherUpdate');
        throwIfNullOrUndefined(eventMatcherPolicyRequest, 'eventMatcherPolicyRequest', 'policiesEventMatcherUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<EventMatcherPolicy>({
            url: '/policies/event_matcher/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'PUT',
            headers,
            body: eventMatcherPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    policiesEventMatcherUsedByList({ policyUuid }: PoliciesEventMatcherUsedByListRequest): Observable<Array<UsedBy>>
    policiesEventMatcherUsedByList({ policyUuid }: PoliciesEventMatcherUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    policiesEventMatcherUsedByList({ policyUuid }: PoliciesEventMatcherUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesEventMatcherUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/policies/event_matcher/{policy_uuid}/used_by/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Source Viewset
     */
    policiesExpressionCreate({ expressionPolicyRequest }: PoliciesExpressionCreateRequest): Observable<ExpressionPolicy>
    policiesExpressionCreate({ expressionPolicyRequest }: PoliciesExpressionCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<ExpressionPolicy>>
    policiesExpressionCreate({ expressionPolicyRequest }: PoliciesExpressionCreateRequest, opts?: OperationOpts): Observable<ExpressionPolicy | AjaxResponse<ExpressionPolicy>> {
        throwIfNullOrUndefined(expressionPolicyRequest, 'expressionPolicyRequest', 'policiesExpressionCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ExpressionPolicy>({
            url: '/policies/expression/',
            method: 'POST',
            headers,
            body: expressionPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Source Viewset
     */
    policiesExpressionDestroy({ policyUuid }: PoliciesExpressionDestroyRequest): Observable<void>
    policiesExpressionDestroy({ policyUuid }: PoliciesExpressionDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    policiesExpressionDestroy({ policyUuid }: PoliciesExpressionDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesExpressionDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/policies/expression/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Source Viewset
     */
    policiesExpressionList({ created, executionLogging, expression, lastUpdated, name, ordering, page, pageSize, policyUuid, search }: PoliciesExpressionListRequest): Observable<PaginatedExpressionPolicyList>
    policiesExpressionList({ created, executionLogging, expression, lastUpdated, name, ordering, page, pageSize, policyUuid, search }: PoliciesExpressionListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedExpressionPolicyList>>
    policiesExpressionList({ created, executionLogging, expression, lastUpdated, name, ordering, page, pageSize, policyUuid, search }: PoliciesExpressionListRequest, opts?: OperationOpts): Observable<PaginatedExpressionPolicyList | AjaxResponse<PaginatedExpressionPolicyList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (created != null) { query['created'] = (created as any).toISOString(); }
        if (executionLogging != null) { query['execution_logging'] = executionLogging; }
        if (expression != null) { query['expression'] = expression; }
        if (lastUpdated != null) { query['last_updated'] = (lastUpdated as any).toISOString(); }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (policyUuid != null) { query['policy_uuid'] = policyUuid; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedExpressionPolicyList>({
            url: '/policies/expression/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Source Viewset
     */
    policiesExpressionPartialUpdate({ policyUuid, patchedExpressionPolicyRequest }: PoliciesExpressionPartialUpdateRequest): Observable<ExpressionPolicy>
    policiesExpressionPartialUpdate({ policyUuid, patchedExpressionPolicyRequest }: PoliciesExpressionPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<ExpressionPolicy>>
    policiesExpressionPartialUpdate({ policyUuid, patchedExpressionPolicyRequest }: PoliciesExpressionPartialUpdateRequest, opts?: OperationOpts): Observable<ExpressionPolicy | AjaxResponse<ExpressionPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesExpressionPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ExpressionPolicy>({
            url: '/policies/expression/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'PATCH',
            headers,
            body: patchedExpressionPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Source Viewset
     */
    policiesExpressionRetrieve({ policyUuid }: PoliciesExpressionRetrieveRequest): Observable<ExpressionPolicy>
    policiesExpressionRetrieve({ policyUuid }: PoliciesExpressionRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<ExpressionPolicy>>
    policiesExpressionRetrieve({ policyUuid }: PoliciesExpressionRetrieveRequest, opts?: OperationOpts): Observable<ExpressionPolicy | AjaxResponse<ExpressionPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesExpressionRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ExpressionPolicy>({
            url: '/policies/expression/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Source Viewset
     */
    policiesExpressionUpdate({ policyUuid, expressionPolicyRequest }: PoliciesExpressionUpdateRequest): Observable<ExpressionPolicy>
    policiesExpressionUpdate({ policyUuid, expressionPolicyRequest }: PoliciesExpressionUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<ExpressionPolicy>>
    policiesExpressionUpdate({ policyUuid, expressionPolicyRequest }: PoliciesExpressionUpdateRequest, opts?: OperationOpts): Observable<ExpressionPolicy | AjaxResponse<ExpressionPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesExpressionUpdate');
        throwIfNullOrUndefined(expressionPolicyRequest, 'expressionPolicyRequest', 'policiesExpressionUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ExpressionPolicy>({
            url: '/policies/expression/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'PUT',
            headers,
            body: expressionPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    policiesExpressionUsedByList({ policyUuid }: PoliciesExpressionUsedByListRequest): Observable<Array<UsedBy>>
    policiesExpressionUsedByList({ policyUuid }: PoliciesExpressionUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    policiesExpressionUsedByList({ policyUuid }: PoliciesExpressionUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesExpressionUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/policies/expression/{policy_uuid}/used_by/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Password Policy Viewset
     */
    policiesPasswordCreate({ passwordPolicyRequest }: PoliciesPasswordCreateRequest): Observable<PasswordPolicy>
    policiesPasswordCreate({ passwordPolicyRequest }: PoliciesPasswordCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<PasswordPolicy>>
    policiesPasswordCreate({ passwordPolicyRequest }: PoliciesPasswordCreateRequest, opts?: OperationOpts): Observable<PasswordPolicy | AjaxResponse<PasswordPolicy>> {
        throwIfNullOrUndefined(passwordPolicyRequest, 'passwordPolicyRequest', 'policiesPasswordCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PasswordPolicy>({
            url: '/policies/password/',
            method: 'POST',
            headers,
            body: passwordPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Password Policy Viewset
     */
    policiesPasswordDestroy({ policyUuid }: PoliciesPasswordDestroyRequest): Observable<void>
    policiesPasswordDestroy({ policyUuid }: PoliciesPasswordDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    policiesPasswordDestroy({ policyUuid }: PoliciesPasswordDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesPasswordDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/policies/password/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Password Expiry Viewset
     */
    policiesPasswordExpiryCreate({ passwordExpiryPolicyRequest }: PoliciesPasswordExpiryCreateRequest): Observable<PasswordExpiryPolicy>
    policiesPasswordExpiryCreate({ passwordExpiryPolicyRequest }: PoliciesPasswordExpiryCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<PasswordExpiryPolicy>>
    policiesPasswordExpiryCreate({ passwordExpiryPolicyRequest }: PoliciesPasswordExpiryCreateRequest, opts?: OperationOpts): Observable<PasswordExpiryPolicy | AjaxResponse<PasswordExpiryPolicy>> {
        throwIfNullOrUndefined(passwordExpiryPolicyRequest, 'passwordExpiryPolicyRequest', 'policiesPasswordExpiryCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PasswordExpiryPolicy>({
            url: '/policies/password_expiry/',
            method: 'POST',
            headers,
            body: passwordExpiryPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Password Expiry Viewset
     */
    policiesPasswordExpiryDestroy({ policyUuid }: PoliciesPasswordExpiryDestroyRequest): Observable<void>
    policiesPasswordExpiryDestroy({ policyUuid }: PoliciesPasswordExpiryDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    policiesPasswordExpiryDestroy({ policyUuid }: PoliciesPasswordExpiryDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesPasswordExpiryDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/policies/password_expiry/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Password Expiry Viewset
     */
    policiesPasswordExpiryList({ created, days, denyOnly, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, search }: PoliciesPasswordExpiryListRequest): Observable<PaginatedPasswordExpiryPolicyList>
    policiesPasswordExpiryList({ created, days, denyOnly, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, search }: PoliciesPasswordExpiryListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedPasswordExpiryPolicyList>>
    policiesPasswordExpiryList({ created, days, denyOnly, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, search }: PoliciesPasswordExpiryListRequest, opts?: OperationOpts): Observable<PaginatedPasswordExpiryPolicyList | AjaxResponse<PaginatedPasswordExpiryPolicyList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (created != null) { query['created'] = (created as any).toISOString(); }
        if (days != null) { query['days'] = days; }
        if (denyOnly != null) { query['deny_only'] = denyOnly; }
        if (executionLogging != null) { query['execution_logging'] = executionLogging; }
        if (lastUpdated != null) { query['last_updated'] = (lastUpdated as any).toISOString(); }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (policyUuid != null) { query['policy_uuid'] = policyUuid; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedPasswordExpiryPolicyList>({
            url: '/policies/password_expiry/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Password Expiry Viewset
     */
    policiesPasswordExpiryPartialUpdate({ policyUuid, patchedPasswordExpiryPolicyRequest }: PoliciesPasswordExpiryPartialUpdateRequest): Observable<PasswordExpiryPolicy>
    policiesPasswordExpiryPartialUpdate({ policyUuid, patchedPasswordExpiryPolicyRequest }: PoliciesPasswordExpiryPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<PasswordExpiryPolicy>>
    policiesPasswordExpiryPartialUpdate({ policyUuid, patchedPasswordExpiryPolicyRequest }: PoliciesPasswordExpiryPartialUpdateRequest, opts?: OperationOpts): Observable<PasswordExpiryPolicy | AjaxResponse<PasswordExpiryPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesPasswordExpiryPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PasswordExpiryPolicy>({
            url: '/policies/password_expiry/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'PATCH',
            headers,
            body: patchedPasswordExpiryPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Password Expiry Viewset
     */
    policiesPasswordExpiryRetrieve({ policyUuid }: PoliciesPasswordExpiryRetrieveRequest): Observable<PasswordExpiryPolicy>
    policiesPasswordExpiryRetrieve({ policyUuid }: PoliciesPasswordExpiryRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<PasswordExpiryPolicy>>
    policiesPasswordExpiryRetrieve({ policyUuid }: PoliciesPasswordExpiryRetrieveRequest, opts?: OperationOpts): Observable<PasswordExpiryPolicy | AjaxResponse<PasswordExpiryPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesPasswordExpiryRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PasswordExpiryPolicy>({
            url: '/policies/password_expiry/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Password Expiry Viewset
     */
    policiesPasswordExpiryUpdate({ policyUuid, passwordExpiryPolicyRequest }: PoliciesPasswordExpiryUpdateRequest): Observable<PasswordExpiryPolicy>
    policiesPasswordExpiryUpdate({ policyUuid, passwordExpiryPolicyRequest }: PoliciesPasswordExpiryUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<PasswordExpiryPolicy>>
    policiesPasswordExpiryUpdate({ policyUuid, passwordExpiryPolicyRequest }: PoliciesPasswordExpiryUpdateRequest, opts?: OperationOpts): Observable<PasswordExpiryPolicy | AjaxResponse<PasswordExpiryPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesPasswordExpiryUpdate');
        throwIfNullOrUndefined(passwordExpiryPolicyRequest, 'passwordExpiryPolicyRequest', 'policiesPasswordExpiryUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PasswordExpiryPolicy>({
            url: '/policies/password_expiry/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'PUT',
            headers,
            body: passwordExpiryPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    policiesPasswordExpiryUsedByList({ policyUuid }: PoliciesPasswordExpiryUsedByListRequest): Observable<Array<UsedBy>>
    policiesPasswordExpiryUsedByList({ policyUuid }: PoliciesPasswordExpiryUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    policiesPasswordExpiryUsedByList({ policyUuid }: PoliciesPasswordExpiryUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesPasswordExpiryUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/policies/password_expiry/{policy_uuid}/used_by/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Password Policy Viewset
     */
    policiesPasswordList({ amountDigits, amountLowercase, amountSymbols, amountUppercase, checkHaveIBeenPwned, checkStaticRules, checkZxcvbn, created, errorMessage, executionLogging, hibpAllowedCount, lastUpdated, lengthMin, name, ordering, page, pageSize, passwordField, policyUuid, search, symbolCharset, zxcvbnScoreThreshold }: PoliciesPasswordListRequest): Observable<PaginatedPasswordPolicyList>
    policiesPasswordList({ amountDigits, amountLowercase, amountSymbols, amountUppercase, checkHaveIBeenPwned, checkStaticRules, checkZxcvbn, created, errorMessage, executionLogging, hibpAllowedCount, lastUpdated, lengthMin, name, ordering, page, pageSize, passwordField, policyUuid, search, symbolCharset, zxcvbnScoreThreshold }: PoliciesPasswordListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedPasswordPolicyList>>
    policiesPasswordList({ amountDigits, amountLowercase, amountSymbols, amountUppercase, checkHaveIBeenPwned, checkStaticRules, checkZxcvbn, created, errorMessage, executionLogging, hibpAllowedCount, lastUpdated, lengthMin, name, ordering, page, pageSize, passwordField, policyUuid, search, symbolCharset, zxcvbnScoreThreshold }: PoliciesPasswordListRequest, opts?: OperationOpts): Observable<PaginatedPasswordPolicyList | AjaxResponse<PaginatedPasswordPolicyList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (amountDigits != null) { query['amount_digits'] = amountDigits; }
        if (amountLowercase != null) { query['amount_lowercase'] = amountLowercase; }
        if (amountSymbols != null) { query['amount_symbols'] = amountSymbols; }
        if (amountUppercase != null) { query['amount_uppercase'] = amountUppercase; }
        if (checkHaveIBeenPwned != null) { query['check_have_i_been_pwned'] = checkHaveIBeenPwned; }
        if (checkStaticRules != null) { query['check_static_rules'] = checkStaticRules; }
        if (checkZxcvbn != null) { query['check_zxcvbn'] = checkZxcvbn; }
        if (created != null) { query['created'] = (created as any).toISOString(); }
        if (errorMessage != null) { query['error_message'] = errorMessage; }
        if (executionLogging != null) { query['execution_logging'] = executionLogging; }
        if (hibpAllowedCount != null) { query['hibp_allowed_count'] = hibpAllowedCount; }
        if (lastUpdated != null) { query['last_updated'] = (lastUpdated as any).toISOString(); }
        if (lengthMin != null) { query['length_min'] = lengthMin; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (passwordField != null) { query['password_field'] = passwordField; }
        if (policyUuid != null) { query['policy_uuid'] = policyUuid; }
        if (search != null) { query['search'] = search; }
        if (symbolCharset != null) { query['symbol_charset'] = symbolCharset; }
        if (zxcvbnScoreThreshold != null) { query['zxcvbn_score_threshold'] = zxcvbnScoreThreshold; }

        return this.request<PaginatedPasswordPolicyList>({
            url: '/policies/password/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Password Policy Viewset
     */
    policiesPasswordPartialUpdate({ policyUuid, patchedPasswordPolicyRequest }: PoliciesPasswordPartialUpdateRequest): Observable<PasswordPolicy>
    policiesPasswordPartialUpdate({ policyUuid, patchedPasswordPolicyRequest }: PoliciesPasswordPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<PasswordPolicy>>
    policiesPasswordPartialUpdate({ policyUuid, patchedPasswordPolicyRequest }: PoliciesPasswordPartialUpdateRequest, opts?: OperationOpts): Observable<PasswordPolicy | AjaxResponse<PasswordPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesPasswordPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PasswordPolicy>({
            url: '/policies/password/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'PATCH',
            headers,
            body: patchedPasswordPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Password Policy Viewset
     */
    policiesPasswordRetrieve({ policyUuid }: PoliciesPasswordRetrieveRequest): Observable<PasswordPolicy>
    policiesPasswordRetrieve({ policyUuid }: PoliciesPasswordRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<PasswordPolicy>>
    policiesPasswordRetrieve({ policyUuid }: PoliciesPasswordRetrieveRequest, opts?: OperationOpts): Observable<PasswordPolicy | AjaxResponse<PasswordPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesPasswordRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PasswordPolicy>({
            url: '/policies/password/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Password Policy Viewset
     */
    policiesPasswordUpdate({ policyUuid, passwordPolicyRequest }: PoliciesPasswordUpdateRequest): Observable<PasswordPolicy>
    policiesPasswordUpdate({ policyUuid, passwordPolicyRequest }: PoliciesPasswordUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<PasswordPolicy>>
    policiesPasswordUpdate({ policyUuid, passwordPolicyRequest }: PoliciesPasswordUpdateRequest, opts?: OperationOpts): Observable<PasswordPolicy | AjaxResponse<PasswordPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesPasswordUpdate');
        throwIfNullOrUndefined(passwordPolicyRequest, 'passwordPolicyRequest', 'policiesPasswordUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PasswordPolicy>({
            url: '/policies/password/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'PUT',
            headers,
            body: passwordPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    policiesPasswordUsedByList({ policyUuid }: PoliciesPasswordUsedByListRequest): Observable<Array<UsedBy>>
    policiesPasswordUsedByList({ policyUuid }: PoliciesPasswordUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    policiesPasswordUsedByList({ policyUuid }: PoliciesPasswordUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesPasswordUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/policies/password/{policy_uuid}/used_by/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Reputation Policy Viewset
     */
    policiesReputationCreate({ reputationPolicyRequest }: PoliciesReputationCreateRequest): Observable<ReputationPolicy>
    policiesReputationCreate({ reputationPolicyRequest }: PoliciesReputationCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<ReputationPolicy>>
    policiesReputationCreate({ reputationPolicyRequest }: PoliciesReputationCreateRequest, opts?: OperationOpts): Observable<ReputationPolicy | AjaxResponse<ReputationPolicy>> {
        throwIfNullOrUndefined(reputationPolicyRequest, 'reputationPolicyRequest', 'policiesReputationCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ReputationPolicy>({
            url: '/policies/reputation/',
            method: 'POST',
            headers,
            body: reputationPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Reputation Policy Viewset
     */
    policiesReputationDestroy({ policyUuid }: PoliciesReputationDestroyRequest): Observable<void>
    policiesReputationDestroy({ policyUuid }: PoliciesReputationDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    policiesReputationDestroy({ policyUuid }: PoliciesReputationDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesReputationDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/policies/reputation/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Reputation Policy Viewset
     */
    policiesReputationList({ checkIp, checkUsername, created, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, search, threshold }: PoliciesReputationListRequest): Observable<PaginatedReputationPolicyList>
    policiesReputationList({ checkIp, checkUsername, created, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, search, threshold }: PoliciesReputationListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedReputationPolicyList>>
    policiesReputationList({ checkIp, checkUsername, created, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, search, threshold }: PoliciesReputationListRequest, opts?: OperationOpts): Observable<PaginatedReputationPolicyList | AjaxResponse<PaginatedReputationPolicyList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (checkIp != null) { query['check_ip'] = checkIp; }
        if (checkUsername != null) { query['check_username'] = checkUsername; }
        if (created != null) { query['created'] = (created as any).toISOString(); }
        if (executionLogging != null) { query['execution_logging'] = executionLogging; }
        if (lastUpdated != null) { query['last_updated'] = (lastUpdated as any).toISOString(); }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (policyUuid != null) { query['policy_uuid'] = policyUuid; }
        if (search != null) { query['search'] = search; }
        if (threshold != null) { query['threshold'] = threshold; }

        return this.request<PaginatedReputationPolicyList>({
            url: '/policies/reputation/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Reputation Policy Viewset
     */
    policiesReputationPartialUpdate({ policyUuid, patchedReputationPolicyRequest }: PoliciesReputationPartialUpdateRequest): Observable<ReputationPolicy>
    policiesReputationPartialUpdate({ policyUuid, patchedReputationPolicyRequest }: PoliciesReputationPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<ReputationPolicy>>
    policiesReputationPartialUpdate({ policyUuid, patchedReputationPolicyRequest }: PoliciesReputationPartialUpdateRequest, opts?: OperationOpts): Observable<ReputationPolicy | AjaxResponse<ReputationPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesReputationPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ReputationPolicy>({
            url: '/policies/reputation/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'PATCH',
            headers,
            body: patchedReputationPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Reputation Policy Viewset
     */
    policiesReputationRetrieve({ policyUuid }: PoliciesReputationRetrieveRequest): Observable<ReputationPolicy>
    policiesReputationRetrieve({ policyUuid }: PoliciesReputationRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<ReputationPolicy>>
    policiesReputationRetrieve({ policyUuid }: PoliciesReputationRetrieveRequest, opts?: OperationOpts): Observable<ReputationPolicy | AjaxResponse<ReputationPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesReputationRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ReputationPolicy>({
            url: '/policies/reputation/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Reputation Viewset
     */
    policiesReputationScoresDestroy({ reputationUuid }: PoliciesReputationScoresDestroyRequest): Observable<void>
    policiesReputationScoresDestroy({ reputationUuid }: PoliciesReputationScoresDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    policiesReputationScoresDestroy({ reputationUuid }: PoliciesReputationScoresDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(reputationUuid, 'reputationUuid', 'policiesReputationScoresDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/policies/reputation/scores/{reputation_uuid}/'.replace('{reputation_uuid}', encodeURI(reputationUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Reputation Viewset
     */
    policiesReputationScoresList({ identifier, ip, ordering, page, pageSize, score, search }: PoliciesReputationScoresListRequest): Observable<PaginatedReputationList>
    policiesReputationScoresList({ identifier, ip, ordering, page, pageSize, score, search }: PoliciesReputationScoresListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedReputationList>>
    policiesReputationScoresList({ identifier, ip, ordering, page, pageSize, score, search }: PoliciesReputationScoresListRequest, opts?: OperationOpts): Observable<PaginatedReputationList | AjaxResponse<PaginatedReputationList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (identifier != null) { query['identifier'] = identifier; }
        if (ip != null) { query['ip'] = ip; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (score != null) { query['score'] = score; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedReputationList>({
            url: '/policies/reputation/scores/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Reputation Viewset
     */
    policiesReputationScoresRetrieve({ reputationUuid }: PoliciesReputationScoresRetrieveRequest): Observable<Reputation>
    policiesReputationScoresRetrieve({ reputationUuid }: PoliciesReputationScoresRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<Reputation>>
    policiesReputationScoresRetrieve({ reputationUuid }: PoliciesReputationScoresRetrieveRequest, opts?: OperationOpts): Observable<Reputation | AjaxResponse<Reputation>> {
        throwIfNullOrUndefined(reputationUuid, 'reputationUuid', 'policiesReputationScoresRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Reputation>({
            url: '/policies/reputation/scores/{reputation_uuid}/'.replace('{reputation_uuid}', encodeURI(reputationUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    policiesReputationScoresUsedByList({ reputationUuid }: PoliciesReputationScoresUsedByListRequest): Observable<Array<UsedBy>>
    policiesReputationScoresUsedByList({ reputationUuid }: PoliciesReputationScoresUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    policiesReputationScoresUsedByList({ reputationUuid }: PoliciesReputationScoresUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(reputationUuid, 'reputationUuid', 'policiesReputationScoresUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/policies/reputation/scores/{reputation_uuid}/used_by/'.replace('{reputation_uuid}', encodeURI(reputationUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Reputation Policy Viewset
     */
    policiesReputationUpdate({ policyUuid, reputationPolicyRequest }: PoliciesReputationUpdateRequest): Observable<ReputationPolicy>
    policiesReputationUpdate({ policyUuid, reputationPolicyRequest }: PoliciesReputationUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<ReputationPolicy>>
    policiesReputationUpdate({ policyUuid, reputationPolicyRequest }: PoliciesReputationUpdateRequest, opts?: OperationOpts): Observable<ReputationPolicy | AjaxResponse<ReputationPolicy>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesReputationUpdate');
        throwIfNullOrUndefined(reputationPolicyRequest, 'reputationPolicyRequest', 'policiesReputationUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ReputationPolicy>({
            url: '/policies/reputation/{policy_uuid}/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'PUT',
            headers,
            body: reputationPolicyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    policiesReputationUsedByList({ policyUuid }: PoliciesReputationUsedByListRequest): Observable<Array<UsedBy>>
    policiesReputationUsedByList({ policyUuid }: PoliciesReputationUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    policiesReputationUsedByList({ policyUuid }: PoliciesReputationUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(policyUuid, 'policyUuid', 'policiesReputationUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/policies/reputation/{policy_uuid}/used_by/'.replace('{policy_uuid}', encodeURI(policyUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum PoliciesEventMatcherListActionEnum {
    AuthorizeApplication = 'authorize_application',
    ConfigurationError = 'configuration_error',
    Custom = 'custom_',
    EmailSent = 'email_sent',
    FlowExecution = 'flow_execution',
    ImpersonationEnded = 'impersonation_ended',
    ImpersonationStarted = 'impersonation_started',
    InvitationUsed = 'invitation_used',
    Login = 'login',
    LoginFailed = 'login_failed',
    Logout = 'logout',
    ModelCreated = 'model_created',
    ModelDeleted = 'model_deleted',
    ModelUpdated = 'model_updated',
    PasswordSet = 'password_set',
    PolicyException = 'policy_exception',
    PolicyExecution = 'policy_execution',
    PropertyMappingException = 'property_mapping_exception',
    SecretRotate = 'secret_rotate',
    SecretView = 'secret_view',
    SourceLinked = 'source_linked',
    SuspiciousRequest = 'suspicious_request',
    SystemException = 'system_exception',
    SystemTaskException = 'system_task_exception',
    SystemTaskExecution = 'system_task_execution',
    UpdateAvailable = 'update_available',
    UserWrite = 'user_write'
}
