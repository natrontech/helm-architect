// tslint:disable
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2023.10.2
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    Cache,
    ChallengeTypes,
    FilePathRequest,
    Flow,
    FlowChallengeResponseRequest,
    FlowDiagram,
    FlowImportResult,
    FlowInspection,
    FlowRequest,
    FlowStageBinding,
    FlowStageBindingRequest,
    GenericError,
    Link,
    PaginatedFlowList,
    PaginatedFlowStageBindingList,
    PatchedFlowRequest,
    PatchedFlowStageBindingRequest,
    UsedBy,
    ValidationError,
} from '../models';

export interface FlowsBindingsCreateRequest {
    flowStageBindingRequest: FlowStageBindingRequest;
}

export interface FlowsBindingsDestroyRequest {
    fsbUuid: string;
}

export interface FlowsBindingsListRequest {
    evaluateOnPlan?: boolean;
    fsbUuid?: string;
    invalidResponseAction?: FlowsBindingsListInvalidResponseActionEnum;
    order?: number;
    ordering?: string;
    page?: number;
    pageSize?: number;
    pbmUuid?: string;
    policies?: Array<string>;
    policyEngineMode?: FlowsBindingsListPolicyEngineModeEnum;
    reEvaluatePolicies?: boolean;
    search?: string;
    stage?: string;
    target?: string;
}

export interface FlowsBindingsPartialUpdateRequest {
    fsbUuid: string;
    patchedFlowStageBindingRequest?: PatchedFlowStageBindingRequest;
}

export interface FlowsBindingsRetrieveRequest {
    fsbUuid: string;
}

export interface FlowsBindingsUpdateRequest {
    fsbUuid: string;
    flowStageBindingRequest: FlowStageBindingRequest;
}

export interface FlowsBindingsUsedByListRequest {
    fsbUuid: string;
}

export interface FlowsExecutorGetRequest {
    flowSlug: string;
    query: string;
}

export interface FlowsExecutorSolveRequest {
    flowSlug: string;
    query: string;
    flowChallengeResponseRequest?: FlowChallengeResponseRequest;
}

export interface FlowsInspectorGetRequest {
    flowSlug: string;
}

export interface FlowsInstancesCreateRequest {
    flowRequest: FlowRequest;
}

export interface FlowsInstancesDestroyRequest {
    slug: string;
}

export interface FlowsInstancesDiagramRetrieveRequest {
    slug: string;
}

export interface FlowsInstancesExecuteRetrieveRequest {
    slug: string;
}

export interface FlowsInstancesExportRetrieveRequest {
    slug: string;
}

export interface FlowsInstancesImportCreateRequest {
    file?: Blob;
    clear?: boolean;
}

export interface FlowsInstancesListRequest {
    deniedAction?: FlowsInstancesListDeniedActionEnum;
    designation?: FlowsInstancesListDesignationEnum;
    flowUuid?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    slug?: string;
}

export interface FlowsInstancesPartialUpdateRequest {
    slug: string;
    patchedFlowRequest?: PatchedFlowRequest;
}

export interface FlowsInstancesRetrieveRequest {
    slug: string;
}

export interface FlowsInstancesSetBackgroundCreateRequest {
    slug: string;
    file?: Blob;
    clear?: boolean;
}

export interface FlowsInstancesSetBackgroundUrlCreateRequest {
    slug: string;
    filePathRequest: FilePathRequest;
}

export interface FlowsInstancesUpdateRequest {
    slug: string;
    flowRequest: FlowRequest;
}

export interface FlowsInstancesUsedByListRequest {
    slug: string;
}

/**
 * no description
 */
export class FlowsApi extends BaseAPI {

    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsCreate({ flowStageBindingRequest }: FlowsBindingsCreateRequest): Observable<FlowStageBinding>
    flowsBindingsCreate({ flowStageBindingRequest }: FlowsBindingsCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<FlowStageBinding>>
    flowsBindingsCreate({ flowStageBindingRequest }: FlowsBindingsCreateRequest, opts?: OperationOpts): Observable<FlowStageBinding | AjaxResponse<FlowStageBinding>> {
        throwIfNullOrUndefined(flowStageBindingRequest, 'flowStageBindingRequest', 'flowsBindingsCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<FlowStageBinding>({
            url: '/flows/bindings/',
            method: 'POST',
            headers,
            body: flowStageBindingRequest,
        }, opts?.responseOpts);
    };

    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsDestroy({ fsbUuid }: FlowsBindingsDestroyRequest): Observable<void>
    flowsBindingsDestroy({ fsbUuid }: FlowsBindingsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    flowsBindingsDestroy({ fsbUuid }: FlowsBindingsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(fsbUuid, 'fsbUuid', 'flowsBindingsDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/flows/bindings/{fsb_uuid}/'.replace('{fsb_uuid}', encodeURI(fsbUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsList({ evaluateOnPlan, fsbUuid, invalidResponseAction, order, ordering, page, pageSize, pbmUuid, policies, policyEngineMode, reEvaluatePolicies, search, stage, target }: FlowsBindingsListRequest): Observable<PaginatedFlowStageBindingList>
    flowsBindingsList({ evaluateOnPlan, fsbUuid, invalidResponseAction, order, ordering, page, pageSize, pbmUuid, policies, policyEngineMode, reEvaluatePolicies, search, stage, target }: FlowsBindingsListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedFlowStageBindingList>>
    flowsBindingsList({ evaluateOnPlan, fsbUuid, invalidResponseAction, order, ordering, page, pageSize, pbmUuid, policies, policyEngineMode, reEvaluatePolicies, search, stage, target }: FlowsBindingsListRequest, opts?: OperationOpts): Observable<PaginatedFlowStageBindingList | AjaxResponse<PaginatedFlowStageBindingList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (evaluateOnPlan != null) { query['evaluate_on_plan'] = evaluateOnPlan; }
        if (fsbUuid != null) { query['fsb_uuid'] = fsbUuid; }
        if (invalidResponseAction != null) { query['invalid_response_action'] = invalidResponseAction; }
        if (order != null) { query['order'] = order; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (pbmUuid != null) { query['pbm_uuid'] = pbmUuid; }
        if (policies != null) { query['policies'] = policies; }
        if (policyEngineMode != null) { query['policy_engine_mode'] = policyEngineMode; }
        if (reEvaluatePolicies != null) { query['re_evaluate_policies'] = reEvaluatePolicies; }
        if (search != null) { query['search'] = search; }
        if (stage != null) { query['stage'] = stage; }
        if (target != null) { query['target'] = target; }

        return this.request<PaginatedFlowStageBindingList>({
            url: '/flows/bindings/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsPartialUpdate({ fsbUuid, patchedFlowStageBindingRequest }: FlowsBindingsPartialUpdateRequest): Observable<FlowStageBinding>
    flowsBindingsPartialUpdate({ fsbUuid, patchedFlowStageBindingRequest }: FlowsBindingsPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<FlowStageBinding>>
    flowsBindingsPartialUpdate({ fsbUuid, patchedFlowStageBindingRequest }: FlowsBindingsPartialUpdateRequest, opts?: OperationOpts): Observable<FlowStageBinding | AjaxResponse<FlowStageBinding>> {
        throwIfNullOrUndefined(fsbUuid, 'fsbUuid', 'flowsBindingsPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<FlowStageBinding>({
            url: '/flows/bindings/{fsb_uuid}/'.replace('{fsb_uuid}', encodeURI(fsbUuid)),
            method: 'PATCH',
            headers,
            body: patchedFlowStageBindingRequest,
        }, opts?.responseOpts);
    };

    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsRetrieve({ fsbUuid }: FlowsBindingsRetrieveRequest): Observable<FlowStageBinding>
    flowsBindingsRetrieve({ fsbUuid }: FlowsBindingsRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<FlowStageBinding>>
    flowsBindingsRetrieve({ fsbUuid }: FlowsBindingsRetrieveRequest, opts?: OperationOpts): Observable<FlowStageBinding | AjaxResponse<FlowStageBinding>> {
        throwIfNullOrUndefined(fsbUuid, 'fsbUuid', 'flowsBindingsRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<FlowStageBinding>({
            url: '/flows/bindings/{fsb_uuid}/'.replace('{fsb_uuid}', encodeURI(fsbUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsUpdate({ fsbUuid, flowStageBindingRequest }: FlowsBindingsUpdateRequest): Observable<FlowStageBinding>
    flowsBindingsUpdate({ fsbUuid, flowStageBindingRequest }: FlowsBindingsUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<FlowStageBinding>>
    flowsBindingsUpdate({ fsbUuid, flowStageBindingRequest }: FlowsBindingsUpdateRequest, opts?: OperationOpts): Observable<FlowStageBinding | AjaxResponse<FlowStageBinding>> {
        throwIfNullOrUndefined(fsbUuid, 'fsbUuid', 'flowsBindingsUpdate');
        throwIfNullOrUndefined(flowStageBindingRequest, 'flowStageBindingRequest', 'flowsBindingsUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<FlowStageBinding>({
            url: '/flows/bindings/{fsb_uuid}/'.replace('{fsb_uuid}', encodeURI(fsbUuid)),
            method: 'PUT',
            headers,
            body: flowStageBindingRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    flowsBindingsUsedByList({ fsbUuid }: FlowsBindingsUsedByListRequest): Observable<Array<UsedBy>>
    flowsBindingsUsedByList({ fsbUuid }: FlowsBindingsUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    flowsBindingsUsedByList({ fsbUuid }: FlowsBindingsUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(fsbUuid, 'fsbUuid', 'flowsBindingsUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/flows/bindings/{fsb_uuid}/used_by/'.replace('{fsb_uuid}', encodeURI(fsbUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get the next pending challenge from the currently active flow.
     */
    flowsExecutorGet({ flowSlug, query: queryAlias }: FlowsExecutorGetRequest): Observable<ChallengeTypes>
    flowsExecutorGet({ flowSlug, query: queryAlias }: FlowsExecutorGetRequest, opts?: OperationOpts): Observable<AjaxResponse<ChallengeTypes>>
    flowsExecutorGet({ flowSlug, query: queryAlias }: FlowsExecutorGetRequest, opts?: OperationOpts): Observable<ChallengeTypes | AjaxResponse<ChallengeTypes>> {
        throwIfNullOrUndefined(flowSlug, 'flowSlug', 'flowsExecutorGet');
        throwIfNullOrUndefined(queryAlias, 'queryAlias', 'flowsExecutorGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'query': queryAlias,
        };

        return this.request<ChallengeTypes>({
            url: '/flows/executor/{flow_slug}/'.replace('{flow_slug}', encodeURI(flowSlug)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Solve the previously retrieved challenge and advanced to the next stage.
     */
    flowsExecutorSolve({ flowSlug, query: queryAlias, flowChallengeResponseRequest }: FlowsExecutorSolveRequest): Observable<ChallengeTypes>
    flowsExecutorSolve({ flowSlug, query: queryAlias, flowChallengeResponseRequest }: FlowsExecutorSolveRequest, opts?: OperationOpts): Observable<AjaxResponse<ChallengeTypes>>
    flowsExecutorSolve({ flowSlug, query: queryAlias, flowChallengeResponseRequest }: FlowsExecutorSolveRequest, opts?: OperationOpts): Observable<ChallengeTypes | AjaxResponse<ChallengeTypes>> {
        throwIfNullOrUndefined(flowSlug, 'flowSlug', 'flowsExecutorSolve');
        throwIfNullOrUndefined(queryAlias, 'queryAlias', 'flowsExecutorSolve');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'query': queryAlias,
        };

        return this.request<ChallengeTypes>({
            url: '/flows/executor/{flow_slug}/'.replace('{flow_slug}', encodeURI(flowSlug)),
            method: 'POST',
            headers,
            query,
            body: flowChallengeResponseRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get current flow state and record it
     */
    flowsInspectorGet({ flowSlug }: FlowsInspectorGetRequest): Observable<FlowInspection>
    flowsInspectorGet({ flowSlug }: FlowsInspectorGetRequest, opts?: OperationOpts): Observable<AjaxResponse<FlowInspection>>
    flowsInspectorGet({ flowSlug }: FlowsInspectorGetRequest, opts?: OperationOpts): Observable<FlowInspection | AjaxResponse<FlowInspection>> {
        throwIfNullOrUndefined(flowSlug, 'flowSlug', 'flowsInspectorGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<FlowInspection>({
            url: '/flows/inspector/{flow_slug}/'.replace('{flow_slug}', encodeURI(flowSlug)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Clear flow cache
     */
    flowsInstancesCacheClearCreate(): Observable<void>
    flowsInstancesCacheClearCreate(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    flowsInstancesCacheClearCreate(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/flows/instances/cache_clear/',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Info about cached flows
     */
    flowsInstancesCacheInfoRetrieve(): Observable<Cache>
    flowsInstancesCacheInfoRetrieve(opts?: OperationOpts): Observable<AjaxResponse<Cache>>
    flowsInstancesCacheInfoRetrieve(opts?: OperationOpts): Observable<Cache | AjaxResponse<Cache>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Cache>({
            url: '/flows/instances/cache_info/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Flow Viewset
     */
    flowsInstancesCreate({ flowRequest }: FlowsInstancesCreateRequest): Observable<Flow>
    flowsInstancesCreate({ flowRequest }: FlowsInstancesCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<Flow>>
    flowsInstancesCreate({ flowRequest }: FlowsInstancesCreateRequest, opts?: OperationOpts): Observable<Flow | AjaxResponse<Flow>> {
        throwIfNullOrUndefined(flowRequest, 'flowRequest', 'flowsInstancesCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Flow>({
            url: '/flows/instances/',
            method: 'POST',
            headers,
            body: flowRequest,
        }, opts?.responseOpts);
    };

    /**
     * Flow Viewset
     */
    flowsInstancesDestroy({ slug }: FlowsInstancesDestroyRequest): Observable<void>
    flowsInstancesDestroy({ slug }: FlowsInstancesDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    flowsInstancesDestroy({ slug }: FlowsInstancesDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(slug, 'slug', 'flowsInstancesDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/flows/instances/{slug}/'.replace('{slug}', encodeURI(slug)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return diagram for flow with slug `slug`, in the format used by flowchart.js
     */
    flowsInstancesDiagramRetrieve({ slug }: FlowsInstancesDiagramRetrieveRequest): Observable<FlowDiagram>
    flowsInstancesDiagramRetrieve({ slug }: FlowsInstancesDiagramRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<FlowDiagram>>
    flowsInstancesDiagramRetrieve({ slug }: FlowsInstancesDiagramRetrieveRequest, opts?: OperationOpts): Observable<FlowDiagram | AjaxResponse<FlowDiagram>> {
        throwIfNullOrUndefined(slug, 'slug', 'flowsInstancesDiagramRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<FlowDiagram>({
            url: '/flows/instances/{slug}/diagram/'.replace('{slug}', encodeURI(slug)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Execute flow for current user
     */
    flowsInstancesExecuteRetrieve({ slug }: FlowsInstancesExecuteRetrieveRequest): Observable<Link>
    flowsInstancesExecuteRetrieve({ slug }: FlowsInstancesExecuteRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<Link>>
    flowsInstancesExecuteRetrieve({ slug }: FlowsInstancesExecuteRetrieveRequest, opts?: OperationOpts): Observable<Link | AjaxResponse<Link>> {
        throwIfNullOrUndefined(slug, 'slug', 'flowsInstancesExecuteRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Link>({
            url: '/flows/instances/{slug}/execute/'.replace('{slug}', encodeURI(slug)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Export flow to .yaml file
     */
    flowsInstancesExportRetrieve({ slug }: FlowsInstancesExportRetrieveRequest): Observable<Blob>
    flowsInstancesExportRetrieve({ slug }: FlowsInstancesExportRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<Blob>>
    flowsInstancesExportRetrieve({ slug }: FlowsInstancesExportRetrieveRequest, opts?: OperationOpts): Observable<Blob | AjaxResponse<Blob>> {
        throwIfNullOrUndefined(slug, 'slug', 'flowsInstancesExportRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Blob>({
            url: '/flows/instances/{slug}/export/'.replace('{slug}', encodeURI(slug)),
            method: 'GET',
            headers,
            responseType: 'blob',
        }, opts?.responseOpts);
    };

    /**
     * Import flow from .yaml file
     */
    flowsInstancesImportCreate({ file, clear }: FlowsInstancesImportCreateRequest): Observable<FlowImportResult>
    flowsInstancesImportCreate({ file, clear }: FlowsInstancesImportCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<FlowImportResult>>
    flowsInstancesImportCreate({ file, clear }: FlowsInstancesImportCreateRequest, opts?: OperationOpts): Observable<FlowImportResult | AjaxResponse<FlowImportResult>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const formData = new FormData();
        if (file !== undefined) { formData.append('file', file as any); }
        if (clear !== undefined) { formData.append('clear', clear as any); }

        return this.request<FlowImportResult>({
            url: '/flows/instances/import/',
            method: 'POST',
            headers,
            body: formData,
        }, opts?.responseOpts);
    };

    /**
     * Flow Viewset
     */
    flowsInstancesList({ deniedAction, designation, flowUuid, name, ordering, page, pageSize, search, slug }: FlowsInstancesListRequest): Observable<PaginatedFlowList>
    flowsInstancesList({ deniedAction, designation, flowUuid, name, ordering, page, pageSize, search, slug }: FlowsInstancesListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedFlowList>>
    flowsInstancesList({ deniedAction, designation, flowUuid, name, ordering, page, pageSize, search, slug }: FlowsInstancesListRequest, opts?: OperationOpts): Observable<PaginatedFlowList | AjaxResponse<PaginatedFlowList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (deniedAction != null) { query['denied_action'] = deniedAction; }
        if (designation != null) { query['designation'] = designation; }
        if (flowUuid != null) { query['flow_uuid'] = flowUuid; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (slug != null) { query['slug'] = slug; }

        return this.request<PaginatedFlowList>({
            url: '/flows/instances/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Flow Viewset
     */
    flowsInstancesPartialUpdate({ slug, patchedFlowRequest }: FlowsInstancesPartialUpdateRequest): Observable<Flow>
    flowsInstancesPartialUpdate({ slug, patchedFlowRequest }: FlowsInstancesPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Flow>>
    flowsInstancesPartialUpdate({ slug, patchedFlowRequest }: FlowsInstancesPartialUpdateRequest, opts?: OperationOpts): Observable<Flow | AjaxResponse<Flow>> {
        throwIfNullOrUndefined(slug, 'slug', 'flowsInstancesPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Flow>({
            url: '/flows/instances/{slug}/'.replace('{slug}', encodeURI(slug)),
            method: 'PATCH',
            headers,
            body: patchedFlowRequest,
        }, opts?.responseOpts);
    };

    /**
     * Flow Viewset
     */
    flowsInstancesRetrieve({ slug }: FlowsInstancesRetrieveRequest): Observable<Flow>
    flowsInstancesRetrieve({ slug }: FlowsInstancesRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<Flow>>
    flowsInstancesRetrieve({ slug }: FlowsInstancesRetrieveRequest, opts?: OperationOpts): Observable<Flow | AjaxResponse<Flow>> {
        throwIfNullOrUndefined(slug, 'slug', 'flowsInstancesRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Flow>({
            url: '/flows/instances/{slug}/'.replace('{slug}', encodeURI(slug)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Set Flow background
     */
    flowsInstancesSetBackgroundCreate({ slug, file, clear }: FlowsInstancesSetBackgroundCreateRequest): Observable<void>
    flowsInstancesSetBackgroundCreate({ slug, file, clear }: FlowsInstancesSetBackgroundCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    flowsInstancesSetBackgroundCreate({ slug, file, clear }: FlowsInstancesSetBackgroundCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(slug, 'slug', 'flowsInstancesSetBackgroundCreate');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const formData = new FormData();
        if (file !== undefined) { formData.append('file', file as any); }
        if (clear !== undefined) { formData.append('clear', clear as any); }

        return this.request<void>({
            url: '/flows/instances/{slug}/set_background/'.replace('{slug}', encodeURI(slug)),
            method: 'POST',
            headers,
            body: formData,
        }, opts?.responseOpts);
    };

    /**
     * Set Flow background (as URL)
     */
    flowsInstancesSetBackgroundUrlCreate({ slug, filePathRequest }: FlowsInstancesSetBackgroundUrlCreateRequest): Observable<void>
    flowsInstancesSetBackgroundUrlCreate({ slug, filePathRequest }: FlowsInstancesSetBackgroundUrlCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    flowsInstancesSetBackgroundUrlCreate({ slug, filePathRequest }: FlowsInstancesSetBackgroundUrlCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(slug, 'slug', 'flowsInstancesSetBackgroundUrlCreate');
        throwIfNullOrUndefined(filePathRequest, 'filePathRequest', 'flowsInstancesSetBackgroundUrlCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/flows/instances/{slug}/set_background_url/'.replace('{slug}', encodeURI(slug)),
            method: 'POST',
            headers,
            body: filePathRequest,
        }, opts?.responseOpts);
    };

    /**
     * Flow Viewset
     */
    flowsInstancesUpdate({ slug, flowRequest }: FlowsInstancesUpdateRequest): Observable<Flow>
    flowsInstancesUpdate({ slug, flowRequest }: FlowsInstancesUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Flow>>
    flowsInstancesUpdate({ slug, flowRequest }: FlowsInstancesUpdateRequest, opts?: OperationOpts): Observable<Flow | AjaxResponse<Flow>> {
        throwIfNullOrUndefined(slug, 'slug', 'flowsInstancesUpdate');
        throwIfNullOrUndefined(flowRequest, 'flowRequest', 'flowsInstancesUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Flow>({
            url: '/flows/instances/{slug}/'.replace('{slug}', encodeURI(slug)),
            method: 'PUT',
            headers,
            body: flowRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    flowsInstancesUsedByList({ slug }: FlowsInstancesUsedByListRequest): Observable<Array<UsedBy>>
    flowsInstancesUsedByList({ slug }: FlowsInstancesUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    flowsInstancesUsedByList({ slug }: FlowsInstancesUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(slug, 'slug', 'flowsInstancesUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/flows/instances/{slug}/used_by/'.replace('{slug}', encodeURI(slug)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum FlowsBindingsListInvalidResponseActionEnum {
    Restart = 'restart',
    RestartWithContext = 'restart_with_context',
    Retry = 'retry'
}
/**
 * @export
 * @enum {string}
 */
export enum FlowsBindingsListPolicyEngineModeEnum {
    All = 'all',
    Any = 'any'
}
/**
 * @export
 * @enum {string}
 */
export enum FlowsInstancesListDeniedActionEnum {
    Continue = 'continue',
    Message = 'message',
    MessageContinue = 'message_continue'
}
/**
 * @export
 * @enum {string}
 */
export enum FlowsInstancesListDesignationEnum {
    Authentication = 'authentication',
    Authorization = 'authorization',
    Enrollment = 'enrollment',
    Invalidation = 'invalidation',
    Recovery = 'recovery',
    StageConfiguration = 'stage_configuration',
    Unenrollment = 'unenrollment'
}
