// tslint:disable
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2023.10.2
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    Device,
    DuoDevice,
    DuoDeviceRequest,
    GenericError,
    PaginatedDuoDeviceList,
    PaginatedSMSDeviceList,
    PaginatedStaticDeviceList,
    PaginatedTOTPDeviceList,
    PaginatedWebAuthnDeviceList,
    PatchedDuoDeviceRequest,
    PatchedSMSDeviceRequest,
    PatchedStaticDeviceRequest,
    PatchedTOTPDeviceRequest,
    PatchedWebAuthnDeviceRequest,
    SMSDevice,
    SMSDeviceRequest,
    StaticDevice,
    StaticDeviceRequest,
    TOTPDevice,
    TOTPDeviceRequest,
    UsedBy,
    ValidationError,
    WebAuthnDevice,
    WebAuthnDeviceRequest,
} from '../models';

export interface AuthenticatorsAdminAllListRequest {
    user?: number;
}

export interface AuthenticatorsAdminDuoCreateRequest {
    duoDeviceRequest: DuoDeviceRequest;
}

export interface AuthenticatorsAdminDuoDestroyRequest {
    id: number;
}

export interface AuthenticatorsAdminDuoListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface AuthenticatorsAdminDuoPartialUpdateRequest {
    id: number;
    patchedDuoDeviceRequest?: PatchedDuoDeviceRequest;
}

export interface AuthenticatorsAdminDuoRetrieveRequest {
    id: number;
}

export interface AuthenticatorsAdminDuoUpdateRequest {
    id: number;
    duoDeviceRequest: DuoDeviceRequest;
}

export interface AuthenticatorsAdminSmsCreateRequest {
    sMSDeviceRequest: SMSDeviceRequest;
}

export interface AuthenticatorsAdminSmsDestroyRequest {
    id: number;
}

export interface AuthenticatorsAdminSmsListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface AuthenticatorsAdminSmsPartialUpdateRequest {
    id: number;
    patchedSMSDeviceRequest?: PatchedSMSDeviceRequest;
}

export interface AuthenticatorsAdminSmsRetrieveRequest {
    id: number;
}

export interface AuthenticatorsAdminSmsUpdateRequest {
    id: number;
    sMSDeviceRequest: SMSDeviceRequest;
}

export interface AuthenticatorsAdminStaticCreateRequest {
    staticDeviceRequest: StaticDeviceRequest;
}

export interface AuthenticatorsAdminStaticDestroyRequest {
    id: number;
}

export interface AuthenticatorsAdminStaticListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface AuthenticatorsAdminStaticPartialUpdateRequest {
    id: number;
    patchedStaticDeviceRequest?: PatchedStaticDeviceRequest;
}

export interface AuthenticatorsAdminStaticRetrieveRequest {
    id: number;
}

export interface AuthenticatorsAdminStaticUpdateRequest {
    id: number;
    staticDeviceRequest: StaticDeviceRequest;
}

export interface AuthenticatorsAdminTotpCreateRequest {
    tOTPDeviceRequest: TOTPDeviceRequest;
}

export interface AuthenticatorsAdminTotpDestroyRequest {
    id: number;
}

export interface AuthenticatorsAdminTotpListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface AuthenticatorsAdminTotpPartialUpdateRequest {
    id: number;
    patchedTOTPDeviceRequest?: PatchedTOTPDeviceRequest;
}

export interface AuthenticatorsAdminTotpRetrieveRequest {
    id: number;
}

export interface AuthenticatorsAdminTotpUpdateRequest {
    id: number;
    tOTPDeviceRequest: TOTPDeviceRequest;
}

export interface AuthenticatorsAdminWebauthnCreateRequest {
    webAuthnDeviceRequest: WebAuthnDeviceRequest;
}

export interface AuthenticatorsAdminWebauthnDestroyRequest {
    id: number;
}

export interface AuthenticatorsAdminWebauthnListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface AuthenticatorsAdminWebauthnPartialUpdateRequest {
    id: number;
    patchedWebAuthnDeviceRequest?: PatchedWebAuthnDeviceRequest;
}

export interface AuthenticatorsAdminWebauthnRetrieveRequest {
    id: number;
}

export interface AuthenticatorsAdminWebauthnUpdateRequest {
    id: number;
    webAuthnDeviceRequest: WebAuthnDeviceRequest;
}

export interface AuthenticatorsDuoDestroyRequest {
    id: number;
}

export interface AuthenticatorsDuoListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface AuthenticatorsDuoPartialUpdateRequest {
    id: number;
    patchedDuoDeviceRequest?: PatchedDuoDeviceRequest;
}

export interface AuthenticatorsDuoRetrieveRequest {
    id: number;
}

export interface AuthenticatorsDuoUpdateRequest {
    id: number;
    duoDeviceRequest: DuoDeviceRequest;
}

export interface AuthenticatorsDuoUsedByListRequest {
    id: number;
}

export interface AuthenticatorsSmsDestroyRequest {
    id: number;
}

export interface AuthenticatorsSmsListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface AuthenticatorsSmsPartialUpdateRequest {
    id: number;
    patchedSMSDeviceRequest?: PatchedSMSDeviceRequest;
}

export interface AuthenticatorsSmsRetrieveRequest {
    id: number;
}

export interface AuthenticatorsSmsUpdateRequest {
    id: number;
    sMSDeviceRequest: SMSDeviceRequest;
}

export interface AuthenticatorsSmsUsedByListRequest {
    id: number;
}

export interface AuthenticatorsStaticDestroyRequest {
    id: number;
}

export interface AuthenticatorsStaticListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface AuthenticatorsStaticPartialUpdateRequest {
    id: number;
    patchedStaticDeviceRequest?: PatchedStaticDeviceRequest;
}

export interface AuthenticatorsStaticRetrieveRequest {
    id: number;
}

export interface AuthenticatorsStaticUpdateRequest {
    id: number;
    staticDeviceRequest: StaticDeviceRequest;
}

export interface AuthenticatorsStaticUsedByListRequest {
    id: number;
}

export interface AuthenticatorsTotpDestroyRequest {
    id: number;
}

export interface AuthenticatorsTotpListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface AuthenticatorsTotpPartialUpdateRequest {
    id: number;
    patchedTOTPDeviceRequest?: PatchedTOTPDeviceRequest;
}

export interface AuthenticatorsTotpRetrieveRequest {
    id: number;
}

export interface AuthenticatorsTotpUpdateRequest {
    id: number;
    tOTPDeviceRequest: TOTPDeviceRequest;
}

export interface AuthenticatorsTotpUsedByListRequest {
    id: number;
}

export interface AuthenticatorsWebauthnDestroyRequest {
    id: number;
}

export interface AuthenticatorsWebauthnListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface AuthenticatorsWebauthnPartialUpdateRequest {
    id: number;
    patchedWebAuthnDeviceRequest?: PatchedWebAuthnDeviceRequest;
}

export interface AuthenticatorsWebauthnRetrieveRequest {
    id: number;
}

export interface AuthenticatorsWebauthnUpdateRequest {
    id: number;
    webAuthnDeviceRequest: WebAuthnDeviceRequest;
}

export interface AuthenticatorsWebauthnUsedByListRequest {
    id: number;
}

/**
 * no description
 */
export class AuthenticatorsApi extends BaseAPI {

    /**
     * Get all devices for current user
     */
    authenticatorsAdminAllList({ user }: AuthenticatorsAdminAllListRequest): Observable<Array<Device>>
    authenticatorsAdminAllList({ user }: AuthenticatorsAdminAllListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Device>>>
    authenticatorsAdminAllList({ user }: AuthenticatorsAdminAllListRequest, opts?: OperationOpts): Observable<Array<Device> | AjaxResponse<Array<Device>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (user != null) { query['user'] = user; }

        return this.request<Array<Device>>({
            url: '/authenticators/admin/all/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for Duo authenticator devices (for admins)
     */
    authenticatorsAdminDuoCreate({ duoDeviceRequest }: AuthenticatorsAdminDuoCreateRequest): Observable<DuoDevice>
    authenticatorsAdminDuoCreate({ duoDeviceRequest }: AuthenticatorsAdminDuoCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<DuoDevice>>
    authenticatorsAdminDuoCreate({ duoDeviceRequest }: AuthenticatorsAdminDuoCreateRequest, opts?: OperationOpts): Observable<DuoDevice | AjaxResponse<DuoDevice>> {
        throwIfNullOrUndefined(duoDeviceRequest, 'duoDeviceRequest', 'authenticatorsAdminDuoCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DuoDevice>({
            url: '/authenticators/admin/duo/',
            method: 'POST',
            headers,
            body: duoDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for Duo authenticator devices (for admins)
     */
    authenticatorsAdminDuoDestroy({ id }: AuthenticatorsAdminDuoDestroyRequest): Observable<void>
    authenticatorsAdminDuoDestroy({ id }: AuthenticatorsAdminDuoDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authenticatorsAdminDuoDestroy({ id }: AuthenticatorsAdminDuoDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminDuoDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/authenticators/admin/duo/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for Duo authenticator devices (for admins)
     */
    authenticatorsAdminDuoList({ name, ordering, page, pageSize, search }: AuthenticatorsAdminDuoListRequest): Observable<PaginatedDuoDeviceList>
    authenticatorsAdminDuoList({ name, ordering, page, pageSize, search }: AuthenticatorsAdminDuoListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedDuoDeviceList>>
    authenticatorsAdminDuoList({ name, ordering, page, pageSize, search }: AuthenticatorsAdminDuoListRequest, opts?: OperationOpts): Observable<PaginatedDuoDeviceList | AjaxResponse<PaginatedDuoDeviceList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedDuoDeviceList>({
            url: '/authenticators/admin/duo/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for Duo authenticator devices (for admins)
     */
    authenticatorsAdminDuoPartialUpdate({ id, patchedDuoDeviceRequest }: AuthenticatorsAdminDuoPartialUpdateRequest): Observable<DuoDevice>
    authenticatorsAdminDuoPartialUpdate({ id, patchedDuoDeviceRequest }: AuthenticatorsAdminDuoPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<DuoDevice>>
    authenticatorsAdminDuoPartialUpdate({ id, patchedDuoDeviceRequest }: AuthenticatorsAdminDuoPartialUpdateRequest, opts?: OperationOpts): Observable<DuoDevice | AjaxResponse<DuoDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminDuoPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DuoDevice>({
            url: '/authenticators/admin/duo/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedDuoDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for Duo authenticator devices (for admins)
     */
    authenticatorsAdminDuoRetrieve({ id }: AuthenticatorsAdminDuoRetrieveRequest): Observable<DuoDevice>
    authenticatorsAdminDuoRetrieve({ id }: AuthenticatorsAdminDuoRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<DuoDevice>>
    authenticatorsAdminDuoRetrieve({ id }: AuthenticatorsAdminDuoRetrieveRequest, opts?: OperationOpts): Observable<DuoDevice | AjaxResponse<DuoDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminDuoRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DuoDevice>({
            url: '/authenticators/admin/duo/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for Duo authenticator devices (for admins)
     */
    authenticatorsAdminDuoUpdate({ id, duoDeviceRequest }: AuthenticatorsAdminDuoUpdateRequest): Observable<DuoDevice>
    authenticatorsAdminDuoUpdate({ id, duoDeviceRequest }: AuthenticatorsAdminDuoUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<DuoDevice>>
    authenticatorsAdminDuoUpdate({ id, duoDeviceRequest }: AuthenticatorsAdminDuoUpdateRequest, opts?: OperationOpts): Observable<DuoDevice | AjaxResponse<DuoDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminDuoUpdate');
        throwIfNullOrUndefined(duoDeviceRequest, 'duoDeviceRequest', 'authenticatorsAdminDuoUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DuoDevice>({
            url: '/authenticators/admin/duo/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: duoDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for sms authenticator devices (for admins)
     */
    authenticatorsAdminSmsCreate({ sMSDeviceRequest }: AuthenticatorsAdminSmsCreateRequest): Observable<SMSDevice>
    authenticatorsAdminSmsCreate({ sMSDeviceRequest }: AuthenticatorsAdminSmsCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<SMSDevice>>
    authenticatorsAdminSmsCreate({ sMSDeviceRequest }: AuthenticatorsAdminSmsCreateRequest, opts?: OperationOpts): Observable<SMSDevice | AjaxResponse<SMSDevice>> {
        throwIfNullOrUndefined(sMSDeviceRequest, 'sMSDeviceRequest', 'authenticatorsAdminSmsCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SMSDevice>({
            url: '/authenticators/admin/sms/',
            method: 'POST',
            headers,
            body: sMSDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for sms authenticator devices (for admins)
     */
    authenticatorsAdminSmsDestroy({ id }: AuthenticatorsAdminSmsDestroyRequest): Observable<void>
    authenticatorsAdminSmsDestroy({ id }: AuthenticatorsAdminSmsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authenticatorsAdminSmsDestroy({ id }: AuthenticatorsAdminSmsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminSmsDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/authenticators/admin/sms/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for sms authenticator devices (for admins)
     */
    authenticatorsAdminSmsList({ name, ordering, page, pageSize, search }: AuthenticatorsAdminSmsListRequest): Observable<PaginatedSMSDeviceList>
    authenticatorsAdminSmsList({ name, ordering, page, pageSize, search }: AuthenticatorsAdminSmsListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedSMSDeviceList>>
    authenticatorsAdminSmsList({ name, ordering, page, pageSize, search }: AuthenticatorsAdminSmsListRequest, opts?: OperationOpts): Observable<PaginatedSMSDeviceList | AjaxResponse<PaginatedSMSDeviceList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedSMSDeviceList>({
            url: '/authenticators/admin/sms/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for sms authenticator devices (for admins)
     */
    authenticatorsAdminSmsPartialUpdate({ id, patchedSMSDeviceRequest }: AuthenticatorsAdminSmsPartialUpdateRequest): Observable<SMSDevice>
    authenticatorsAdminSmsPartialUpdate({ id, patchedSMSDeviceRequest }: AuthenticatorsAdminSmsPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<SMSDevice>>
    authenticatorsAdminSmsPartialUpdate({ id, patchedSMSDeviceRequest }: AuthenticatorsAdminSmsPartialUpdateRequest, opts?: OperationOpts): Observable<SMSDevice | AjaxResponse<SMSDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminSmsPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SMSDevice>({
            url: '/authenticators/admin/sms/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedSMSDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for sms authenticator devices (for admins)
     */
    authenticatorsAdminSmsRetrieve({ id }: AuthenticatorsAdminSmsRetrieveRequest): Observable<SMSDevice>
    authenticatorsAdminSmsRetrieve({ id }: AuthenticatorsAdminSmsRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<SMSDevice>>
    authenticatorsAdminSmsRetrieve({ id }: AuthenticatorsAdminSmsRetrieveRequest, opts?: OperationOpts): Observable<SMSDevice | AjaxResponse<SMSDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminSmsRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SMSDevice>({
            url: '/authenticators/admin/sms/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for sms authenticator devices (for admins)
     */
    authenticatorsAdminSmsUpdate({ id, sMSDeviceRequest }: AuthenticatorsAdminSmsUpdateRequest): Observable<SMSDevice>
    authenticatorsAdminSmsUpdate({ id, sMSDeviceRequest }: AuthenticatorsAdminSmsUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<SMSDevice>>
    authenticatorsAdminSmsUpdate({ id, sMSDeviceRequest }: AuthenticatorsAdminSmsUpdateRequest, opts?: OperationOpts): Observable<SMSDevice | AjaxResponse<SMSDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminSmsUpdate');
        throwIfNullOrUndefined(sMSDeviceRequest, 'sMSDeviceRequest', 'authenticatorsAdminSmsUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SMSDevice>({
            url: '/authenticators/admin/sms/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: sMSDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for static authenticator devices (for admins)
     */
    authenticatorsAdminStaticCreate({ staticDeviceRequest }: AuthenticatorsAdminStaticCreateRequest): Observable<StaticDevice>
    authenticatorsAdminStaticCreate({ staticDeviceRequest }: AuthenticatorsAdminStaticCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<StaticDevice>>
    authenticatorsAdminStaticCreate({ staticDeviceRequest }: AuthenticatorsAdminStaticCreateRequest, opts?: OperationOpts): Observable<StaticDevice | AjaxResponse<StaticDevice>> {
        throwIfNullOrUndefined(staticDeviceRequest, 'staticDeviceRequest', 'authenticatorsAdminStaticCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<StaticDevice>({
            url: '/authenticators/admin/static/',
            method: 'POST',
            headers,
            body: staticDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for static authenticator devices (for admins)
     */
    authenticatorsAdminStaticDestroy({ id }: AuthenticatorsAdminStaticDestroyRequest): Observable<void>
    authenticatorsAdminStaticDestroy({ id }: AuthenticatorsAdminStaticDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authenticatorsAdminStaticDestroy({ id }: AuthenticatorsAdminStaticDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminStaticDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/authenticators/admin/static/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for static authenticator devices (for admins)
     */
    authenticatorsAdminStaticList({ name, ordering, page, pageSize, search }: AuthenticatorsAdminStaticListRequest): Observable<PaginatedStaticDeviceList>
    authenticatorsAdminStaticList({ name, ordering, page, pageSize, search }: AuthenticatorsAdminStaticListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedStaticDeviceList>>
    authenticatorsAdminStaticList({ name, ordering, page, pageSize, search }: AuthenticatorsAdminStaticListRequest, opts?: OperationOpts): Observable<PaginatedStaticDeviceList | AjaxResponse<PaginatedStaticDeviceList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedStaticDeviceList>({
            url: '/authenticators/admin/static/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for static authenticator devices (for admins)
     */
    authenticatorsAdminStaticPartialUpdate({ id, patchedStaticDeviceRequest }: AuthenticatorsAdminStaticPartialUpdateRequest): Observable<StaticDevice>
    authenticatorsAdminStaticPartialUpdate({ id, patchedStaticDeviceRequest }: AuthenticatorsAdminStaticPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<StaticDevice>>
    authenticatorsAdminStaticPartialUpdate({ id, patchedStaticDeviceRequest }: AuthenticatorsAdminStaticPartialUpdateRequest, opts?: OperationOpts): Observable<StaticDevice | AjaxResponse<StaticDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminStaticPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<StaticDevice>({
            url: '/authenticators/admin/static/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedStaticDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for static authenticator devices (for admins)
     */
    authenticatorsAdminStaticRetrieve({ id }: AuthenticatorsAdminStaticRetrieveRequest): Observable<StaticDevice>
    authenticatorsAdminStaticRetrieve({ id }: AuthenticatorsAdminStaticRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<StaticDevice>>
    authenticatorsAdminStaticRetrieve({ id }: AuthenticatorsAdminStaticRetrieveRequest, opts?: OperationOpts): Observable<StaticDevice | AjaxResponse<StaticDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminStaticRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<StaticDevice>({
            url: '/authenticators/admin/static/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for static authenticator devices (for admins)
     */
    authenticatorsAdminStaticUpdate({ id, staticDeviceRequest }: AuthenticatorsAdminStaticUpdateRequest): Observable<StaticDevice>
    authenticatorsAdminStaticUpdate({ id, staticDeviceRequest }: AuthenticatorsAdminStaticUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<StaticDevice>>
    authenticatorsAdminStaticUpdate({ id, staticDeviceRequest }: AuthenticatorsAdminStaticUpdateRequest, opts?: OperationOpts): Observable<StaticDevice | AjaxResponse<StaticDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminStaticUpdate');
        throwIfNullOrUndefined(staticDeviceRequest, 'staticDeviceRequest', 'authenticatorsAdminStaticUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<StaticDevice>({
            url: '/authenticators/admin/static/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: staticDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for totp authenticator devices (for admins)
     */
    authenticatorsAdminTotpCreate({ tOTPDeviceRequest }: AuthenticatorsAdminTotpCreateRequest): Observable<TOTPDevice>
    authenticatorsAdminTotpCreate({ tOTPDeviceRequest }: AuthenticatorsAdminTotpCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<TOTPDevice>>
    authenticatorsAdminTotpCreate({ tOTPDeviceRequest }: AuthenticatorsAdminTotpCreateRequest, opts?: OperationOpts): Observable<TOTPDevice | AjaxResponse<TOTPDevice>> {
        throwIfNullOrUndefined(tOTPDeviceRequest, 'tOTPDeviceRequest', 'authenticatorsAdminTotpCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<TOTPDevice>({
            url: '/authenticators/admin/totp/',
            method: 'POST',
            headers,
            body: tOTPDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for totp authenticator devices (for admins)
     */
    authenticatorsAdminTotpDestroy({ id }: AuthenticatorsAdminTotpDestroyRequest): Observable<void>
    authenticatorsAdminTotpDestroy({ id }: AuthenticatorsAdminTotpDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authenticatorsAdminTotpDestroy({ id }: AuthenticatorsAdminTotpDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminTotpDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/authenticators/admin/totp/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for totp authenticator devices (for admins)
     */
    authenticatorsAdminTotpList({ name, ordering, page, pageSize, search }: AuthenticatorsAdminTotpListRequest): Observable<PaginatedTOTPDeviceList>
    authenticatorsAdminTotpList({ name, ordering, page, pageSize, search }: AuthenticatorsAdminTotpListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedTOTPDeviceList>>
    authenticatorsAdminTotpList({ name, ordering, page, pageSize, search }: AuthenticatorsAdminTotpListRequest, opts?: OperationOpts): Observable<PaginatedTOTPDeviceList | AjaxResponse<PaginatedTOTPDeviceList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedTOTPDeviceList>({
            url: '/authenticators/admin/totp/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for totp authenticator devices (for admins)
     */
    authenticatorsAdminTotpPartialUpdate({ id, patchedTOTPDeviceRequest }: AuthenticatorsAdminTotpPartialUpdateRequest): Observable<TOTPDevice>
    authenticatorsAdminTotpPartialUpdate({ id, patchedTOTPDeviceRequest }: AuthenticatorsAdminTotpPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<TOTPDevice>>
    authenticatorsAdminTotpPartialUpdate({ id, patchedTOTPDeviceRequest }: AuthenticatorsAdminTotpPartialUpdateRequest, opts?: OperationOpts): Observable<TOTPDevice | AjaxResponse<TOTPDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminTotpPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<TOTPDevice>({
            url: '/authenticators/admin/totp/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedTOTPDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for totp authenticator devices (for admins)
     */
    authenticatorsAdminTotpRetrieve({ id }: AuthenticatorsAdminTotpRetrieveRequest): Observable<TOTPDevice>
    authenticatorsAdminTotpRetrieve({ id }: AuthenticatorsAdminTotpRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<TOTPDevice>>
    authenticatorsAdminTotpRetrieve({ id }: AuthenticatorsAdminTotpRetrieveRequest, opts?: OperationOpts): Observable<TOTPDevice | AjaxResponse<TOTPDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminTotpRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<TOTPDevice>({
            url: '/authenticators/admin/totp/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for totp authenticator devices (for admins)
     */
    authenticatorsAdminTotpUpdate({ id, tOTPDeviceRequest }: AuthenticatorsAdminTotpUpdateRequest): Observable<TOTPDevice>
    authenticatorsAdminTotpUpdate({ id, tOTPDeviceRequest }: AuthenticatorsAdminTotpUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<TOTPDevice>>
    authenticatorsAdminTotpUpdate({ id, tOTPDeviceRequest }: AuthenticatorsAdminTotpUpdateRequest, opts?: OperationOpts): Observable<TOTPDevice | AjaxResponse<TOTPDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminTotpUpdate');
        throwIfNullOrUndefined(tOTPDeviceRequest, 'tOTPDeviceRequest', 'authenticatorsAdminTotpUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<TOTPDevice>({
            url: '/authenticators/admin/totp/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: tOTPDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for WebAuthn authenticator devices (for admins)
     */
    authenticatorsAdminWebauthnCreate({ webAuthnDeviceRequest }: AuthenticatorsAdminWebauthnCreateRequest): Observable<WebAuthnDevice>
    authenticatorsAdminWebauthnCreate({ webAuthnDeviceRequest }: AuthenticatorsAdminWebauthnCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<WebAuthnDevice>>
    authenticatorsAdminWebauthnCreate({ webAuthnDeviceRequest }: AuthenticatorsAdminWebauthnCreateRequest, opts?: OperationOpts): Observable<WebAuthnDevice | AjaxResponse<WebAuthnDevice>> {
        throwIfNullOrUndefined(webAuthnDeviceRequest, 'webAuthnDeviceRequest', 'authenticatorsAdminWebauthnCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<WebAuthnDevice>({
            url: '/authenticators/admin/webauthn/',
            method: 'POST',
            headers,
            body: webAuthnDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for WebAuthn authenticator devices (for admins)
     */
    authenticatorsAdminWebauthnDestroy({ id }: AuthenticatorsAdminWebauthnDestroyRequest): Observable<void>
    authenticatorsAdminWebauthnDestroy({ id }: AuthenticatorsAdminWebauthnDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authenticatorsAdminWebauthnDestroy({ id }: AuthenticatorsAdminWebauthnDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminWebauthnDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/authenticators/admin/webauthn/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for WebAuthn authenticator devices (for admins)
     */
    authenticatorsAdminWebauthnList({ name, ordering, page, pageSize, search }: AuthenticatorsAdminWebauthnListRequest): Observable<PaginatedWebAuthnDeviceList>
    authenticatorsAdminWebauthnList({ name, ordering, page, pageSize, search }: AuthenticatorsAdminWebauthnListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedWebAuthnDeviceList>>
    authenticatorsAdminWebauthnList({ name, ordering, page, pageSize, search }: AuthenticatorsAdminWebauthnListRequest, opts?: OperationOpts): Observable<PaginatedWebAuthnDeviceList | AjaxResponse<PaginatedWebAuthnDeviceList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedWebAuthnDeviceList>({
            url: '/authenticators/admin/webauthn/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for WebAuthn authenticator devices (for admins)
     */
    authenticatorsAdminWebauthnPartialUpdate({ id, patchedWebAuthnDeviceRequest }: AuthenticatorsAdminWebauthnPartialUpdateRequest): Observable<WebAuthnDevice>
    authenticatorsAdminWebauthnPartialUpdate({ id, patchedWebAuthnDeviceRequest }: AuthenticatorsAdminWebauthnPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<WebAuthnDevice>>
    authenticatorsAdminWebauthnPartialUpdate({ id, patchedWebAuthnDeviceRequest }: AuthenticatorsAdminWebauthnPartialUpdateRequest, opts?: OperationOpts): Observable<WebAuthnDevice | AjaxResponse<WebAuthnDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminWebauthnPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<WebAuthnDevice>({
            url: '/authenticators/admin/webauthn/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedWebAuthnDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for WebAuthn authenticator devices (for admins)
     */
    authenticatorsAdminWebauthnRetrieve({ id }: AuthenticatorsAdminWebauthnRetrieveRequest): Observable<WebAuthnDevice>
    authenticatorsAdminWebauthnRetrieve({ id }: AuthenticatorsAdminWebauthnRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<WebAuthnDevice>>
    authenticatorsAdminWebauthnRetrieve({ id }: AuthenticatorsAdminWebauthnRetrieveRequest, opts?: OperationOpts): Observable<WebAuthnDevice | AjaxResponse<WebAuthnDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminWebauthnRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<WebAuthnDevice>({
            url: '/authenticators/admin/webauthn/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for WebAuthn authenticator devices (for admins)
     */
    authenticatorsAdminWebauthnUpdate({ id, webAuthnDeviceRequest }: AuthenticatorsAdminWebauthnUpdateRequest): Observable<WebAuthnDevice>
    authenticatorsAdminWebauthnUpdate({ id, webAuthnDeviceRequest }: AuthenticatorsAdminWebauthnUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<WebAuthnDevice>>
    authenticatorsAdminWebauthnUpdate({ id, webAuthnDeviceRequest }: AuthenticatorsAdminWebauthnUpdateRequest, opts?: OperationOpts): Observable<WebAuthnDevice | AjaxResponse<WebAuthnDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsAdminWebauthnUpdate');
        throwIfNullOrUndefined(webAuthnDeviceRequest, 'webAuthnDeviceRequest', 'authenticatorsAdminWebauthnUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<WebAuthnDevice>({
            url: '/authenticators/admin/webauthn/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: webAuthnDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get all devices for current user
     */
    authenticatorsAllList(): Observable<Array<Device>>
    authenticatorsAllList(opts?: OperationOpts): Observable<AjaxResponse<Array<Device>>>
    authenticatorsAllList(opts?: OperationOpts): Observable<Array<Device> | AjaxResponse<Array<Device>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<Device>>({
            url: '/authenticators/all/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for Duo authenticator devices
     */
    authenticatorsDuoDestroy({ id }: AuthenticatorsDuoDestroyRequest): Observable<void>
    authenticatorsDuoDestroy({ id }: AuthenticatorsDuoDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authenticatorsDuoDestroy({ id }: AuthenticatorsDuoDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsDuoDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/authenticators/duo/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for Duo authenticator devices
     */
    authenticatorsDuoList({ name, ordering, page, pageSize, search }: AuthenticatorsDuoListRequest): Observable<PaginatedDuoDeviceList>
    authenticatorsDuoList({ name, ordering, page, pageSize, search }: AuthenticatorsDuoListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedDuoDeviceList>>
    authenticatorsDuoList({ name, ordering, page, pageSize, search }: AuthenticatorsDuoListRequest, opts?: OperationOpts): Observable<PaginatedDuoDeviceList | AjaxResponse<PaginatedDuoDeviceList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedDuoDeviceList>({
            url: '/authenticators/duo/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for Duo authenticator devices
     */
    authenticatorsDuoPartialUpdate({ id, patchedDuoDeviceRequest }: AuthenticatorsDuoPartialUpdateRequest): Observable<DuoDevice>
    authenticatorsDuoPartialUpdate({ id, patchedDuoDeviceRequest }: AuthenticatorsDuoPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<DuoDevice>>
    authenticatorsDuoPartialUpdate({ id, patchedDuoDeviceRequest }: AuthenticatorsDuoPartialUpdateRequest, opts?: OperationOpts): Observable<DuoDevice | AjaxResponse<DuoDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsDuoPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DuoDevice>({
            url: '/authenticators/duo/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedDuoDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for Duo authenticator devices
     */
    authenticatorsDuoRetrieve({ id }: AuthenticatorsDuoRetrieveRequest): Observable<DuoDevice>
    authenticatorsDuoRetrieve({ id }: AuthenticatorsDuoRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<DuoDevice>>
    authenticatorsDuoRetrieve({ id }: AuthenticatorsDuoRetrieveRequest, opts?: OperationOpts): Observable<DuoDevice | AjaxResponse<DuoDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsDuoRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DuoDevice>({
            url: '/authenticators/duo/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for Duo authenticator devices
     */
    authenticatorsDuoUpdate({ id, duoDeviceRequest }: AuthenticatorsDuoUpdateRequest): Observable<DuoDevice>
    authenticatorsDuoUpdate({ id, duoDeviceRequest }: AuthenticatorsDuoUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<DuoDevice>>
    authenticatorsDuoUpdate({ id, duoDeviceRequest }: AuthenticatorsDuoUpdateRequest, opts?: OperationOpts): Observable<DuoDevice | AjaxResponse<DuoDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsDuoUpdate');
        throwIfNullOrUndefined(duoDeviceRequest, 'duoDeviceRequest', 'authenticatorsDuoUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DuoDevice>({
            url: '/authenticators/duo/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: duoDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    authenticatorsDuoUsedByList({ id }: AuthenticatorsDuoUsedByListRequest): Observable<Array<UsedBy>>
    authenticatorsDuoUsedByList({ id }: AuthenticatorsDuoUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    authenticatorsDuoUsedByList({ id }: AuthenticatorsDuoUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsDuoUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/authenticators/duo/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for sms authenticator devices
     */
    authenticatorsSmsDestroy({ id }: AuthenticatorsSmsDestroyRequest): Observable<void>
    authenticatorsSmsDestroy({ id }: AuthenticatorsSmsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authenticatorsSmsDestroy({ id }: AuthenticatorsSmsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsSmsDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/authenticators/sms/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for sms authenticator devices
     */
    authenticatorsSmsList({ name, ordering, page, pageSize, search }: AuthenticatorsSmsListRequest): Observable<PaginatedSMSDeviceList>
    authenticatorsSmsList({ name, ordering, page, pageSize, search }: AuthenticatorsSmsListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedSMSDeviceList>>
    authenticatorsSmsList({ name, ordering, page, pageSize, search }: AuthenticatorsSmsListRequest, opts?: OperationOpts): Observable<PaginatedSMSDeviceList | AjaxResponse<PaginatedSMSDeviceList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedSMSDeviceList>({
            url: '/authenticators/sms/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for sms authenticator devices
     */
    authenticatorsSmsPartialUpdate({ id, patchedSMSDeviceRequest }: AuthenticatorsSmsPartialUpdateRequest): Observable<SMSDevice>
    authenticatorsSmsPartialUpdate({ id, patchedSMSDeviceRequest }: AuthenticatorsSmsPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<SMSDevice>>
    authenticatorsSmsPartialUpdate({ id, patchedSMSDeviceRequest }: AuthenticatorsSmsPartialUpdateRequest, opts?: OperationOpts): Observable<SMSDevice | AjaxResponse<SMSDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsSmsPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SMSDevice>({
            url: '/authenticators/sms/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedSMSDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for sms authenticator devices
     */
    authenticatorsSmsRetrieve({ id }: AuthenticatorsSmsRetrieveRequest): Observable<SMSDevice>
    authenticatorsSmsRetrieve({ id }: AuthenticatorsSmsRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<SMSDevice>>
    authenticatorsSmsRetrieve({ id }: AuthenticatorsSmsRetrieveRequest, opts?: OperationOpts): Observable<SMSDevice | AjaxResponse<SMSDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsSmsRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SMSDevice>({
            url: '/authenticators/sms/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for sms authenticator devices
     */
    authenticatorsSmsUpdate({ id, sMSDeviceRequest }: AuthenticatorsSmsUpdateRequest): Observable<SMSDevice>
    authenticatorsSmsUpdate({ id, sMSDeviceRequest }: AuthenticatorsSmsUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<SMSDevice>>
    authenticatorsSmsUpdate({ id, sMSDeviceRequest }: AuthenticatorsSmsUpdateRequest, opts?: OperationOpts): Observable<SMSDevice | AjaxResponse<SMSDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsSmsUpdate');
        throwIfNullOrUndefined(sMSDeviceRequest, 'sMSDeviceRequest', 'authenticatorsSmsUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SMSDevice>({
            url: '/authenticators/sms/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: sMSDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    authenticatorsSmsUsedByList({ id }: AuthenticatorsSmsUsedByListRequest): Observable<Array<UsedBy>>
    authenticatorsSmsUsedByList({ id }: AuthenticatorsSmsUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    authenticatorsSmsUsedByList({ id }: AuthenticatorsSmsUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsSmsUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/authenticators/sms/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for static authenticator devices
     */
    authenticatorsStaticDestroy({ id }: AuthenticatorsStaticDestroyRequest): Observable<void>
    authenticatorsStaticDestroy({ id }: AuthenticatorsStaticDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authenticatorsStaticDestroy({ id }: AuthenticatorsStaticDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsStaticDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/authenticators/static/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for static authenticator devices
     */
    authenticatorsStaticList({ name, ordering, page, pageSize, search }: AuthenticatorsStaticListRequest): Observable<PaginatedStaticDeviceList>
    authenticatorsStaticList({ name, ordering, page, pageSize, search }: AuthenticatorsStaticListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedStaticDeviceList>>
    authenticatorsStaticList({ name, ordering, page, pageSize, search }: AuthenticatorsStaticListRequest, opts?: OperationOpts): Observable<PaginatedStaticDeviceList | AjaxResponse<PaginatedStaticDeviceList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedStaticDeviceList>({
            url: '/authenticators/static/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for static authenticator devices
     */
    authenticatorsStaticPartialUpdate({ id, patchedStaticDeviceRequest }: AuthenticatorsStaticPartialUpdateRequest): Observable<StaticDevice>
    authenticatorsStaticPartialUpdate({ id, patchedStaticDeviceRequest }: AuthenticatorsStaticPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<StaticDevice>>
    authenticatorsStaticPartialUpdate({ id, patchedStaticDeviceRequest }: AuthenticatorsStaticPartialUpdateRequest, opts?: OperationOpts): Observable<StaticDevice | AjaxResponse<StaticDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsStaticPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<StaticDevice>({
            url: '/authenticators/static/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedStaticDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for static authenticator devices
     */
    authenticatorsStaticRetrieve({ id }: AuthenticatorsStaticRetrieveRequest): Observable<StaticDevice>
    authenticatorsStaticRetrieve({ id }: AuthenticatorsStaticRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<StaticDevice>>
    authenticatorsStaticRetrieve({ id }: AuthenticatorsStaticRetrieveRequest, opts?: OperationOpts): Observable<StaticDevice | AjaxResponse<StaticDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsStaticRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<StaticDevice>({
            url: '/authenticators/static/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for static authenticator devices
     */
    authenticatorsStaticUpdate({ id, staticDeviceRequest }: AuthenticatorsStaticUpdateRequest): Observable<StaticDevice>
    authenticatorsStaticUpdate({ id, staticDeviceRequest }: AuthenticatorsStaticUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<StaticDevice>>
    authenticatorsStaticUpdate({ id, staticDeviceRequest }: AuthenticatorsStaticUpdateRequest, opts?: OperationOpts): Observable<StaticDevice | AjaxResponse<StaticDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsStaticUpdate');
        throwIfNullOrUndefined(staticDeviceRequest, 'staticDeviceRequest', 'authenticatorsStaticUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<StaticDevice>({
            url: '/authenticators/static/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: staticDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    authenticatorsStaticUsedByList({ id }: AuthenticatorsStaticUsedByListRequest): Observable<Array<UsedBy>>
    authenticatorsStaticUsedByList({ id }: AuthenticatorsStaticUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    authenticatorsStaticUsedByList({ id }: AuthenticatorsStaticUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsStaticUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/authenticators/static/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for totp authenticator devices
     */
    authenticatorsTotpDestroy({ id }: AuthenticatorsTotpDestroyRequest): Observable<void>
    authenticatorsTotpDestroy({ id }: AuthenticatorsTotpDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authenticatorsTotpDestroy({ id }: AuthenticatorsTotpDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsTotpDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/authenticators/totp/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for totp authenticator devices
     */
    authenticatorsTotpList({ name, ordering, page, pageSize, search }: AuthenticatorsTotpListRequest): Observable<PaginatedTOTPDeviceList>
    authenticatorsTotpList({ name, ordering, page, pageSize, search }: AuthenticatorsTotpListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedTOTPDeviceList>>
    authenticatorsTotpList({ name, ordering, page, pageSize, search }: AuthenticatorsTotpListRequest, opts?: OperationOpts): Observable<PaginatedTOTPDeviceList | AjaxResponse<PaginatedTOTPDeviceList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedTOTPDeviceList>({
            url: '/authenticators/totp/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for totp authenticator devices
     */
    authenticatorsTotpPartialUpdate({ id, patchedTOTPDeviceRequest }: AuthenticatorsTotpPartialUpdateRequest): Observable<TOTPDevice>
    authenticatorsTotpPartialUpdate({ id, patchedTOTPDeviceRequest }: AuthenticatorsTotpPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<TOTPDevice>>
    authenticatorsTotpPartialUpdate({ id, patchedTOTPDeviceRequest }: AuthenticatorsTotpPartialUpdateRequest, opts?: OperationOpts): Observable<TOTPDevice | AjaxResponse<TOTPDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsTotpPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<TOTPDevice>({
            url: '/authenticators/totp/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedTOTPDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for totp authenticator devices
     */
    authenticatorsTotpRetrieve({ id }: AuthenticatorsTotpRetrieveRequest): Observable<TOTPDevice>
    authenticatorsTotpRetrieve({ id }: AuthenticatorsTotpRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<TOTPDevice>>
    authenticatorsTotpRetrieve({ id }: AuthenticatorsTotpRetrieveRequest, opts?: OperationOpts): Observable<TOTPDevice | AjaxResponse<TOTPDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsTotpRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<TOTPDevice>({
            url: '/authenticators/totp/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for totp authenticator devices
     */
    authenticatorsTotpUpdate({ id, tOTPDeviceRequest }: AuthenticatorsTotpUpdateRequest): Observable<TOTPDevice>
    authenticatorsTotpUpdate({ id, tOTPDeviceRequest }: AuthenticatorsTotpUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<TOTPDevice>>
    authenticatorsTotpUpdate({ id, tOTPDeviceRequest }: AuthenticatorsTotpUpdateRequest, opts?: OperationOpts): Observable<TOTPDevice | AjaxResponse<TOTPDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsTotpUpdate');
        throwIfNullOrUndefined(tOTPDeviceRequest, 'tOTPDeviceRequest', 'authenticatorsTotpUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<TOTPDevice>({
            url: '/authenticators/totp/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: tOTPDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    authenticatorsTotpUsedByList({ id }: AuthenticatorsTotpUsedByListRequest): Observable<Array<UsedBy>>
    authenticatorsTotpUsedByList({ id }: AuthenticatorsTotpUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    authenticatorsTotpUsedByList({ id }: AuthenticatorsTotpUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsTotpUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/authenticators/totp/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for WebAuthn authenticator devices
     */
    authenticatorsWebauthnDestroy({ id }: AuthenticatorsWebauthnDestroyRequest): Observable<void>
    authenticatorsWebauthnDestroy({ id }: AuthenticatorsWebauthnDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authenticatorsWebauthnDestroy({ id }: AuthenticatorsWebauthnDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsWebauthnDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/authenticators/webauthn/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for WebAuthn authenticator devices
     */
    authenticatorsWebauthnList({ name, ordering, page, pageSize, search }: AuthenticatorsWebauthnListRequest): Observable<PaginatedWebAuthnDeviceList>
    authenticatorsWebauthnList({ name, ordering, page, pageSize, search }: AuthenticatorsWebauthnListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedWebAuthnDeviceList>>
    authenticatorsWebauthnList({ name, ordering, page, pageSize, search }: AuthenticatorsWebauthnListRequest, opts?: OperationOpts): Observable<PaginatedWebAuthnDeviceList | AjaxResponse<PaginatedWebAuthnDeviceList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedWebAuthnDeviceList>({
            url: '/authenticators/webauthn/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for WebAuthn authenticator devices
     */
    authenticatorsWebauthnPartialUpdate({ id, patchedWebAuthnDeviceRequest }: AuthenticatorsWebauthnPartialUpdateRequest): Observable<WebAuthnDevice>
    authenticatorsWebauthnPartialUpdate({ id, patchedWebAuthnDeviceRequest }: AuthenticatorsWebauthnPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<WebAuthnDevice>>
    authenticatorsWebauthnPartialUpdate({ id, patchedWebAuthnDeviceRequest }: AuthenticatorsWebauthnPartialUpdateRequest, opts?: OperationOpts): Observable<WebAuthnDevice | AjaxResponse<WebAuthnDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsWebauthnPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<WebAuthnDevice>({
            url: '/authenticators/webauthn/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedWebAuthnDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for WebAuthn authenticator devices
     */
    authenticatorsWebauthnRetrieve({ id }: AuthenticatorsWebauthnRetrieveRequest): Observable<WebAuthnDevice>
    authenticatorsWebauthnRetrieve({ id }: AuthenticatorsWebauthnRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<WebAuthnDevice>>
    authenticatorsWebauthnRetrieve({ id }: AuthenticatorsWebauthnRetrieveRequest, opts?: OperationOpts): Observable<WebAuthnDevice | AjaxResponse<WebAuthnDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsWebauthnRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<WebAuthnDevice>({
            url: '/authenticators/webauthn/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Viewset for WebAuthn authenticator devices
     */
    authenticatorsWebauthnUpdate({ id, webAuthnDeviceRequest }: AuthenticatorsWebauthnUpdateRequest): Observable<WebAuthnDevice>
    authenticatorsWebauthnUpdate({ id, webAuthnDeviceRequest }: AuthenticatorsWebauthnUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<WebAuthnDevice>>
    authenticatorsWebauthnUpdate({ id, webAuthnDeviceRequest }: AuthenticatorsWebauthnUpdateRequest, opts?: OperationOpts): Observable<WebAuthnDevice | AjaxResponse<WebAuthnDevice>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsWebauthnUpdate');
        throwIfNullOrUndefined(webAuthnDeviceRequest, 'webAuthnDeviceRequest', 'authenticatorsWebauthnUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<WebAuthnDevice>({
            url: '/authenticators/webauthn/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: webAuthnDeviceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    authenticatorsWebauthnUsedByList({ id }: AuthenticatorsWebauthnUsedByListRequest): Observable<Array<UsedBy>>
    authenticatorsWebauthnUsedByList({ id }: AuthenticatorsWebauthnUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    authenticatorsWebauthnUsedByList({ id }: AuthenticatorsWebauthnUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'authenticatorsWebauthnUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/authenticators/webauthn/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}
