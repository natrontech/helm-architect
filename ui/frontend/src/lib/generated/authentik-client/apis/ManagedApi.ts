// tslint:disable
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2023.10.2
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    BlueprintFile,
    BlueprintInstance,
    BlueprintInstanceRequest,
    GenericError,
    PaginatedBlueprintInstanceList,
    PatchedBlueprintInstanceRequest,
    UsedBy,
    ValidationError,
} from '../models';

export interface ManagedBlueprintsApplyCreateRequest {
    instanceUuid: string;
}

export interface ManagedBlueprintsCreateRequest {
    blueprintInstanceRequest: BlueprintInstanceRequest;
}

export interface ManagedBlueprintsDestroyRequest {
    instanceUuid: string;
}

export interface ManagedBlueprintsListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    path?: string;
    search?: string;
}

export interface ManagedBlueprintsPartialUpdateRequest {
    instanceUuid: string;
    patchedBlueprintInstanceRequest?: PatchedBlueprintInstanceRequest;
}

export interface ManagedBlueprintsRetrieveRequest {
    instanceUuid: string;
}

export interface ManagedBlueprintsUpdateRequest {
    instanceUuid: string;
    blueprintInstanceRequest: BlueprintInstanceRequest;
}

export interface ManagedBlueprintsUsedByListRequest {
    instanceUuid: string;
}

/**
 * no description
 */
export class ManagedApi extends BaseAPI {

    /**
     * Apply a blueprint
     */
    managedBlueprintsApplyCreate({ instanceUuid }: ManagedBlueprintsApplyCreateRequest): Observable<BlueprintInstance>
    managedBlueprintsApplyCreate({ instanceUuid }: ManagedBlueprintsApplyCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<BlueprintInstance>>
    managedBlueprintsApplyCreate({ instanceUuid }: ManagedBlueprintsApplyCreateRequest, opts?: OperationOpts): Observable<BlueprintInstance | AjaxResponse<BlueprintInstance>> {
        throwIfNullOrUndefined(instanceUuid, 'instanceUuid', 'managedBlueprintsApplyCreate');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<BlueprintInstance>({
            url: '/managed/blueprints/{instance_uuid}/apply/'.replace('{instance_uuid}', encodeURI(instanceUuid)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get blueprints
     */
    managedBlueprintsAvailableList(): Observable<Array<BlueprintFile>>
    managedBlueprintsAvailableList(opts?: OperationOpts): Observable<AjaxResponse<Array<BlueprintFile>>>
    managedBlueprintsAvailableList(opts?: OperationOpts): Observable<Array<BlueprintFile> | AjaxResponse<Array<BlueprintFile>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<BlueprintFile>>({
            url: '/managed/blueprints/available/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Blueprint instances
     */
    managedBlueprintsCreate({ blueprintInstanceRequest }: ManagedBlueprintsCreateRequest): Observable<BlueprintInstance>
    managedBlueprintsCreate({ blueprintInstanceRequest }: ManagedBlueprintsCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<BlueprintInstance>>
    managedBlueprintsCreate({ blueprintInstanceRequest }: ManagedBlueprintsCreateRequest, opts?: OperationOpts): Observable<BlueprintInstance | AjaxResponse<BlueprintInstance>> {
        throwIfNullOrUndefined(blueprintInstanceRequest, 'blueprintInstanceRequest', 'managedBlueprintsCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<BlueprintInstance>({
            url: '/managed/blueprints/',
            method: 'POST',
            headers,
            body: blueprintInstanceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Blueprint instances
     */
    managedBlueprintsDestroy({ instanceUuid }: ManagedBlueprintsDestroyRequest): Observable<void>
    managedBlueprintsDestroy({ instanceUuid }: ManagedBlueprintsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    managedBlueprintsDestroy({ instanceUuid }: ManagedBlueprintsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(instanceUuid, 'instanceUuid', 'managedBlueprintsDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/managed/blueprints/{instance_uuid}/'.replace('{instance_uuid}', encodeURI(instanceUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Blueprint instances
     */
    managedBlueprintsList({ name, ordering, page, pageSize, path, search }: ManagedBlueprintsListRequest): Observable<PaginatedBlueprintInstanceList>
    managedBlueprintsList({ name, ordering, page, pageSize, path, search }: ManagedBlueprintsListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedBlueprintInstanceList>>
    managedBlueprintsList({ name, ordering, page, pageSize, path, search }: ManagedBlueprintsListRequest, opts?: OperationOpts): Observable<PaginatedBlueprintInstanceList | AjaxResponse<PaginatedBlueprintInstanceList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (path != null) { query['path'] = path; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedBlueprintInstanceList>({
            url: '/managed/blueprints/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Blueprint instances
     */
    managedBlueprintsPartialUpdate({ instanceUuid, patchedBlueprintInstanceRequest }: ManagedBlueprintsPartialUpdateRequest): Observable<BlueprintInstance>
    managedBlueprintsPartialUpdate({ instanceUuid, patchedBlueprintInstanceRequest }: ManagedBlueprintsPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<BlueprintInstance>>
    managedBlueprintsPartialUpdate({ instanceUuid, patchedBlueprintInstanceRequest }: ManagedBlueprintsPartialUpdateRequest, opts?: OperationOpts): Observable<BlueprintInstance | AjaxResponse<BlueprintInstance>> {
        throwIfNullOrUndefined(instanceUuid, 'instanceUuid', 'managedBlueprintsPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<BlueprintInstance>({
            url: '/managed/blueprints/{instance_uuid}/'.replace('{instance_uuid}', encodeURI(instanceUuid)),
            method: 'PATCH',
            headers,
            body: patchedBlueprintInstanceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Blueprint instances
     */
    managedBlueprintsRetrieve({ instanceUuid }: ManagedBlueprintsRetrieveRequest): Observable<BlueprintInstance>
    managedBlueprintsRetrieve({ instanceUuid }: ManagedBlueprintsRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<BlueprintInstance>>
    managedBlueprintsRetrieve({ instanceUuid }: ManagedBlueprintsRetrieveRequest, opts?: OperationOpts): Observable<BlueprintInstance | AjaxResponse<BlueprintInstance>> {
        throwIfNullOrUndefined(instanceUuid, 'instanceUuid', 'managedBlueprintsRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<BlueprintInstance>({
            url: '/managed/blueprints/{instance_uuid}/'.replace('{instance_uuid}', encodeURI(instanceUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Blueprint instances
     */
    managedBlueprintsUpdate({ instanceUuid, blueprintInstanceRequest }: ManagedBlueprintsUpdateRequest): Observable<BlueprintInstance>
    managedBlueprintsUpdate({ instanceUuid, blueprintInstanceRequest }: ManagedBlueprintsUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<BlueprintInstance>>
    managedBlueprintsUpdate({ instanceUuid, blueprintInstanceRequest }: ManagedBlueprintsUpdateRequest, opts?: OperationOpts): Observable<BlueprintInstance | AjaxResponse<BlueprintInstance>> {
        throwIfNullOrUndefined(instanceUuid, 'instanceUuid', 'managedBlueprintsUpdate');
        throwIfNullOrUndefined(blueprintInstanceRequest, 'blueprintInstanceRequest', 'managedBlueprintsUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<BlueprintInstance>({
            url: '/managed/blueprints/{instance_uuid}/'.replace('{instance_uuid}', encodeURI(instanceUuid)),
            method: 'PUT',
            headers,
            body: blueprintInstanceRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    managedBlueprintsUsedByList({ instanceUuid }: ManagedBlueprintsUsedByListRequest): Observable<Array<UsedBy>>
    managedBlueprintsUsedByList({ instanceUuid }: ManagedBlueprintsUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    managedBlueprintsUsedByList({ instanceUuid }: ManagedBlueprintsUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(instanceUuid, 'instanceUuid', 'managedBlueprintsUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/managed/blueprints/{instance_uuid}/used_by/'.replace('{instance_uuid}', encodeURI(instanceUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}
