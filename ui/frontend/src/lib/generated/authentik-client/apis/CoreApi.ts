// tslint:disable
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2023.10.2
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    Application,
    ApplicationRequest,
    AuthenticatedSession,
    Coordinate,
    CurrentTenant,
    FilePathRequest,
    GenericError,
    Group,
    GroupRequest,
    Link,
    PaginatedApplicationList,
    PaginatedAuthenticatedSessionList,
    PaginatedGroupList,
    PaginatedTenantList,
    PaginatedTokenList,
    PaginatedUserConsentList,
    PaginatedUserList,
    PatchedApplicationRequest,
    PatchedGroupRequest,
    PatchedTenantRequest,
    PatchedTokenRequest,
    PatchedUserRequest,
    PolicyTestResult,
    SessionUser,
    Tenant,
    TenantRequest,
    Token,
    TokenRequest,
    TokenSetKeyRequest,
    TokenView,
    TransactionApplicationRequest,
    TransactionApplicationResponse,
    UsedBy,
    User,
    UserAccountRequest,
    UserConsent,
    UserMetrics,
    UserPasswordSetRequest,
    UserPath,
    UserRequest,
    UserServiceAccountRequest,
    UserServiceAccountResponse,
    ValidationError,
} from '../models';

export interface CoreApplicationsCheckAccessRetrieveRequest {
    slug: string;
    forUser?: number;
}

export interface CoreApplicationsCreateRequest {
    applicationRequest: ApplicationRequest;
}

export interface CoreApplicationsDestroyRequest {
    slug: string;
}

export interface CoreApplicationsListRequest {
    group?: string;
    metaDescription?: string;
    metaLaunchUrl?: string;
    metaPublisher?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    slug?: string;
    superuserFullList?: boolean;
}

export interface CoreApplicationsMetricsListRequest {
    slug: string;
}

export interface CoreApplicationsPartialUpdateRequest {
    slug: string;
    patchedApplicationRequest?: PatchedApplicationRequest;
}

export interface CoreApplicationsRetrieveRequest {
    slug: string;
}

export interface CoreApplicationsSetIconCreateRequest {
    slug: string;
    file?: Blob;
    clear?: boolean;
}

export interface CoreApplicationsSetIconUrlCreateRequest {
    slug: string;
    filePathRequest: FilePathRequest;
}

export interface CoreApplicationsUpdateRequest {
    slug: string;
    applicationRequest: ApplicationRequest;
}

export interface CoreApplicationsUsedByListRequest {
    slug: string;
}

export interface CoreAuthenticatedSessionsDestroyRequest {
    uuid: string;
}

export interface CoreAuthenticatedSessionsListRequest {
    lastIp?: string;
    lastUserAgent?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    userUsername?: string;
}

export interface CoreAuthenticatedSessionsRetrieveRequest {
    uuid: string;
}

export interface CoreAuthenticatedSessionsUsedByListRequest {
    uuid: string;
}

export interface CoreGroupsAddUserCreateRequest {
    groupUuid: string;
    userAccountRequest: UserAccountRequest;
}

export interface CoreGroupsCreateRequest {
    groupRequest: GroupRequest;
}

export interface CoreGroupsDestroyRequest {
    groupUuid: string;
}

export interface CoreGroupsListRequest {
    attributes?: string;
    isSuperuser?: boolean;
    membersByPk?: Array<number>;
    membersByUsername?: Array<string>;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface CoreGroupsPartialUpdateRequest {
    groupUuid: string;
    patchedGroupRequest?: PatchedGroupRequest;
}

export interface CoreGroupsRemoveUserCreateRequest {
    groupUuid: string;
    userAccountRequest: UserAccountRequest;
}

export interface CoreGroupsRetrieveRequest {
    groupUuid: string;
}

export interface CoreGroupsUpdateRequest {
    groupUuid: string;
    groupRequest: GroupRequest;
}

export interface CoreGroupsUsedByListRequest {
    groupUuid: string;
}

export interface CoreTenantsCreateRequest {
    tenantRequest: TenantRequest;
}

export interface CoreTenantsDestroyRequest {
    tenantUuid: string;
}

export interface CoreTenantsListRequest {
    brandingFavicon?: string;
    brandingLogo?: string;
    brandingTitle?: string;
    _default?: boolean;
    domain?: string;
    eventRetention?: string;
    flowAuthentication?: string;
    flowDeviceCode?: string;
    flowInvalidation?: string;
    flowRecovery?: string;
    flowUnenrollment?: string;
    flowUserSettings?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    tenantUuid?: string;
    webCertificate?: string;
}

export interface CoreTenantsPartialUpdateRequest {
    tenantUuid: string;
    patchedTenantRequest?: PatchedTenantRequest;
}

export interface CoreTenantsRetrieveRequest {
    tenantUuid: string;
}

export interface CoreTenantsUpdateRequest {
    tenantUuid: string;
    tenantRequest: TenantRequest;
}

export interface CoreTenantsUsedByListRequest {
    tenantUuid: string;
}

export interface CoreTokensCreateRequest {
    tokenRequest: TokenRequest;
}

export interface CoreTokensDestroyRequest {
    identifier: string;
}

export interface CoreTokensListRequest {
    description?: string;
    expires?: string;
    expiring?: boolean;
    identifier?: string;
    intent?: CoreTokensListIntentEnum;
    managed?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    userUsername?: string;
}

export interface CoreTokensPartialUpdateRequest {
    identifier: string;
    patchedTokenRequest?: PatchedTokenRequest;
}

export interface CoreTokensRetrieveRequest {
    identifier: string;
}

export interface CoreTokensSetKeyCreateRequest {
    identifier: string;
    tokenSetKeyRequest: TokenSetKeyRequest;
}

export interface CoreTokensUpdateRequest {
    identifier: string;
    tokenRequest: TokenRequest;
}

export interface CoreTokensUsedByListRequest {
    identifier: string;
}

export interface CoreTokensViewKeyRetrieveRequest {
    identifier: string;
}

export interface CoreTransactionalApplicationsUpdateRequest {
    transactionApplicationRequest: TransactionApplicationRequest;
}

export interface CoreUserConsentDestroyRequest {
    id: number;
}

export interface CoreUserConsentListRequest {
    application?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    user?: number;
}

export interface CoreUserConsentRetrieveRequest {
    id: number;
}

export interface CoreUserConsentUsedByListRequest {
    id: number;
}

export interface CoreUsersCreateRequest {
    userRequest: UserRequest;
}

export interface CoreUsersDestroyRequest {
    id: number;
}

export interface CoreUsersImpersonateCreateRequest {
    id: number;
}

export interface CoreUsersListRequest {
    attributes?: string;
    email?: string;
    groupsByName?: Array<string>;
    groupsByPk?: Array<string>;
    isActive?: boolean;
    isSuperuser?: boolean;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    path?: string;
    pathStartswith?: string;
    search?: string;
    type?: Array<CoreUsersListTypeEnum>;
    username?: string;
    uuid?: string;
}

export interface CoreUsersMetricsRetrieveRequest {
    id: number;
}

export interface CoreUsersPartialUpdateRequest {
    id: number;
    patchedUserRequest?: PatchedUserRequest;
}

export interface CoreUsersPathsRetrieveRequest {
    search?: string;
}

export interface CoreUsersRecoveryEmailRetrieveRequest {
    emailStage: string;
    id: number;
}

export interface CoreUsersRecoveryRetrieveRequest {
    id: number;
}

export interface CoreUsersRetrieveRequest {
    id: number;
}

export interface CoreUsersServiceAccountCreateRequest {
    userServiceAccountRequest: UserServiceAccountRequest;
}

export interface CoreUsersSetPasswordCreateRequest {
    id: number;
    userPasswordSetRequest: UserPasswordSetRequest;
}

export interface CoreUsersUpdateRequest {
    id: number;
    userRequest: UserRequest;
}

export interface CoreUsersUsedByListRequest {
    id: number;
}

/**
 * no description
 */
export class CoreApi extends BaseAPI {

    /**
     * Check access to a single application by slug
     */
    coreApplicationsCheckAccessRetrieve({ slug, forUser }: CoreApplicationsCheckAccessRetrieveRequest): Observable<PolicyTestResult>
    coreApplicationsCheckAccessRetrieve({ slug, forUser }: CoreApplicationsCheckAccessRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<PolicyTestResult>>
    coreApplicationsCheckAccessRetrieve({ slug, forUser }: CoreApplicationsCheckAccessRetrieveRequest, opts?: OperationOpts): Observable<PolicyTestResult | AjaxResponse<PolicyTestResult>> {
        throwIfNullOrUndefined(slug, 'slug', 'coreApplicationsCheckAccessRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (forUser != null) { query['for_user'] = forUser; }

        return this.request<PolicyTestResult>({
            url: '/core/applications/{slug}/check_access/'.replace('{slug}', encodeURI(slug)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Application Viewset
     */
    coreApplicationsCreate({ applicationRequest }: CoreApplicationsCreateRequest): Observable<Application>
    coreApplicationsCreate({ applicationRequest }: CoreApplicationsCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<Application>>
    coreApplicationsCreate({ applicationRequest }: CoreApplicationsCreateRequest, opts?: OperationOpts): Observable<Application | AjaxResponse<Application>> {
        throwIfNullOrUndefined(applicationRequest, 'applicationRequest', 'coreApplicationsCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Application>({
            url: '/core/applications/',
            method: 'POST',
            headers,
            body: applicationRequest,
        }, opts?.responseOpts);
    };

    /**
     * Application Viewset
     */
    coreApplicationsDestroy({ slug }: CoreApplicationsDestroyRequest): Observable<void>
    coreApplicationsDestroy({ slug }: CoreApplicationsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    coreApplicationsDestroy({ slug }: CoreApplicationsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(slug, 'slug', 'coreApplicationsDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/core/applications/{slug}/'.replace('{slug}', encodeURI(slug)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Custom list method that checks Policy based access instead of guardian
     */
    coreApplicationsList({ group, metaDescription, metaLaunchUrl, metaPublisher, name, ordering, page, pageSize, search, slug, superuserFullList }: CoreApplicationsListRequest): Observable<PaginatedApplicationList>
    coreApplicationsList({ group, metaDescription, metaLaunchUrl, metaPublisher, name, ordering, page, pageSize, search, slug, superuserFullList }: CoreApplicationsListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedApplicationList>>
    coreApplicationsList({ group, metaDescription, metaLaunchUrl, metaPublisher, name, ordering, page, pageSize, search, slug, superuserFullList }: CoreApplicationsListRequest, opts?: OperationOpts): Observable<PaginatedApplicationList | AjaxResponse<PaginatedApplicationList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (group != null) { query['group'] = group; }
        if (metaDescription != null) { query['meta_description'] = metaDescription; }
        if (metaLaunchUrl != null) { query['meta_launch_url'] = metaLaunchUrl; }
        if (metaPublisher != null) { query['meta_publisher'] = metaPublisher; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (slug != null) { query['slug'] = slug; }
        if (superuserFullList != null) { query['superuser_full_list'] = superuserFullList; }

        return this.request<PaginatedApplicationList>({
            url: '/core/applications/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Metrics for application logins
     */
    coreApplicationsMetricsList({ slug }: CoreApplicationsMetricsListRequest): Observable<Array<Coordinate>>
    coreApplicationsMetricsList({ slug }: CoreApplicationsMetricsListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Coordinate>>>
    coreApplicationsMetricsList({ slug }: CoreApplicationsMetricsListRequest, opts?: OperationOpts): Observable<Array<Coordinate> | AjaxResponse<Array<Coordinate>>> {
        throwIfNullOrUndefined(slug, 'slug', 'coreApplicationsMetricsList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<Coordinate>>({
            url: '/core/applications/{slug}/metrics/'.replace('{slug}', encodeURI(slug)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Application Viewset
     */
    coreApplicationsPartialUpdate({ slug, patchedApplicationRequest }: CoreApplicationsPartialUpdateRequest): Observable<Application>
    coreApplicationsPartialUpdate({ slug, patchedApplicationRequest }: CoreApplicationsPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Application>>
    coreApplicationsPartialUpdate({ slug, patchedApplicationRequest }: CoreApplicationsPartialUpdateRequest, opts?: OperationOpts): Observable<Application | AjaxResponse<Application>> {
        throwIfNullOrUndefined(slug, 'slug', 'coreApplicationsPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Application>({
            url: '/core/applications/{slug}/'.replace('{slug}', encodeURI(slug)),
            method: 'PATCH',
            headers,
            body: patchedApplicationRequest,
        }, opts?.responseOpts);
    };

    /**
     * Application Viewset
     */
    coreApplicationsRetrieve({ slug }: CoreApplicationsRetrieveRequest): Observable<Application>
    coreApplicationsRetrieve({ slug }: CoreApplicationsRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<Application>>
    coreApplicationsRetrieve({ slug }: CoreApplicationsRetrieveRequest, opts?: OperationOpts): Observable<Application | AjaxResponse<Application>> {
        throwIfNullOrUndefined(slug, 'slug', 'coreApplicationsRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Application>({
            url: '/core/applications/{slug}/'.replace('{slug}', encodeURI(slug)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Set application icon
     */
    coreApplicationsSetIconCreate({ slug, file, clear }: CoreApplicationsSetIconCreateRequest): Observable<void>
    coreApplicationsSetIconCreate({ slug, file, clear }: CoreApplicationsSetIconCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    coreApplicationsSetIconCreate({ slug, file, clear }: CoreApplicationsSetIconCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(slug, 'slug', 'coreApplicationsSetIconCreate');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const formData = new FormData();
        if (file !== undefined) { formData.append('file', file as any); }
        if (clear !== undefined) { formData.append('clear', clear as any); }

        return this.request<void>({
            url: '/core/applications/{slug}/set_icon/'.replace('{slug}', encodeURI(slug)),
            method: 'POST',
            headers,
            body: formData,
        }, opts?.responseOpts);
    };

    /**
     * Set application icon (as URL)
     */
    coreApplicationsSetIconUrlCreate({ slug, filePathRequest }: CoreApplicationsSetIconUrlCreateRequest): Observable<void>
    coreApplicationsSetIconUrlCreate({ slug, filePathRequest }: CoreApplicationsSetIconUrlCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    coreApplicationsSetIconUrlCreate({ slug, filePathRequest }: CoreApplicationsSetIconUrlCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(slug, 'slug', 'coreApplicationsSetIconUrlCreate');
        throwIfNullOrUndefined(filePathRequest, 'filePathRequest', 'coreApplicationsSetIconUrlCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/core/applications/{slug}/set_icon_url/'.replace('{slug}', encodeURI(slug)),
            method: 'POST',
            headers,
            body: filePathRequest,
        }, opts?.responseOpts);
    };

    /**
     * Application Viewset
     */
    coreApplicationsUpdate({ slug, applicationRequest }: CoreApplicationsUpdateRequest): Observable<Application>
    coreApplicationsUpdate({ slug, applicationRequest }: CoreApplicationsUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Application>>
    coreApplicationsUpdate({ slug, applicationRequest }: CoreApplicationsUpdateRequest, opts?: OperationOpts): Observable<Application | AjaxResponse<Application>> {
        throwIfNullOrUndefined(slug, 'slug', 'coreApplicationsUpdate');
        throwIfNullOrUndefined(applicationRequest, 'applicationRequest', 'coreApplicationsUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Application>({
            url: '/core/applications/{slug}/'.replace('{slug}', encodeURI(slug)),
            method: 'PUT',
            headers,
            body: applicationRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    coreApplicationsUsedByList({ slug }: CoreApplicationsUsedByListRequest): Observable<Array<UsedBy>>
    coreApplicationsUsedByList({ slug }: CoreApplicationsUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    coreApplicationsUsedByList({ slug }: CoreApplicationsUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(slug, 'slug', 'coreApplicationsUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/core/applications/{slug}/used_by/'.replace('{slug}', encodeURI(slug)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatedSession Viewset
     */
    coreAuthenticatedSessionsDestroy({ uuid }: CoreAuthenticatedSessionsDestroyRequest): Observable<void>
    coreAuthenticatedSessionsDestroy({ uuid }: CoreAuthenticatedSessionsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    coreAuthenticatedSessionsDestroy({ uuid }: CoreAuthenticatedSessionsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'coreAuthenticatedSessionsDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/core/authenticated_sessions/{uuid}/'.replace('{uuid}', encodeURI(uuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatedSession Viewset
     */
    coreAuthenticatedSessionsList({ lastIp, lastUserAgent, ordering, page, pageSize, search, userUsername }: CoreAuthenticatedSessionsListRequest): Observable<PaginatedAuthenticatedSessionList>
    coreAuthenticatedSessionsList({ lastIp, lastUserAgent, ordering, page, pageSize, search, userUsername }: CoreAuthenticatedSessionsListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedAuthenticatedSessionList>>
    coreAuthenticatedSessionsList({ lastIp, lastUserAgent, ordering, page, pageSize, search, userUsername }: CoreAuthenticatedSessionsListRequest, opts?: OperationOpts): Observable<PaginatedAuthenticatedSessionList | AjaxResponse<PaginatedAuthenticatedSessionList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (lastIp != null) { query['last_ip'] = lastIp; }
        if (lastUserAgent != null) { query['last_user_agent'] = lastUserAgent; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (userUsername != null) { query['user__username'] = userUsername; }

        return this.request<PaginatedAuthenticatedSessionList>({
            url: '/core/authenticated_sessions/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatedSession Viewset
     */
    coreAuthenticatedSessionsRetrieve({ uuid }: CoreAuthenticatedSessionsRetrieveRequest): Observable<AuthenticatedSession>
    coreAuthenticatedSessionsRetrieve({ uuid }: CoreAuthenticatedSessionsRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatedSession>>
    coreAuthenticatedSessionsRetrieve({ uuid }: CoreAuthenticatedSessionsRetrieveRequest, opts?: OperationOpts): Observable<AuthenticatedSession | AjaxResponse<AuthenticatedSession>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'coreAuthenticatedSessionsRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatedSession>({
            url: '/core/authenticated_sessions/{uuid}/'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    coreAuthenticatedSessionsUsedByList({ uuid }: CoreAuthenticatedSessionsUsedByListRequest): Observable<Array<UsedBy>>
    coreAuthenticatedSessionsUsedByList({ uuid }: CoreAuthenticatedSessionsUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    coreAuthenticatedSessionsUsedByList({ uuid }: CoreAuthenticatedSessionsUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'coreAuthenticatedSessionsUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/core/authenticated_sessions/{uuid}/used_by/'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Add user to group
     */
    coreGroupsAddUserCreate({ groupUuid, userAccountRequest }: CoreGroupsAddUserCreateRequest): Observable<void>
    coreGroupsAddUserCreate({ groupUuid, userAccountRequest }: CoreGroupsAddUserCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    coreGroupsAddUserCreate({ groupUuid, userAccountRequest }: CoreGroupsAddUserCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(groupUuid, 'groupUuid', 'coreGroupsAddUserCreate');
        throwIfNullOrUndefined(userAccountRequest, 'userAccountRequest', 'coreGroupsAddUserCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/core/groups/{group_uuid}/add_user/'.replace('{group_uuid}', encodeURI(groupUuid)),
            method: 'POST',
            headers,
            body: userAccountRequest,
        }, opts?.responseOpts);
    };

    /**
     * Group Viewset
     */
    coreGroupsCreate({ groupRequest }: CoreGroupsCreateRequest): Observable<Group>
    coreGroupsCreate({ groupRequest }: CoreGroupsCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<Group>>
    coreGroupsCreate({ groupRequest }: CoreGroupsCreateRequest, opts?: OperationOpts): Observable<Group | AjaxResponse<Group>> {
        throwIfNullOrUndefined(groupRequest, 'groupRequest', 'coreGroupsCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Group>({
            url: '/core/groups/',
            method: 'POST',
            headers,
            body: groupRequest,
        }, opts?.responseOpts);
    };

    /**
     * Group Viewset
     */
    coreGroupsDestroy({ groupUuid }: CoreGroupsDestroyRequest): Observable<void>
    coreGroupsDestroy({ groupUuid }: CoreGroupsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    coreGroupsDestroy({ groupUuid }: CoreGroupsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(groupUuid, 'groupUuid', 'coreGroupsDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/core/groups/{group_uuid}/'.replace('{group_uuid}', encodeURI(groupUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Group Viewset
     */
    coreGroupsList({ attributes, isSuperuser, membersByPk, membersByUsername, name, ordering, page, pageSize, search }: CoreGroupsListRequest): Observable<PaginatedGroupList>
    coreGroupsList({ attributes, isSuperuser, membersByPk, membersByUsername, name, ordering, page, pageSize, search }: CoreGroupsListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedGroupList>>
    coreGroupsList({ attributes, isSuperuser, membersByPk, membersByUsername, name, ordering, page, pageSize, search }: CoreGroupsListRequest, opts?: OperationOpts): Observable<PaginatedGroupList | AjaxResponse<PaginatedGroupList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (attributes != null) { query['attributes'] = attributes; }
        if (isSuperuser != null) { query['is_superuser'] = isSuperuser; }
        if (membersByPk != null) { query['members_by_pk'] = membersByPk; }
        if (membersByUsername != null) { query['members_by_username'] = membersByUsername; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedGroupList>({
            url: '/core/groups/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Group Viewset
     */
    coreGroupsPartialUpdate({ groupUuid, patchedGroupRequest }: CoreGroupsPartialUpdateRequest): Observable<Group>
    coreGroupsPartialUpdate({ groupUuid, patchedGroupRequest }: CoreGroupsPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Group>>
    coreGroupsPartialUpdate({ groupUuid, patchedGroupRequest }: CoreGroupsPartialUpdateRequest, opts?: OperationOpts): Observable<Group | AjaxResponse<Group>> {
        throwIfNullOrUndefined(groupUuid, 'groupUuid', 'coreGroupsPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Group>({
            url: '/core/groups/{group_uuid}/'.replace('{group_uuid}', encodeURI(groupUuid)),
            method: 'PATCH',
            headers,
            body: patchedGroupRequest,
        }, opts?.responseOpts);
    };

    /**
     * Add user to group
     */
    coreGroupsRemoveUserCreate({ groupUuid, userAccountRequest }: CoreGroupsRemoveUserCreateRequest): Observable<void>
    coreGroupsRemoveUserCreate({ groupUuid, userAccountRequest }: CoreGroupsRemoveUserCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    coreGroupsRemoveUserCreate({ groupUuid, userAccountRequest }: CoreGroupsRemoveUserCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(groupUuid, 'groupUuid', 'coreGroupsRemoveUserCreate');
        throwIfNullOrUndefined(userAccountRequest, 'userAccountRequest', 'coreGroupsRemoveUserCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/core/groups/{group_uuid}/remove_user/'.replace('{group_uuid}', encodeURI(groupUuid)),
            method: 'POST',
            headers,
            body: userAccountRequest,
        }, opts?.responseOpts);
    };

    /**
     * Group Viewset
     */
    coreGroupsRetrieve({ groupUuid }: CoreGroupsRetrieveRequest): Observable<Group>
    coreGroupsRetrieve({ groupUuid }: CoreGroupsRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<Group>>
    coreGroupsRetrieve({ groupUuid }: CoreGroupsRetrieveRequest, opts?: OperationOpts): Observable<Group | AjaxResponse<Group>> {
        throwIfNullOrUndefined(groupUuid, 'groupUuid', 'coreGroupsRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Group>({
            url: '/core/groups/{group_uuid}/'.replace('{group_uuid}', encodeURI(groupUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Group Viewset
     */
    coreGroupsUpdate({ groupUuid, groupRequest }: CoreGroupsUpdateRequest): Observable<Group>
    coreGroupsUpdate({ groupUuid, groupRequest }: CoreGroupsUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Group>>
    coreGroupsUpdate({ groupUuid, groupRequest }: CoreGroupsUpdateRequest, opts?: OperationOpts): Observable<Group | AjaxResponse<Group>> {
        throwIfNullOrUndefined(groupUuid, 'groupUuid', 'coreGroupsUpdate');
        throwIfNullOrUndefined(groupRequest, 'groupRequest', 'coreGroupsUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Group>({
            url: '/core/groups/{group_uuid}/'.replace('{group_uuid}', encodeURI(groupUuid)),
            method: 'PUT',
            headers,
            body: groupRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    coreGroupsUsedByList({ groupUuid }: CoreGroupsUsedByListRequest): Observable<Array<UsedBy>>
    coreGroupsUsedByList({ groupUuid }: CoreGroupsUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    coreGroupsUsedByList({ groupUuid }: CoreGroupsUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(groupUuid, 'groupUuid', 'coreGroupsUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/core/groups/{group_uuid}/used_by/'.replace('{group_uuid}', encodeURI(groupUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Tenant Viewset
     */
    coreTenantsCreate({ tenantRequest }: CoreTenantsCreateRequest): Observable<Tenant>
    coreTenantsCreate({ tenantRequest }: CoreTenantsCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<Tenant>>
    coreTenantsCreate({ tenantRequest }: CoreTenantsCreateRequest, opts?: OperationOpts): Observable<Tenant | AjaxResponse<Tenant>> {
        throwIfNullOrUndefined(tenantRequest, 'tenantRequest', 'coreTenantsCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Tenant>({
            url: '/core/tenants/',
            method: 'POST',
            headers,
            body: tenantRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get current tenant
     */
    coreTenantsCurrentRetrieve(): Observable<CurrentTenant>
    coreTenantsCurrentRetrieve(opts?: OperationOpts): Observable<AjaxResponse<CurrentTenant>>
    coreTenantsCurrentRetrieve(opts?: OperationOpts): Observable<CurrentTenant | AjaxResponse<CurrentTenant>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<CurrentTenant>({
            url: '/core/tenants/current/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Tenant Viewset
     */
    coreTenantsDestroy({ tenantUuid }: CoreTenantsDestroyRequest): Observable<void>
    coreTenantsDestroy({ tenantUuid }: CoreTenantsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    coreTenantsDestroy({ tenantUuid }: CoreTenantsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(tenantUuid, 'tenantUuid', 'coreTenantsDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/core/tenants/{tenant_uuid}/'.replace('{tenant_uuid}', encodeURI(tenantUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Tenant Viewset
     */
    coreTenantsList({ brandingFavicon, brandingLogo, brandingTitle, _default, domain, eventRetention, flowAuthentication, flowDeviceCode, flowInvalidation, flowRecovery, flowUnenrollment, flowUserSettings, ordering, page, pageSize, search, tenantUuid, webCertificate }: CoreTenantsListRequest): Observable<PaginatedTenantList>
    coreTenantsList({ brandingFavicon, brandingLogo, brandingTitle, _default, domain, eventRetention, flowAuthentication, flowDeviceCode, flowInvalidation, flowRecovery, flowUnenrollment, flowUserSettings, ordering, page, pageSize, search, tenantUuid, webCertificate }: CoreTenantsListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedTenantList>>
    coreTenantsList({ brandingFavicon, brandingLogo, brandingTitle, _default, domain, eventRetention, flowAuthentication, flowDeviceCode, flowInvalidation, flowRecovery, flowUnenrollment, flowUserSettings, ordering, page, pageSize, search, tenantUuid, webCertificate }: CoreTenantsListRequest, opts?: OperationOpts): Observable<PaginatedTenantList | AjaxResponse<PaginatedTenantList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (brandingFavicon != null) { query['branding_favicon'] = brandingFavicon; }
        if (brandingLogo != null) { query['branding_logo'] = brandingLogo; }
        if (brandingTitle != null) { query['branding_title'] = brandingTitle; }
        if (_default != null) { query['default'] = _default; }
        if (domain != null) { query['domain'] = domain; }
        if (eventRetention != null) { query['event_retention'] = eventRetention; }
        if (flowAuthentication != null) { query['flow_authentication'] = flowAuthentication; }
        if (flowDeviceCode != null) { query['flow_device_code'] = flowDeviceCode; }
        if (flowInvalidation != null) { query['flow_invalidation'] = flowInvalidation; }
        if (flowRecovery != null) { query['flow_recovery'] = flowRecovery; }
        if (flowUnenrollment != null) { query['flow_unenrollment'] = flowUnenrollment; }
        if (flowUserSettings != null) { query['flow_user_settings'] = flowUserSettings; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (tenantUuid != null) { query['tenant_uuid'] = tenantUuid; }
        if (webCertificate != null) { query['web_certificate'] = webCertificate; }

        return this.request<PaginatedTenantList>({
            url: '/core/tenants/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Tenant Viewset
     */
    coreTenantsPartialUpdate({ tenantUuid, patchedTenantRequest }: CoreTenantsPartialUpdateRequest): Observable<Tenant>
    coreTenantsPartialUpdate({ tenantUuid, patchedTenantRequest }: CoreTenantsPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Tenant>>
    coreTenantsPartialUpdate({ tenantUuid, patchedTenantRequest }: CoreTenantsPartialUpdateRequest, opts?: OperationOpts): Observable<Tenant | AjaxResponse<Tenant>> {
        throwIfNullOrUndefined(tenantUuid, 'tenantUuid', 'coreTenantsPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Tenant>({
            url: '/core/tenants/{tenant_uuid}/'.replace('{tenant_uuid}', encodeURI(tenantUuid)),
            method: 'PATCH',
            headers,
            body: patchedTenantRequest,
        }, opts?.responseOpts);
    };

    /**
     * Tenant Viewset
     */
    coreTenantsRetrieve({ tenantUuid }: CoreTenantsRetrieveRequest): Observable<Tenant>
    coreTenantsRetrieve({ tenantUuid }: CoreTenantsRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<Tenant>>
    coreTenantsRetrieve({ tenantUuid }: CoreTenantsRetrieveRequest, opts?: OperationOpts): Observable<Tenant | AjaxResponse<Tenant>> {
        throwIfNullOrUndefined(tenantUuid, 'tenantUuid', 'coreTenantsRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Tenant>({
            url: '/core/tenants/{tenant_uuid}/'.replace('{tenant_uuid}', encodeURI(tenantUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Tenant Viewset
     */
    coreTenantsUpdate({ tenantUuid, tenantRequest }: CoreTenantsUpdateRequest): Observable<Tenant>
    coreTenantsUpdate({ tenantUuid, tenantRequest }: CoreTenantsUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Tenant>>
    coreTenantsUpdate({ tenantUuid, tenantRequest }: CoreTenantsUpdateRequest, opts?: OperationOpts): Observable<Tenant | AjaxResponse<Tenant>> {
        throwIfNullOrUndefined(tenantUuid, 'tenantUuid', 'coreTenantsUpdate');
        throwIfNullOrUndefined(tenantRequest, 'tenantRequest', 'coreTenantsUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Tenant>({
            url: '/core/tenants/{tenant_uuid}/'.replace('{tenant_uuid}', encodeURI(tenantUuid)),
            method: 'PUT',
            headers,
            body: tenantRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    coreTenantsUsedByList({ tenantUuid }: CoreTenantsUsedByListRequest): Observable<Array<UsedBy>>
    coreTenantsUsedByList({ tenantUuid }: CoreTenantsUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    coreTenantsUsedByList({ tenantUuid }: CoreTenantsUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(tenantUuid, 'tenantUuid', 'coreTenantsUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/core/tenants/{tenant_uuid}/used_by/'.replace('{tenant_uuid}', encodeURI(tenantUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Token Viewset
     */
    coreTokensCreate({ tokenRequest }: CoreTokensCreateRequest): Observable<Token>
    coreTokensCreate({ tokenRequest }: CoreTokensCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<Token>>
    coreTokensCreate({ tokenRequest }: CoreTokensCreateRequest, opts?: OperationOpts): Observable<Token | AjaxResponse<Token>> {
        throwIfNullOrUndefined(tokenRequest, 'tokenRequest', 'coreTokensCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Token>({
            url: '/core/tokens/',
            method: 'POST',
            headers,
            body: tokenRequest,
        }, opts?.responseOpts);
    };

    /**
     * Token Viewset
     */
    coreTokensDestroy({ identifier }: CoreTokensDestroyRequest): Observable<void>
    coreTokensDestroy({ identifier }: CoreTokensDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    coreTokensDestroy({ identifier }: CoreTokensDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(identifier, 'identifier', 'coreTokensDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/core/tokens/{identifier}/'.replace('{identifier}', encodeURI(identifier)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Token Viewset
     */
    coreTokensList({ description, expires, expiring, identifier, intent, managed, ordering, page, pageSize, search, userUsername }: CoreTokensListRequest): Observable<PaginatedTokenList>
    coreTokensList({ description, expires, expiring, identifier, intent, managed, ordering, page, pageSize, search, userUsername }: CoreTokensListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedTokenList>>
    coreTokensList({ description, expires, expiring, identifier, intent, managed, ordering, page, pageSize, search, userUsername }: CoreTokensListRequest, opts?: OperationOpts): Observable<PaginatedTokenList | AjaxResponse<PaginatedTokenList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (description != null) { query['description'] = description; }
        if (expires != null) { query['expires'] = (expires as any).toISOString(); }
        if (expiring != null) { query['expiring'] = expiring; }
        if (identifier != null) { query['identifier'] = identifier; }
        if (intent != null) { query['intent'] = intent; }
        if (managed != null) { query['managed'] = managed; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (userUsername != null) { query['user__username'] = userUsername; }

        return this.request<PaginatedTokenList>({
            url: '/core/tokens/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Token Viewset
     */
    coreTokensPartialUpdate({ identifier, patchedTokenRequest }: CoreTokensPartialUpdateRequest): Observable<Token>
    coreTokensPartialUpdate({ identifier, patchedTokenRequest }: CoreTokensPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Token>>
    coreTokensPartialUpdate({ identifier, patchedTokenRequest }: CoreTokensPartialUpdateRequest, opts?: OperationOpts): Observable<Token | AjaxResponse<Token>> {
        throwIfNullOrUndefined(identifier, 'identifier', 'coreTokensPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Token>({
            url: '/core/tokens/{identifier}/'.replace('{identifier}', encodeURI(identifier)),
            method: 'PATCH',
            headers,
            body: patchedTokenRequest,
        }, opts?.responseOpts);
    };

    /**
     * Token Viewset
     */
    coreTokensRetrieve({ identifier }: CoreTokensRetrieveRequest): Observable<Token>
    coreTokensRetrieve({ identifier }: CoreTokensRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<Token>>
    coreTokensRetrieve({ identifier }: CoreTokensRetrieveRequest, opts?: OperationOpts): Observable<Token | AjaxResponse<Token>> {
        throwIfNullOrUndefined(identifier, 'identifier', 'coreTokensRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Token>({
            url: '/core/tokens/{identifier}/'.replace('{identifier}', encodeURI(identifier)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Set token key. Action is logged as event. `authentik_core.set_token_key` permission is required.
     */
    coreTokensSetKeyCreate({ identifier, tokenSetKeyRequest }: CoreTokensSetKeyCreateRequest): Observable<void>
    coreTokensSetKeyCreate({ identifier, tokenSetKeyRequest }: CoreTokensSetKeyCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    coreTokensSetKeyCreate({ identifier, tokenSetKeyRequest }: CoreTokensSetKeyCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(identifier, 'identifier', 'coreTokensSetKeyCreate');
        throwIfNullOrUndefined(tokenSetKeyRequest, 'tokenSetKeyRequest', 'coreTokensSetKeyCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/core/tokens/{identifier}/set_key/'.replace('{identifier}', encodeURI(identifier)),
            method: 'POST',
            headers,
            body: tokenSetKeyRequest,
        }, opts?.responseOpts);
    };

    /**
     * Token Viewset
     */
    coreTokensUpdate({ identifier, tokenRequest }: CoreTokensUpdateRequest): Observable<Token>
    coreTokensUpdate({ identifier, tokenRequest }: CoreTokensUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Token>>
    coreTokensUpdate({ identifier, tokenRequest }: CoreTokensUpdateRequest, opts?: OperationOpts): Observable<Token | AjaxResponse<Token>> {
        throwIfNullOrUndefined(identifier, 'identifier', 'coreTokensUpdate');
        throwIfNullOrUndefined(tokenRequest, 'tokenRequest', 'coreTokensUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Token>({
            url: '/core/tokens/{identifier}/'.replace('{identifier}', encodeURI(identifier)),
            method: 'PUT',
            headers,
            body: tokenRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    coreTokensUsedByList({ identifier }: CoreTokensUsedByListRequest): Observable<Array<UsedBy>>
    coreTokensUsedByList({ identifier }: CoreTokensUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    coreTokensUsedByList({ identifier }: CoreTokensUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(identifier, 'identifier', 'coreTokensUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/core/tokens/{identifier}/used_by/'.replace('{identifier}', encodeURI(identifier)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Return token key and log access
     */
    coreTokensViewKeyRetrieve({ identifier }: CoreTokensViewKeyRetrieveRequest): Observable<TokenView>
    coreTokensViewKeyRetrieve({ identifier }: CoreTokensViewKeyRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<TokenView>>
    coreTokensViewKeyRetrieve({ identifier }: CoreTokensViewKeyRetrieveRequest, opts?: OperationOpts): Observable<TokenView | AjaxResponse<TokenView>> {
        throwIfNullOrUndefined(identifier, 'identifier', 'coreTokensViewKeyRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<TokenView>({
            url: '/core/tokens/{identifier}/view_key/'.replace('{identifier}', encodeURI(identifier)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Convert data into a blueprint, validate it and apply it
     */
    coreTransactionalApplicationsUpdate({ transactionApplicationRequest }: CoreTransactionalApplicationsUpdateRequest): Observable<TransactionApplicationResponse>
    coreTransactionalApplicationsUpdate({ transactionApplicationRequest }: CoreTransactionalApplicationsUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<TransactionApplicationResponse>>
    coreTransactionalApplicationsUpdate({ transactionApplicationRequest }: CoreTransactionalApplicationsUpdateRequest, opts?: OperationOpts): Observable<TransactionApplicationResponse | AjaxResponse<TransactionApplicationResponse>> {
        throwIfNullOrUndefined(transactionApplicationRequest, 'transactionApplicationRequest', 'coreTransactionalApplicationsUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<TransactionApplicationResponse>({
            url: '/core/transactional/applications/',
            method: 'PUT',
            headers,
            body: transactionApplicationRequest,
        }, opts?.responseOpts);
    };

    /**
     * UserConsent Viewset
     */
    coreUserConsentDestroy({ id }: CoreUserConsentDestroyRequest): Observable<void>
    coreUserConsentDestroy({ id }: CoreUserConsentDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    coreUserConsentDestroy({ id }: CoreUserConsentDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'coreUserConsentDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/core/user_consent/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * UserConsent Viewset
     */
    coreUserConsentList({ application, ordering, page, pageSize, search, user }: CoreUserConsentListRequest): Observable<PaginatedUserConsentList>
    coreUserConsentList({ application, ordering, page, pageSize, search, user }: CoreUserConsentListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedUserConsentList>>
    coreUserConsentList({ application, ordering, page, pageSize, search, user }: CoreUserConsentListRequest, opts?: OperationOpts): Observable<PaginatedUserConsentList | AjaxResponse<PaginatedUserConsentList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (application != null) { query['application'] = application; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (user != null) { query['user'] = user; }

        return this.request<PaginatedUserConsentList>({
            url: '/core/user_consent/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * UserConsent Viewset
     */
    coreUserConsentRetrieve({ id }: CoreUserConsentRetrieveRequest): Observable<UserConsent>
    coreUserConsentRetrieve({ id }: CoreUserConsentRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<UserConsent>>
    coreUserConsentRetrieve({ id }: CoreUserConsentRetrieveRequest, opts?: OperationOpts): Observable<UserConsent | AjaxResponse<UserConsent>> {
        throwIfNullOrUndefined(id, 'id', 'coreUserConsentRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserConsent>({
            url: '/core/user_consent/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    coreUserConsentUsedByList({ id }: CoreUserConsentUsedByListRequest): Observable<Array<UsedBy>>
    coreUserConsentUsedByList({ id }: CoreUserConsentUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    coreUserConsentUsedByList({ id }: CoreUserConsentUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'coreUserConsentUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/core/user_consent/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * User Viewset
     */
    coreUsersCreate({ userRequest }: CoreUsersCreateRequest): Observable<User>
    coreUsersCreate({ userRequest }: CoreUsersCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<User>>
    coreUsersCreate({ userRequest }: CoreUsersCreateRequest, opts?: OperationOpts): Observable<User | AjaxResponse<User>> {
        throwIfNullOrUndefined(userRequest, 'userRequest', 'coreUsersCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<User>({
            url: '/core/users/',
            method: 'POST',
            headers,
            body: userRequest,
        }, opts?.responseOpts);
    };

    /**
     * User Viewset
     */
    coreUsersDestroy({ id }: CoreUsersDestroyRequest): Observable<void>
    coreUsersDestroy({ id }: CoreUsersDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    coreUsersDestroy({ id }: CoreUsersDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'coreUsersDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/core/users/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Impersonate a user
     */
    coreUsersImpersonateCreate({ id }: CoreUsersImpersonateCreateRequest): Observable<void>
    coreUsersImpersonateCreate({ id }: CoreUsersImpersonateCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    coreUsersImpersonateCreate({ id }: CoreUsersImpersonateCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'coreUsersImpersonateCreate');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/core/users/{id}/impersonate/'.replace('{id}', encodeURI(id)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * End Impersonation a user
     */
    coreUsersImpersonateEndRetrieve(): Observable<void>
    coreUsersImpersonateEndRetrieve(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    coreUsersImpersonateEndRetrieve(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/core/users/impersonate_end/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * User Viewset
     */
    coreUsersList({ attributes, email, groupsByName, groupsByPk, isActive, isSuperuser, name, ordering, page, pageSize, path, pathStartswith, search, type, username, uuid }: CoreUsersListRequest): Observable<PaginatedUserList>
    coreUsersList({ attributes, email, groupsByName, groupsByPk, isActive, isSuperuser, name, ordering, page, pageSize, path, pathStartswith, search, type, username, uuid }: CoreUsersListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedUserList>>
    coreUsersList({ attributes, email, groupsByName, groupsByPk, isActive, isSuperuser, name, ordering, page, pageSize, path, pathStartswith, search, type, username, uuid }: CoreUsersListRequest, opts?: OperationOpts): Observable<PaginatedUserList | AjaxResponse<PaginatedUserList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (attributes != null) { query['attributes'] = attributes; }
        if (email != null) { query['email'] = email; }
        if (groupsByName != null) { query['groups_by_name'] = groupsByName; }
        if (groupsByPk != null) { query['groups_by_pk'] = groupsByPk; }
        if (isActive != null) { query['is_active'] = isActive; }
        if (isSuperuser != null) { query['is_superuser'] = isSuperuser; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (path != null) { query['path'] = path; }
        if (pathStartswith != null) { query['path_startswith'] = pathStartswith; }
        if (search != null) { query['search'] = search; }
        if (type != null) { query['type'] = type; }
        if (username != null) { query['username'] = username; }
        if (uuid != null) { query['uuid'] = uuid; }

        return this.request<PaginatedUserList>({
            url: '/core/users/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get information about current user
     */
    coreUsersMeRetrieve(): Observable<SessionUser>
    coreUsersMeRetrieve(opts?: OperationOpts): Observable<AjaxResponse<SessionUser>>
    coreUsersMeRetrieve(opts?: OperationOpts): Observable<SessionUser | AjaxResponse<SessionUser>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SessionUser>({
            url: '/core/users/me/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * User metrics per 1h
     */
    coreUsersMetricsRetrieve({ id }: CoreUsersMetricsRetrieveRequest): Observable<UserMetrics>
    coreUsersMetricsRetrieve({ id }: CoreUsersMetricsRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<UserMetrics>>
    coreUsersMetricsRetrieve({ id }: CoreUsersMetricsRetrieveRequest, opts?: OperationOpts): Observable<UserMetrics | AjaxResponse<UserMetrics>> {
        throwIfNullOrUndefined(id, 'id', 'coreUsersMetricsRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserMetrics>({
            url: '/core/users/{id}/metrics/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * User Viewset
     */
    coreUsersPartialUpdate({ id, patchedUserRequest }: CoreUsersPartialUpdateRequest): Observable<User>
    coreUsersPartialUpdate({ id, patchedUserRequest }: CoreUsersPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<User>>
    coreUsersPartialUpdate({ id, patchedUserRequest }: CoreUsersPartialUpdateRequest, opts?: OperationOpts): Observable<User | AjaxResponse<User>> {
        throwIfNullOrUndefined(id, 'id', 'coreUsersPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<User>({
            url: '/core/users/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedUserRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get all user paths
     */
    coreUsersPathsRetrieve({ search }: CoreUsersPathsRetrieveRequest): Observable<UserPath>
    coreUsersPathsRetrieve({ search }: CoreUsersPathsRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<UserPath>>
    coreUsersPathsRetrieve({ search }: CoreUsersPathsRetrieveRequest, opts?: OperationOpts): Observable<UserPath | AjaxResponse<UserPath>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (search != null) { query['search'] = search; }

        return this.request<UserPath>({
            url: '/core/users/paths/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Create a temporary link that a user can use to recover their accounts
     */
    coreUsersRecoveryEmailRetrieve({ emailStage, id }: CoreUsersRecoveryEmailRetrieveRequest): Observable<void>
    coreUsersRecoveryEmailRetrieve({ emailStage, id }: CoreUsersRecoveryEmailRetrieveRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    coreUsersRecoveryEmailRetrieve({ emailStage, id }: CoreUsersRecoveryEmailRetrieveRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(emailStage, 'emailStage', 'coreUsersRecoveryEmailRetrieve');
        throwIfNullOrUndefined(id, 'id', 'coreUsersRecoveryEmailRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'email_stage': emailStage,
        };

        return this.request<void>({
            url: '/core/users/{id}/recovery_email/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Create a temporary link that a user can use to recover their accounts
     */
    coreUsersRecoveryRetrieve({ id }: CoreUsersRecoveryRetrieveRequest): Observable<Link>
    coreUsersRecoveryRetrieve({ id }: CoreUsersRecoveryRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<Link>>
    coreUsersRecoveryRetrieve({ id }: CoreUsersRecoveryRetrieveRequest, opts?: OperationOpts): Observable<Link | AjaxResponse<Link>> {
        throwIfNullOrUndefined(id, 'id', 'coreUsersRecoveryRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Link>({
            url: '/core/users/{id}/recovery/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * User Viewset
     */
    coreUsersRetrieve({ id }: CoreUsersRetrieveRequest): Observable<User>
    coreUsersRetrieve({ id }: CoreUsersRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<User>>
    coreUsersRetrieve({ id }: CoreUsersRetrieveRequest, opts?: OperationOpts): Observable<User | AjaxResponse<User>> {
        throwIfNullOrUndefined(id, 'id', 'coreUsersRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<User>({
            url: '/core/users/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create a new user account that is marked as a service account
     */
    coreUsersServiceAccountCreate({ userServiceAccountRequest }: CoreUsersServiceAccountCreateRequest): Observable<UserServiceAccountResponse>
    coreUsersServiceAccountCreate({ userServiceAccountRequest }: CoreUsersServiceAccountCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<UserServiceAccountResponse>>
    coreUsersServiceAccountCreate({ userServiceAccountRequest }: CoreUsersServiceAccountCreateRequest, opts?: OperationOpts): Observable<UserServiceAccountResponse | AjaxResponse<UserServiceAccountResponse>> {
        throwIfNullOrUndefined(userServiceAccountRequest, 'userServiceAccountRequest', 'coreUsersServiceAccountCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserServiceAccountResponse>({
            url: '/core/users/service_account/',
            method: 'POST',
            headers,
            body: userServiceAccountRequest,
        }, opts?.responseOpts);
    };

    /**
     * Set password for user
     */
    coreUsersSetPasswordCreate({ id, userPasswordSetRequest }: CoreUsersSetPasswordCreateRequest): Observable<void>
    coreUsersSetPasswordCreate({ id, userPasswordSetRequest }: CoreUsersSetPasswordCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    coreUsersSetPasswordCreate({ id, userPasswordSetRequest }: CoreUsersSetPasswordCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'coreUsersSetPasswordCreate');
        throwIfNullOrUndefined(userPasswordSetRequest, 'userPasswordSetRequest', 'coreUsersSetPasswordCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/core/users/{id}/set_password/'.replace('{id}', encodeURI(id)),
            method: 'POST',
            headers,
            body: userPasswordSetRequest,
        }, opts?.responseOpts);
    };

    /**
     * User Viewset
     */
    coreUsersUpdate({ id, userRequest }: CoreUsersUpdateRequest): Observable<User>
    coreUsersUpdate({ id, userRequest }: CoreUsersUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<User>>
    coreUsersUpdate({ id, userRequest }: CoreUsersUpdateRequest, opts?: OperationOpts): Observable<User | AjaxResponse<User>> {
        throwIfNullOrUndefined(id, 'id', 'coreUsersUpdate');
        throwIfNullOrUndefined(userRequest, 'userRequest', 'coreUsersUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<User>({
            url: '/core/users/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: userRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    coreUsersUsedByList({ id }: CoreUsersUsedByListRequest): Observable<Array<UsedBy>>
    coreUsersUsedByList({ id }: CoreUsersUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    coreUsersUsedByList({ id }: CoreUsersUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'coreUsersUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/core/users/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum CoreTokensListIntentEnum {
    Api = 'api',
    AppPassword = 'app_password',
    Recovery = 'recovery',
    Verification = 'verification'
}
/**
 * @export
 * @enum {string}
 */
export enum CoreUsersListTypeEnum {
    External = 'external',
    Internal = 'internal',
    InternalServiceAccount = 'internal_service_account',
    ServiceAccount = 'service_account'
}
