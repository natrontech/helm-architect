// tslint:disable
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2023.10.2
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    GenericError,
    InstallID,
    License,
    LicenseForecast,
    LicenseRequest,
    LicenseSummary,
    PaginatedLicenseList,
    PatchedLicenseRequest,
    UsedBy,
    ValidationError,
} from '../models';

export interface EnterpriseLicenseCreateRequest {
    licenseRequest: LicenseRequest;
}

export interface EnterpriseLicenseDestroyRequest {
    licenseUuid: string;
}

export interface EnterpriseLicenseListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface EnterpriseLicensePartialUpdateRequest {
    licenseUuid: string;
    patchedLicenseRequest?: PatchedLicenseRequest;
}

export interface EnterpriseLicenseRetrieveRequest {
    licenseUuid: string;
}

export interface EnterpriseLicenseUpdateRequest {
    licenseUuid: string;
    licenseRequest: LicenseRequest;
}

export interface EnterpriseLicenseUsedByListRequest {
    licenseUuid: string;
}

/**
 * no description
 */
export class EnterpriseApi extends BaseAPI {

    /**
     * License Viewset
     */
    enterpriseLicenseCreate({ licenseRequest }: EnterpriseLicenseCreateRequest): Observable<License>
    enterpriseLicenseCreate({ licenseRequest }: EnterpriseLicenseCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<License>>
    enterpriseLicenseCreate({ licenseRequest }: EnterpriseLicenseCreateRequest, opts?: OperationOpts): Observable<License | AjaxResponse<License>> {
        throwIfNullOrUndefined(licenseRequest, 'licenseRequest', 'enterpriseLicenseCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<License>({
            url: '/enterprise/license/',
            method: 'POST',
            headers,
            body: licenseRequest,
        }, opts?.responseOpts);
    };

    /**
     * License Viewset
     */
    enterpriseLicenseDestroy({ licenseUuid }: EnterpriseLicenseDestroyRequest): Observable<void>
    enterpriseLicenseDestroy({ licenseUuid }: EnterpriseLicenseDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    enterpriseLicenseDestroy({ licenseUuid }: EnterpriseLicenseDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(licenseUuid, 'licenseUuid', 'enterpriseLicenseDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/enterprise/license/{license_uuid}/'.replace('{license_uuid}', encodeURI(licenseUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Forecast how many users will be required in a year
     */
    enterpriseLicenseForecastRetrieve(): Observable<LicenseForecast>
    enterpriseLicenseForecastRetrieve(opts?: OperationOpts): Observable<AjaxResponse<LicenseForecast>>
    enterpriseLicenseForecastRetrieve(opts?: OperationOpts): Observable<LicenseForecast | AjaxResponse<LicenseForecast>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<LicenseForecast>({
            url: '/enterprise/license/forecast/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get install_id
     */
    enterpriseLicenseGetInstallIdRetrieve(): Observable<InstallID>
    enterpriseLicenseGetInstallIdRetrieve(opts?: OperationOpts): Observable<AjaxResponse<InstallID>>
    enterpriseLicenseGetInstallIdRetrieve(opts?: OperationOpts): Observable<InstallID | AjaxResponse<InstallID>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<InstallID>({
            url: '/enterprise/license/get_install_id/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * License Viewset
     */
    enterpriseLicenseList({ name, ordering, page, pageSize, search }: EnterpriseLicenseListRequest): Observable<PaginatedLicenseList>
    enterpriseLicenseList({ name, ordering, page, pageSize, search }: EnterpriseLicenseListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedLicenseList>>
    enterpriseLicenseList({ name, ordering, page, pageSize, search }: EnterpriseLicenseListRequest, opts?: OperationOpts): Observable<PaginatedLicenseList | AjaxResponse<PaginatedLicenseList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedLicenseList>({
            url: '/enterprise/license/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * License Viewset
     */
    enterpriseLicensePartialUpdate({ licenseUuid, patchedLicenseRequest }: EnterpriseLicensePartialUpdateRequest): Observable<License>
    enterpriseLicensePartialUpdate({ licenseUuid, patchedLicenseRequest }: EnterpriseLicensePartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<License>>
    enterpriseLicensePartialUpdate({ licenseUuid, patchedLicenseRequest }: EnterpriseLicensePartialUpdateRequest, opts?: OperationOpts): Observable<License | AjaxResponse<License>> {
        throwIfNullOrUndefined(licenseUuid, 'licenseUuid', 'enterpriseLicensePartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<License>({
            url: '/enterprise/license/{license_uuid}/'.replace('{license_uuid}', encodeURI(licenseUuid)),
            method: 'PATCH',
            headers,
            body: patchedLicenseRequest,
        }, opts?.responseOpts);
    };

    /**
     * License Viewset
     */
    enterpriseLicenseRetrieve({ licenseUuid }: EnterpriseLicenseRetrieveRequest): Observable<License>
    enterpriseLicenseRetrieve({ licenseUuid }: EnterpriseLicenseRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<License>>
    enterpriseLicenseRetrieve({ licenseUuid }: EnterpriseLicenseRetrieveRequest, opts?: OperationOpts): Observable<License | AjaxResponse<License>> {
        throwIfNullOrUndefined(licenseUuid, 'licenseUuid', 'enterpriseLicenseRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<License>({
            url: '/enterprise/license/{license_uuid}/'.replace('{license_uuid}', encodeURI(licenseUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get the total license status
     */
    enterpriseLicenseSummaryRetrieve(): Observable<LicenseSummary>
    enterpriseLicenseSummaryRetrieve(opts?: OperationOpts): Observable<AjaxResponse<LicenseSummary>>
    enterpriseLicenseSummaryRetrieve(opts?: OperationOpts): Observable<LicenseSummary | AjaxResponse<LicenseSummary>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<LicenseSummary>({
            url: '/enterprise/license/summary/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * License Viewset
     */
    enterpriseLicenseUpdate({ licenseUuid, licenseRequest }: EnterpriseLicenseUpdateRequest): Observable<License>
    enterpriseLicenseUpdate({ licenseUuid, licenseRequest }: EnterpriseLicenseUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<License>>
    enterpriseLicenseUpdate({ licenseUuid, licenseRequest }: EnterpriseLicenseUpdateRequest, opts?: OperationOpts): Observable<License | AjaxResponse<License>> {
        throwIfNullOrUndefined(licenseUuid, 'licenseUuid', 'enterpriseLicenseUpdate');
        throwIfNullOrUndefined(licenseRequest, 'licenseRequest', 'enterpriseLicenseUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<License>({
            url: '/enterprise/license/{license_uuid}/'.replace('{license_uuid}', encodeURI(licenseUuid)),
            method: 'PUT',
            headers,
            body: licenseRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    enterpriseLicenseUsedByList({ licenseUuid }: EnterpriseLicenseUsedByListRequest): Observable<Array<UsedBy>>
    enterpriseLicenseUsedByList({ licenseUuid }: EnterpriseLicenseUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    enterpriseLicenseUsedByList({ licenseUuid }: EnterpriseLicenseUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(licenseUuid, 'licenseUuid', 'enterpriseLicenseUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/enterprise/license/{license_uuid}/used_by/'.replace('{license_uuid}', encodeURI(licenseUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}
