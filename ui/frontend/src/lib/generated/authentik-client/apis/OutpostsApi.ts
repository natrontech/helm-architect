// tslint:disable
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2023.10.2
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    DockerServiceConnection,
    DockerServiceConnectionRequest,
    GenericError,
    KubernetesServiceConnection,
    KubernetesServiceConnectionRequest,
    LDAPOutpostConfig,
    Outpost,
    OutpostDefaultConfig,
    OutpostHealth,
    OutpostRequest,
    PaginatedDockerServiceConnectionList,
    PaginatedKubernetesServiceConnectionList,
    PaginatedLDAPOutpostConfigList,
    PaginatedOutpostList,
    PaginatedProxyOutpostConfigList,
    PaginatedRadiusOutpostConfigList,
    PaginatedServiceConnectionList,
    PatchedDockerServiceConnectionRequest,
    PatchedKubernetesServiceConnectionRequest,
    PatchedOutpostRequest,
    ProxyOutpostConfig,
    RadiusOutpostConfig,
    ServiceConnection,
    ServiceConnectionState,
    TypeCreate,
    UsedBy,
    ValidationError,
} from '../models';

export interface OutpostsInstancesCreateRequest {
    outpostRequest: OutpostRequest;
}

export interface OutpostsInstancesDestroyRequest {
    uuid: string;
}

export interface OutpostsInstancesHealthListRequest {
    uuid: string;
    managedIcontains?: string;
    managedIexact?: string;
    nameIcontains?: string;
    nameIexact?: string;
    ordering?: string;
    providersIsnull?: boolean;
    providersByPk?: Array<number>;
    search?: string;
    serviceConnectionNameIcontains?: string;
    serviceConnectionNameIexact?: string;
}

export interface OutpostsInstancesListRequest {
    managedIcontains?: string;
    managedIexact?: string;
    nameIcontains?: string;
    nameIexact?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    providersIsnull?: boolean;
    providersByPk?: Array<number>;
    search?: string;
    serviceConnectionNameIcontains?: string;
    serviceConnectionNameIexact?: string;
}

export interface OutpostsInstancesPartialUpdateRequest {
    uuid: string;
    patchedOutpostRequest?: PatchedOutpostRequest;
}

export interface OutpostsInstancesRetrieveRequest {
    uuid: string;
}

export interface OutpostsInstancesUpdateRequest {
    uuid: string;
    outpostRequest: OutpostRequest;
}

export interface OutpostsInstancesUsedByListRequest {
    uuid: string;
}

export interface OutpostsLdapListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface OutpostsLdapRetrieveRequest {
    id: number;
}

export interface OutpostsProxyListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface OutpostsProxyRetrieveRequest {
    id: number;
}

export interface OutpostsRadiusListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface OutpostsRadiusRetrieveRequest {
    id: number;
}

export interface OutpostsServiceConnectionsAllDestroyRequest {
    uuid: string;
}

export interface OutpostsServiceConnectionsAllListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface OutpostsServiceConnectionsAllRetrieveRequest {
    uuid: string;
}

export interface OutpostsServiceConnectionsAllStateRetrieveRequest {
    uuid: string;
}

export interface OutpostsServiceConnectionsAllUsedByListRequest {
    uuid: string;
}

export interface OutpostsServiceConnectionsDockerCreateRequest {
    dockerServiceConnectionRequest: DockerServiceConnectionRequest;
}

export interface OutpostsServiceConnectionsDockerDestroyRequest {
    uuid: string;
}

export interface OutpostsServiceConnectionsDockerListRequest {
    local?: boolean;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    tlsAuthentication?: string;
    tlsVerification?: string;
    url?: string;
}

export interface OutpostsServiceConnectionsDockerPartialUpdateRequest {
    uuid: string;
    patchedDockerServiceConnectionRequest?: PatchedDockerServiceConnectionRequest;
}

export interface OutpostsServiceConnectionsDockerRetrieveRequest {
    uuid: string;
}

export interface OutpostsServiceConnectionsDockerUpdateRequest {
    uuid: string;
    dockerServiceConnectionRequest: DockerServiceConnectionRequest;
}

export interface OutpostsServiceConnectionsDockerUsedByListRequest {
    uuid: string;
}

export interface OutpostsServiceConnectionsKubernetesCreateRequest {
    kubernetesServiceConnectionRequest: KubernetesServiceConnectionRequest;
}

export interface OutpostsServiceConnectionsKubernetesDestroyRequest {
    uuid: string;
}

export interface OutpostsServiceConnectionsKubernetesListRequest {
    local?: boolean;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface OutpostsServiceConnectionsKubernetesPartialUpdateRequest {
    uuid: string;
    patchedKubernetesServiceConnectionRequest?: PatchedKubernetesServiceConnectionRequest;
}

export interface OutpostsServiceConnectionsKubernetesRetrieveRequest {
    uuid: string;
}

export interface OutpostsServiceConnectionsKubernetesUpdateRequest {
    uuid: string;
    kubernetesServiceConnectionRequest: KubernetesServiceConnectionRequest;
}

export interface OutpostsServiceConnectionsKubernetesUsedByListRequest {
    uuid: string;
}

/**
 * no description
 */
export class OutpostsApi extends BaseAPI {

    /**
     * Outpost Viewset
     */
    outpostsInstancesCreate({ outpostRequest }: OutpostsInstancesCreateRequest): Observable<Outpost>
    outpostsInstancesCreate({ outpostRequest }: OutpostsInstancesCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<Outpost>>
    outpostsInstancesCreate({ outpostRequest }: OutpostsInstancesCreateRequest, opts?: OperationOpts): Observable<Outpost | AjaxResponse<Outpost>> {
        throwIfNullOrUndefined(outpostRequest, 'outpostRequest', 'outpostsInstancesCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Outpost>({
            url: '/outposts/instances/',
            method: 'POST',
            headers,
            body: outpostRequest,
        }, opts?.responseOpts);
    };

    /**
     * Global default outpost config
     */
    outpostsInstancesDefaultSettingsRetrieve(): Observable<OutpostDefaultConfig>
    outpostsInstancesDefaultSettingsRetrieve(opts?: OperationOpts): Observable<AjaxResponse<OutpostDefaultConfig>>
    outpostsInstancesDefaultSettingsRetrieve(opts?: OperationOpts): Observable<OutpostDefaultConfig | AjaxResponse<OutpostDefaultConfig>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<OutpostDefaultConfig>({
            url: '/outposts/instances/default_settings/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Outpost Viewset
     */
    outpostsInstancesDestroy({ uuid }: OutpostsInstancesDestroyRequest): Observable<void>
    outpostsInstancesDestroy({ uuid }: OutpostsInstancesDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    outpostsInstancesDestroy({ uuid }: OutpostsInstancesDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsInstancesDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/outposts/instances/{uuid}/'.replace('{uuid}', encodeURI(uuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get outposts current health
     */
    outpostsInstancesHealthList({ uuid, managedIcontains, managedIexact, nameIcontains, nameIexact, ordering, providersIsnull, providersByPk, search, serviceConnectionNameIcontains, serviceConnectionNameIexact }: OutpostsInstancesHealthListRequest): Observable<Array<OutpostHealth>>
    outpostsInstancesHealthList({ uuid, managedIcontains, managedIexact, nameIcontains, nameIexact, ordering, providersIsnull, providersByPk, search, serviceConnectionNameIcontains, serviceConnectionNameIexact }: OutpostsInstancesHealthListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<OutpostHealth>>>
    outpostsInstancesHealthList({ uuid, managedIcontains, managedIexact, nameIcontains, nameIexact, ordering, providersIsnull, providersByPk, search, serviceConnectionNameIcontains, serviceConnectionNameIexact }: OutpostsInstancesHealthListRequest, opts?: OperationOpts): Observable<Array<OutpostHealth> | AjaxResponse<Array<OutpostHealth>>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsInstancesHealthList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (managedIcontains != null) { query['managed__icontains'] = managedIcontains; }
        if (managedIexact != null) { query['managed__iexact'] = managedIexact; }
        if (nameIcontains != null) { query['name__icontains'] = nameIcontains; }
        if (nameIexact != null) { query['name__iexact'] = nameIexact; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (providersIsnull != null) { query['providers__isnull'] = providersIsnull; }
        if (providersByPk != null) { query['providers_by_pk'] = providersByPk; }
        if (search != null) { query['search'] = search; }
        if (serviceConnectionNameIcontains != null) { query['service_connection__name__icontains'] = serviceConnectionNameIcontains; }
        if (serviceConnectionNameIexact != null) { query['service_connection__name__iexact'] = serviceConnectionNameIexact; }

        return this.request<Array<OutpostHealth>>({
            url: '/outposts/instances/{uuid}/health/'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Outpost Viewset
     */
    outpostsInstancesList({ managedIcontains, managedIexact, nameIcontains, nameIexact, ordering, page, pageSize, providersIsnull, providersByPk, search, serviceConnectionNameIcontains, serviceConnectionNameIexact }: OutpostsInstancesListRequest): Observable<PaginatedOutpostList>
    outpostsInstancesList({ managedIcontains, managedIexact, nameIcontains, nameIexact, ordering, page, pageSize, providersIsnull, providersByPk, search, serviceConnectionNameIcontains, serviceConnectionNameIexact }: OutpostsInstancesListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedOutpostList>>
    outpostsInstancesList({ managedIcontains, managedIexact, nameIcontains, nameIexact, ordering, page, pageSize, providersIsnull, providersByPk, search, serviceConnectionNameIcontains, serviceConnectionNameIexact }: OutpostsInstancesListRequest, opts?: OperationOpts): Observable<PaginatedOutpostList | AjaxResponse<PaginatedOutpostList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (managedIcontains != null) { query['managed__icontains'] = managedIcontains; }
        if (managedIexact != null) { query['managed__iexact'] = managedIexact; }
        if (nameIcontains != null) { query['name__icontains'] = nameIcontains; }
        if (nameIexact != null) { query['name__iexact'] = nameIexact; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (providersIsnull != null) { query['providers__isnull'] = providersIsnull; }
        if (providersByPk != null) { query['providers_by_pk'] = providersByPk; }
        if (search != null) { query['search'] = search; }
        if (serviceConnectionNameIcontains != null) { query['service_connection__name__icontains'] = serviceConnectionNameIcontains; }
        if (serviceConnectionNameIexact != null) { query['service_connection__name__iexact'] = serviceConnectionNameIexact; }

        return this.request<PaginatedOutpostList>({
            url: '/outposts/instances/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Outpost Viewset
     */
    outpostsInstancesPartialUpdate({ uuid, patchedOutpostRequest }: OutpostsInstancesPartialUpdateRequest): Observable<Outpost>
    outpostsInstancesPartialUpdate({ uuid, patchedOutpostRequest }: OutpostsInstancesPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Outpost>>
    outpostsInstancesPartialUpdate({ uuid, patchedOutpostRequest }: OutpostsInstancesPartialUpdateRequest, opts?: OperationOpts): Observable<Outpost | AjaxResponse<Outpost>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsInstancesPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Outpost>({
            url: '/outposts/instances/{uuid}/'.replace('{uuid}', encodeURI(uuid)),
            method: 'PATCH',
            headers,
            body: patchedOutpostRequest,
        }, opts?.responseOpts);
    };

    /**
     * Outpost Viewset
     */
    outpostsInstancesRetrieve({ uuid }: OutpostsInstancesRetrieveRequest): Observable<Outpost>
    outpostsInstancesRetrieve({ uuid }: OutpostsInstancesRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<Outpost>>
    outpostsInstancesRetrieve({ uuid }: OutpostsInstancesRetrieveRequest, opts?: OperationOpts): Observable<Outpost | AjaxResponse<Outpost>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsInstancesRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Outpost>({
            url: '/outposts/instances/{uuid}/'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Outpost Viewset
     */
    outpostsInstancesUpdate({ uuid, outpostRequest }: OutpostsInstancesUpdateRequest): Observable<Outpost>
    outpostsInstancesUpdate({ uuid, outpostRequest }: OutpostsInstancesUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Outpost>>
    outpostsInstancesUpdate({ uuid, outpostRequest }: OutpostsInstancesUpdateRequest, opts?: OperationOpts): Observable<Outpost | AjaxResponse<Outpost>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsInstancesUpdate');
        throwIfNullOrUndefined(outpostRequest, 'outpostRequest', 'outpostsInstancesUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Outpost>({
            url: '/outposts/instances/{uuid}/'.replace('{uuid}', encodeURI(uuid)),
            method: 'PUT',
            headers,
            body: outpostRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    outpostsInstancesUsedByList({ uuid }: OutpostsInstancesUsedByListRequest): Observable<Array<UsedBy>>
    outpostsInstancesUsedByList({ uuid }: OutpostsInstancesUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    outpostsInstancesUsedByList({ uuid }: OutpostsInstancesUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsInstancesUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/outposts/instances/{uuid}/used_by/'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * LDAPProvider Viewset
     */
    outpostsLdapList({ name, ordering, page, pageSize, search }: OutpostsLdapListRequest): Observable<PaginatedLDAPOutpostConfigList>
    outpostsLdapList({ name, ordering, page, pageSize, search }: OutpostsLdapListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedLDAPOutpostConfigList>>
    outpostsLdapList({ name, ordering, page, pageSize, search }: OutpostsLdapListRequest, opts?: OperationOpts): Observable<PaginatedLDAPOutpostConfigList | AjaxResponse<PaginatedLDAPOutpostConfigList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedLDAPOutpostConfigList>({
            url: '/outposts/ldap/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * LDAPProvider Viewset
     */
    outpostsLdapRetrieve({ id }: OutpostsLdapRetrieveRequest): Observable<LDAPOutpostConfig>
    outpostsLdapRetrieve({ id }: OutpostsLdapRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<LDAPOutpostConfig>>
    outpostsLdapRetrieve({ id }: OutpostsLdapRetrieveRequest, opts?: OperationOpts): Observable<LDAPOutpostConfig | AjaxResponse<LDAPOutpostConfig>> {
        throwIfNullOrUndefined(id, 'id', 'outpostsLdapRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<LDAPOutpostConfig>({
            url: '/outposts/ldap/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ProxyProvider Viewset
     */
    outpostsProxyList({ name, ordering, page, pageSize, search }: OutpostsProxyListRequest): Observable<PaginatedProxyOutpostConfigList>
    outpostsProxyList({ name, ordering, page, pageSize, search }: OutpostsProxyListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedProxyOutpostConfigList>>
    outpostsProxyList({ name, ordering, page, pageSize, search }: OutpostsProxyListRequest, opts?: OperationOpts): Observable<PaginatedProxyOutpostConfigList | AjaxResponse<PaginatedProxyOutpostConfigList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedProxyOutpostConfigList>({
            url: '/outposts/proxy/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * ProxyProvider Viewset
     */
    outpostsProxyRetrieve({ id }: OutpostsProxyRetrieveRequest): Observable<ProxyOutpostConfig>
    outpostsProxyRetrieve({ id }: OutpostsProxyRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<ProxyOutpostConfig>>
    outpostsProxyRetrieve({ id }: OutpostsProxyRetrieveRequest, opts?: OperationOpts): Observable<ProxyOutpostConfig | AjaxResponse<ProxyOutpostConfig>> {
        throwIfNullOrUndefined(id, 'id', 'outpostsProxyRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ProxyOutpostConfig>({
            url: '/outposts/proxy/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * RadiusProvider Viewset
     */
    outpostsRadiusList({ name, ordering, page, pageSize, search }: OutpostsRadiusListRequest): Observable<PaginatedRadiusOutpostConfigList>
    outpostsRadiusList({ name, ordering, page, pageSize, search }: OutpostsRadiusListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedRadiusOutpostConfigList>>
    outpostsRadiusList({ name, ordering, page, pageSize, search }: OutpostsRadiusListRequest, opts?: OperationOpts): Observable<PaginatedRadiusOutpostConfigList | AjaxResponse<PaginatedRadiusOutpostConfigList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedRadiusOutpostConfigList>({
            url: '/outposts/radius/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * RadiusProvider Viewset
     */
    outpostsRadiusRetrieve({ id }: OutpostsRadiusRetrieveRequest): Observable<RadiusOutpostConfig>
    outpostsRadiusRetrieve({ id }: OutpostsRadiusRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<RadiusOutpostConfig>>
    outpostsRadiusRetrieve({ id }: OutpostsRadiusRetrieveRequest, opts?: OperationOpts): Observable<RadiusOutpostConfig | AjaxResponse<RadiusOutpostConfig>> {
        throwIfNullOrUndefined(id, 'id', 'outpostsRadiusRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<RadiusOutpostConfig>({
            url: '/outposts/radius/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ServiceConnection Viewset
     */
    outpostsServiceConnectionsAllDestroy({ uuid }: OutpostsServiceConnectionsAllDestroyRequest): Observable<void>
    outpostsServiceConnectionsAllDestroy({ uuid }: OutpostsServiceConnectionsAllDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    outpostsServiceConnectionsAllDestroy({ uuid }: OutpostsServiceConnectionsAllDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsServiceConnectionsAllDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/outposts/service_connections/all/{uuid}/'.replace('{uuid}', encodeURI(uuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ServiceConnection Viewset
     */
    outpostsServiceConnectionsAllList({ name, ordering, page, pageSize, search }: OutpostsServiceConnectionsAllListRequest): Observable<PaginatedServiceConnectionList>
    outpostsServiceConnectionsAllList({ name, ordering, page, pageSize, search }: OutpostsServiceConnectionsAllListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedServiceConnectionList>>
    outpostsServiceConnectionsAllList({ name, ordering, page, pageSize, search }: OutpostsServiceConnectionsAllListRequest, opts?: OperationOpts): Observable<PaginatedServiceConnectionList | AjaxResponse<PaginatedServiceConnectionList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedServiceConnectionList>({
            url: '/outposts/service_connections/all/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * ServiceConnection Viewset
     */
    outpostsServiceConnectionsAllRetrieve({ uuid }: OutpostsServiceConnectionsAllRetrieveRequest): Observable<ServiceConnection>
    outpostsServiceConnectionsAllRetrieve({ uuid }: OutpostsServiceConnectionsAllRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<ServiceConnection>>
    outpostsServiceConnectionsAllRetrieve({ uuid }: OutpostsServiceConnectionsAllRetrieveRequest, opts?: OperationOpts): Observable<ServiceConnection | AjaxResponse<ServiceConnection>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsServiceConnectionsAllRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ServiceConnection>({
            url: '/outposts/service_connections/all/{uuid}/'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get the service connection\'s state
     */
    outpostsServiceConnectionsAllStateRetrieve({ uuid }: OutpostsServiceConnectionsAllStateRetrieveRequest): Observable<ServiceConnectionState>
    outpostsServiceConnectionsAllStateRetrieve({ uuid }: OutpostsServiceConnectionsAllStateRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<ServiceConnectionState>>
    outpostsServiceConnectionsAllStateRetrieve({ uuid }: OutpostsServiceConnectionsAllStateRetrieveRequest, opts?: OperationOpts): Observable<ServiceConnectionState | AjaxResponse<ServiceConnectionState>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsServiceConnectionsAllStateRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ServiceConnectionState>({
            url: '/outposts/service_connections/all/{uuid}/state/'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get all creatable service connection types
     */
    outpostsServiceConnectionsAllTypesList(): Observable<Array<TypeCreate>>
    outpostsServiceConnectionsAllTypesList(opts?: OperationOpts): Observable<AjaxResponse<Array<TypeCreate>>>
    outpostsServiceConnectionsAllTypesList(opts?: OperationOpts): Observable<Array<TypeCreate> | AjaxResponse<Array<TypeCreate>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<TypeCreate>>({
            url: '/outposts/service_connections/all/types/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    outpostsServiceConnectionsAllUsedByList({ uuid }: OutpostsServiceConnectionsAllUsedByListRequest): Observable<Array<UsedBy>>
    outpostsServiceConnectionsAllUsedByList({ uuid }: OutpostsServiceConnectionsAllUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    outpostsServiceConnectionsAllUsedByList({ uuid }: OutpostsServiceConnectionsAllUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsServiceConnectionsAllUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/outposts/service_connections/all/{uuid}/used_by/'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerCreate({ dockerServiceConnectionRequest }: OutpostsServiceConnectionsDockerCreateRequest): Observable<DockerServiceConnection>
    outpostsServiceConnectionsDockerCreate({ dockerServiceConnectionRequest }: OutpostsServiceConnectionsDockerCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<DockerServiceConnection>>
    outpostsServiceConnectionsDockerCreate({ dockerServiceConnectionRequest }: OutpostsServiceConnectionsDockerCreateRequest, opts?: OperationOpts): Observable<DockerServiceConnection | AjaxResponse<DockerServiceConnection>> {
        throwIfNullOrUndefined(dockerServiceConnectionRequest, 'dockerServiceConnectionRequest', 'outpostsServiceConnectionsDockerCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DockerServiceConnection>({
            url: '/outposts/service_connections/docker/',
            method: 'POST',
            headers,
            body: dockerServiceConnectionRequest,
        }, opts?.responseOpts);
    };

    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerDestroy({ uuid }: OutpostsServiceConnectionsDockerDestroyRequest): Observable<void>
    outpostsServiceConnectionsDockerDestroy({ uuid }: OutpostsServiceConnectionsDockerDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    outpostsServiceConnectionsDockerDestroy({ uuid }: OutpostsServiceConnectionsDockerDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsServiceConnectionsDockerDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/outposts/service_connections/docker/{uuid}/'.replace('{uuid}', encodeURI(uuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerList({ local, name, ordering, page, pageSize, search, tlsAuthentication, tlsVerification, url }: OutpostsServiceConnectionsDockerListRequest): Observable<PaginatedDockerServiceConnectionList>
    outpostsServiceConnectionsDockerList({ local, name, ordering, page, pageSize, search, tlsAuthentication, tlsVerification, url }: OutpostsServiceConnectionsDockerListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedDockerServiceConnectionList>>
    outpostsServiceConnectionsDockerList({ local, name, ordering, page, pageSize, search, tlsAuthentication, tlsVerification, url }: OutpostsServiceConnectionsDockerListRequest, opts?: OperationOpts): Observable<PaginatedDockerServiceConnectionList | AjaxResponse<PaginatedDockerServiceConnectionList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (local != null) { query['local'] = local; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (tlsAuthentication != null) { query['tls_authentication'] = tlsAuthentication; }
        if (tlsVerification != null) { query['tls_verification'] = tlsVerification; }
        if (url != null) { query['url'] = url; }

        return this.request<PaginatedDockerServiceConnectionList>({
            url: '/outposts/service_connections/docker/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerPartialUpdate({ uuid, patchedDockerServiceConnectionRequest }: OutpostsServiceConnectionsDockerPartialUpdateRequest): Observable<DockerServiceConnection>
    outpostsServiceConnectionsDockerPartialUpdate({ uuid, patchedDockerServiceConnectionRequest }: OutpostsServiceConnectionsDockerPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<DockerServiceConnection>>
    outpostsServiceConnectionsDockerPartialUpdate({ uuid, patchedDockerServiceConnectionRequest }: OutpostsServiceConnectionsDockerPartialUpdateRequest, opts?: OperationOpts): Observable<DockerServiceConnection | AjaxResponse<DockerServiceConnection>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsServiceConnectionsDockerPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DockerServiceConnection>({
            url: '/outposts/service_connections/docker/{uuid}/'.replace('{uuid}', encodeURI(uuid)),
            method: 'PATCH',
            headers,
            body: patchedDockerServiceConnectionRequest,
        }, opts?.responseOpts);
    };

    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerRetrieve({ uuid }: OutpostsServiceConnectionsDockerRetrieveRequest): Observable<DockerServiceConnection>
    outpostsServiceConnectionsDockerRetrieve({ uuid }: OutpostsServiceConnectionsDockerRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<DockerServiceConnection>>
    outpostsServiceConnectionsDockerRetrieve({ uuid }: OutpostsServiceConnectionsDockerRetrieveRequest, opts?: OperationOpts): Observable<DockerServiceConnection | AjaxResponse<DockerServiceConnection>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsServiceConnectionsDockerRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DockerServiceConnection>({
            url: '/outposts/service_connections/docker/{uuid}/'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerUpdate({ uuid, dockerServiceConnectionRequest }: OutpostsServiceConnectionsDockerUpdateRequest): Observable<DockerServiceConnection>
    outpostsServiceConnectionsDockerUpdate({ uuid, dockerServiceConnectionRequest }: OutpostsServiceConnectionsDockerUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<DockerServiceConnection>>
    outpostsServiceConnectionsDockerUpdate({ uuid, dockerServiceConnectionRequest }: OutpostsServiceConnectionsDockerUpdateRequest, opts?: OperationOpts): Observable<DockerServiceConnection | AjaxResponse<DockerServiceConnection>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsServiceConnectionsDockerUpdate');
        throwIfNullOrUndefined(dockerServiceConnectionRequest, 'dockerServiceConnectionRequest', 'outpostsServiceConnectionsDockerUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DockerServiceConnection>({
            url: '/outposts/service_connections/docker/{uuid}/'.replace('{uuid}', encodeURI(uuid)),
            method: 'PUT',
            headers,
            body: dockerServiceConnectionRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    outpostsServiceConnectionsDockerUsedByList({ uuid }: OutpostsServiceConnectionsDockerUsedByListRequest): Observable<Array<UsedBy>>
    outpostsServiceConnectionsDockerUsedByList({ uuid }: OutpostsServiceConnectionsDockerUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    outpostsServiceConnectionsDockerUsedByList({ uuid }: OutpostsServiceConnectionsDockerUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsServiceConnectionsDockerUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/outposts/service_connections/docker/{uuid}/used_by/'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesCreate({ kubernetesServiceConnectionRequest }: OutpostsServiceConnectionsKubernetesCreateRequest): Observable<KubernetesServiceConnection>
    outpostsServiceConnectionsKubernetesCreate({ kubernetesServiceConnectionRequest }: OutpostsServiceConnectionsKubernetesCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<KubernetesServiceConnection>>
    outpostsServiceConnectionsKubernetesCreate({ kubernetesServiceConnectionRequest }: OutpostsServiceConnectionsKubernetesCreateRequest, opts?: OperationOpts): Observable<KubernetesServiceConnection | AjaxResponse<KubernetesServiceConnection>> {
        throwIfNullOrUndefined(kubernetesServiceConnectionRequest, 'kubernetesServiceConnectionRequest', 'outpostsServiceConnectionsKubernetesCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<KubernetesServiceConnection>({
            url: '/outposts/service_connections/kubernetes/',
            method: 'POST',
            headers,
            body: kubernetesServiceConnectionRequest,
        }, opts?.responseOpts);
    };

    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesDestroy({ uuid }: OutpostsServiceConnectionsKubernetesDestroyRequest): Observable<void>
    outpostsServiceConnectionsKubernetesDestroy({ uuid }: OutpostsServiceConnectionsKubernetesDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    outpostsServiceConnectionsKubernetesDestroy({ uuid }: OutpostsServiceConnectionsKubernetesDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsServiceConnectionsKubernetesDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/outposts/service_connections/kubernetes/{uuid}/'.replace('{uuid}', encodeURI(uuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesList({ local, name, ordering, page, pageSize, search }: OutpostsServiceConnectionsKubernetesListRequest): Observable<PaginatedKubernetesServiceConnectionList>
    outpostsServiceConnectionsKubernetesList({ local, name, ordering, page, pageSize, search }: OutpostsServiceConnectionsKubernetesListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedKubernetesServiceConnectionList>>
    outpostsServiceConnectionsKubernetesList({ local, name, ordering, page, pageSize, search }: OutpostsServiceConnectionsKubernetesListRequest, opts?: OperationOpts): Observable<PaginatedKubernetesServiceConnectionList | AjaxResponse<PaginatedKubernetesServiceConnectionList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (local != null) { query['local'] = local; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedKubernetesServiceConnectionList>({
            url: '/outposts/service_connections/kubernetes/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesPartialUpdate({ uuid, patchedKubernetesServiceConnectionRequest }: OutpostsServiceConnectionsKubernetesPartialUpdateRequest): Observable<KubernetesServiceConnection>
    outpostsServiceConnectionsKubernetesPartialUpdate({ uuid, patchedKubernetesServiceConnectionRequest }: OutpostsServiceConnectionsKubernetesPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<KubernetesServiceConnection>>
    outpostsServiceConnectionsKubernetesPartialUpdate({ uuid, patchedKubernetesServiceConnectionRequest }: OutpostsServiceConnectionsKubernetesPartialUpdateRequest, opts?: OperationOpts): Observable<KubernetesServiceConnection | AjaxResponse<KubernetesServiceConnection>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsServiceConnectionsKubernetesPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<KubernetesServiceConnection>({
            url: '/outposts/service_connections/kubernetes/{uuid}/'.replace('{uuid}', encodeURI(uuid)),
            method: 'PATCH',
            headers,
            body: patchedKubernetesServiceConnectionRequest,
        }, opts?.responseOpts);
    };

    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesRetrieve({ uuid }: OutpostsServiceConnectionsKubernetesRetrieveRequest): Observable<KubernetesServiceConnection>
    outpostsServiceConnectionsKubernetesRetrieve({ uuid }: OutpostsServiceConnectionsKubernetesRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<KubernetesServiceConnection>>
    outpostsServiceConnectionsKubernetesRetrieve({ uuid }: OutpostsServiceConnectionsKubernetesRetrieveRequest, opts?: OperationOpts): Observable<KubernetesServiceConnection | AjaxResponse<KubernetesServiceConnection>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsServiceConnectionsKubernetesRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<KubernetesServiceConnection>({
            url: '/outposts/service_connections/kubernetes/{uuid}/'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesUpdate({ uuid, kubernetesServiceConnectionRequest }: OutpostsServiceConnectionsKubernetesUpdateRequest): Observable<KubernetesServiceConnection>
    outpostsServiceConnectionsKubernetesUpdate({ uuid, kubernetesServiceConnectionRequest }: OutpostsServiceConnectionsKubernetesUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<KubernetesServiceConnection>>
    outpostsServiceConnectionsKubernetesUpdate({ uuid, kubernetesServiceConnectionRequest }: OutpostsServiceConnectionsKubernetesUpdateRequest, opts?: OperationOpts): Observable<KubernetesServiceConnection | AjaxResponse<KubernetesServiceConnection>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsServiceConnectionsKubernetesUpdate');
        throwIfNullOrUndefined(kubernetesServiceConnectionRequest, 'kubernetesServiceConnectionRequest', 'outpostsServiceConnectionsKubernetesUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<KubernetesServiceConnection>({
            url: '/outposts/service_connections/kubernetes/{uuid}/'.replace('{uuid}', encodeURI(uuid)),
            method: 'PUT',
            headers,
            body: kubernetesServiceConnectionRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    outpostsServiceConnectionsKubernetesUsedByList({ uuid }: OutpostsServiceConnectionsKubernetesUsedByListRequest): Observable<Array<UsedBy>>
    outpostsServiceConnectionsKubernetesUsedByList({ uuid }: OutpostsServiceConnectionsKubernetesUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    outpostsServiceConnectionsKubernetesUsedByList({ uuid }: OutpostsServiceConnectionsKubernetesUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(uuid, 'uuid', 'outpostsServiceConnectionsKubernetesUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/outposts/service_connections/kubernetes/{uuid}/used_by/'.replace('{uuid}', encodeURI(uuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}
