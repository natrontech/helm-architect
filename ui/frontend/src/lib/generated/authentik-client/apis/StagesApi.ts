// tslint:disable
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2023.10.2
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AuthenticateWebAuthnStage,
    AuthenticateWebAuthnStageRequest,
    AuthenticatorDuoStage,
    AuthenticatorDuoStageDeviceImportResponse,
    AuthenticatorDuoStageManualDeviceImportRequest,
    AuthenticatorDuoStageRequest,
    AuthenticatorSMSStage,
    AuthenticatorSMSStageRequest,
    AuthenticatorStaticStage,
    AuthenticatorStaticStageRequest,
    AuthenticatorTOTPStage,
    AuthenticatorTOTPStageRequest,
    AuthenticatorValidateStage,
    AuthenticatorValidateStageRequest,
    CaptchaStage,
    CaptchaStageRequest,
    ConsentStage,
    ConsentStageRequest,
    DenyStage,
    DenyStageRequest,
    DummyStage,
    DummyStageRequest,
    DuoDeviceEnrollmentStatus,
    EmailStage,
    EmailStageRequest,
    GenericError,
    IdentificationStage,
    IdentificationStageRequest,
    Invitation,
    InvitationRequest,
    InvitationStage,
    InvitationStageRequest,
    PaginatedAuthenticateWebAuthnStageList,
    PaginatedAuthenticatorDuoStageList,
    PaginatedAuthenticatorSMSStageList,
    PaginatedAuthenticatorStaticStageList,
    PaginatedAuthenticatorTOTPStageList,
    PaginatedAuthenticatorValidateStageList,
    PaginatedCaptchaStageList,
    PaginatedConsentStageList,
    PaginatedDenyStageList,
    PaginatedDummyStageList,
    PaginatedEmailStageList,
    PaginatedIdentificationStageList,
    PaginatedInvitationList,
    PaginatedInvitationStageList,
    PaginatedPasswordStageList,
    PaginatedPromptList,
    PaginatedPromptStageList,
    PaginatedStageList,
    PaginatedUserDeleteStageList,
    PaginatedUserLoginStageList,
    PaginatedUserLogoutStageList,
    PaginatedUserWriteStageList,
    PasswordStage,
    PasswordStageRequest,
    PatchedAuthenticateWebAuthnStageRequest,
    PatchedAuthenticatorDuoStageRequest,
    PatchedAuthenticatorSMSStageRequest,
    PatchedAuthenticatorStaticStageRequest,
    PatchedAuthenticatorTOTPStageRequest,
    PatchedAuthenticatorValidateStageRequest,
    PatchedCaptchaStageRequest,
    PatchedConsentStageRequest,
    PatchedDenyStageRequest,
    PatchedDummyStageRequest,
    PatchedEmailStageRequest,
    PatchedIdentificationStageRequest,
    PatchedInvitationRequest,
    PatchedInvitationStageRequest,
    PatchedPasswordStageRequest,
    PatchedPromptRequest,
    PatchedPromptStageRequest,
    PatchedUserDeleteStageRequest,
    PatchedUserLoginStageRequest,
    PatchedUserLogoutStageRequest,
    PatchedUserWriteStageRequest,
    Prompt,
    PromptChallenge,
    PromptRequest,
    PromptStage,
    PromptStageRequest,
    Stage,
    TypeCreate,
    UsedBy,
    UserDeleteStage,
    UserDeleteStageRequest,
    UserLoginStage,
    UserLoginStageRequest,
    UserLogoutStage,
    UserLogoutStageRequest,
    UserSetting,
    UserWriteStage,
    UserWriteStageRequest,
    ValidationError,
} from '../models';

export interface StagesAllDestroyRequest {
    stageUuid: string;
}

export interface StagesAllListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface StagesAllRetrieveRequest {
    stageUuid: string;
}

export interface StagesAllUsedByListRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorDuoCreateRequest {
    authenticatorDuoStageRequest: AuthenticatorDuoStageRequest;
}

export interface StagesAuthenticatorDuoDestroyRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorDuoEnrollmentStatusCreateRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorDuoImportDeviceManualCreateRequest {
    stageUuid: string;
    authenticatorDuoStageManualDeviceImportRequest: AuthenticatorDuoStageManualDeviceImportRequest;
}

export interface StagesAuthenticatorDuoImportDevicesAutomaticCreateRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorDuoListRequest {
    apiHostname?: string;
    clientId?: string;
    configureFlow?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface StagesAuthenticatorDuoPartialUpdateRequest {
    stageUuid: string;
    patchedAuthenticatorDuoStageRequest?: PatchedAuthenticatorDuoStageRequest;
}

export interface StagesAuthenticatorDuoRetrieveRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorDuoUpdateRequest {
    stageUuid: string;
    authenticatorDuoStageRequest: AuthenticatorDuoStageRequest;
}

export interface StagesAuthenticatorDuoUsedByListRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorSmsCreateRequest {
    authenticatorSMSStageRequest: AuthenticatorSMSStageRequest;
}

export interface StagesAuthenticatorSmsDestroyRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorSmsListRequest {
    accountSid?: string;
    auth?: string;
    authPassword?: string;
    authType?: StagesAuthenticatorSmsListAuthTypeEnum;
    configureFlow?: string;
    friendlyName?: string;
    fromNumber?: string;
    mapping?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    provider?: StagesAuthenticatorSmsListProviderEnum;
    search?: string;
    stageUuid?: string;
    verifyOnly?: boolean;
}

export interface StagesAuthenticatorSmsPartialUpdateRequest {
    stageUuid: string;
    patchedAuthenticatorSMSStageRequest?: PatchedAuthenticatorSMSStageRequest;
}

export interface StagesAuthenticatorSmsRetrieveRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorSmsUpdateRequest {
    stageUuid: string;
    authenticatorSMSStageRequest: AuthenticatorSMSStageRequest;
}

export interface StagesAuthenticatorSmsUsedByListRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorStaticCreateRequest {
    authenticatorStaticStageRequest: AuthenticatorStaticStageRequest;
}

export interface StagesAuthenticatorStaticDestroyRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorStaticListRequest {
    configureFlow?: string;
    friendlyName?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
    tokenCount?: number;
    tokenLength?: number;
}

export interface StagesAuthenticatorStaticPartialUpdateRequest {
    stageUuid: string;
    patchedAuthenticatorStaticStageRequest?: PatchedAuthenticatorStaticStageRequest;
}

export interface StagesAuthenticatorStaticRetrieveRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorStaticUpdateRequest {
    stageUuid: string;
    authenticatorStaticStageRequest: AuthenticatorStaticStageRequest;
}

export interface StagesAuthenticatorStaticUsedByListRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorTotpCreateRequest {
    authenticatorTOTPStageRequest: AuthenticatorTOTPStageRequest;
}

export interface StagesAuthenticatorTotpDestroyRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorTotpListRequest {
    configureFlow?: string;
    digits?: StagesAuthenticatorTotpListDigitsEnum;
    friendlyName?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
}

export interface StagesAuthenticatorTotpPartialUpdateRequest {
    stageUuid: string;
    patchedAuthenticatorTOTPStageRequest?: PatchedAuthenticatorTOTPStageRequest;
}

export interface StagesAuthenticatorTotpRetrieveRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorTotpUpdateRequest {
    stageUuid: string;
    authenticatorTOTPStageRequest: AuthenticatorTOTPStageRequest;
}

export interface StagesAuthenticatorTotpUsedByListRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorValidateCreateRequest {
    authenticatorValidateStageRequest: AuthenticatorValidateStageRequest;
}

export interface StagesAuthenticatorValidateDestroyRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorValidateListRequest {
    configurationStages?: Array<string>;
    name?: string;
    notConfiguredAction?: StagesAuthenticatorValidateListNotConfiguredActionEnum;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface StagesAuthenticatorValidatePartialUpdateRequest {
    stageUuid: string;
    patchedAuthenticatorValidateStageRequest?: PatchedAuthenticatorValidateStageRequest;
}

export interface StagesAuthenticatorValidateRetrieveRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorValidateUpdateRequest {
    stageUuid: string;
    authenticatorValidateStageRequest: AuthenticatorValidateStageRequest;
}

export interface StagesAuthenticatorValidateUsedByListRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorWebauthnCreateRequest {
    authenticateWebAuthnStageRequest: AuthenticateWebAuthnStageRequest;
}

export interface StagesAuthenticatorWebauthnDestroyRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorWebauthnListRequest {
    authenticatorAttachment?: StagesAuthenticatorWebauthnListAuthenticatorAttachmentEnum;
    configureFlow?: string;
    friendlyName?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    residentKeyRequirement?: StagesAuthenticatorWebauthnListResidentKeyRequirementEnum;
    search?: string;
    stageUuid?: string;
    userVerification?: StagesAuthenticatorWebauthnListUserVerificationEnum;
}

export interface StagesAuthenticatorWebauthnPartialUpdateRequest {
    stageUuid: string;
    patchedAuthenticateWebAuthnStageRequest?: PatchedAuthenticateWebAuthnStageRequest;
}

export interface StagesAuthenticatorWebauthnRetrieveRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorWebauthnUpdateRequest {
    stageUuid: string;
    authenticateWebAuthnStageRequest: AuthenticateWebAuthnStageRequest;
}

export interface StagesAuthenticatorWebauthnUsedByListRequest {
    stageUuid: string;
}

export interface StagesCaptchaCreateRequest {
    captchaStageRequest: CaptchaStageRequest;
}

export interface StagesCaptchaDestroyRequest {
    stageUuid: string;
}

export interface StagesCaptchaListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    publicKey?: string;
    search?: string;
}

export interface StagesCaptchaPartialUpdateRequest {
    stageUuid: string;
    patchedCaptchaStageRequest?: PatchedCaptchaStageRequest;
}

export interface StagesCaptchaRetrieveRequest {
    stageUuid: string;
}

export interface StagesCaptchaUpdateRequest {
    stageUuid: string;
    captchaStageRequest: CaptchaStageRequest;
}

export interface StagesCaptchaUsedByListRequest {
    stageUuid: string;
}

export interface StagesConsentCreateRequest {
    consentStageRequest: ConsentStageRequest;
}

export interface StagesConsentDestroyRequest {
    stageUuid: string;
}

export interface StagesConsentListRequest {
    consentExpireIn?: string;
    mode?: StagesConsentListModeEnum;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
}

export interface StagesConsentPartialUpdateRequest {
    stageUuid: string;
    patchedConsentStageRequest?: PatchedConsentStageRequest;
}

export interface StagesConsentRetrieveRequest {
    stageUuid: string;
}

export interface StagesConsentUpdateRequest {
    stageUuid: string;
    consentStageRequest: ConsentStageRequest;
}

export interface StagesConsentUsedByListRequest {
    stageUuid: string;
}

export interface StagesDenyCreateRequest {
    denyStageRequest: DenyStageRequest;
}

export interface StagesDenyDestroyRequest {
    stageUuid: string;
}

export interface StagesDenyListRequest {
    denyMessage?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
}

export interface StagesDenyPartialUpdateRequest {
    stageUuid: string;
    patchedDenyStageRequest?: PatchedDenyStageRequest;
}

export interface StagesDenyRetrieveRequest {
    stageUuid: string;
}

export interface StagesDenyUpdateRequest {
    stageUuid: string;
    denyStageRequest: DenyStageRequest;
}

export interface StagesDenyUsedByListRequest {
    stageUuid: string;
}

export interface StagesDummyCreateRequest {
    dummyStageRequest: DummyStageRequest;
}

export interface StagesDummyDestroyRequest {
    stageUuid: string;
}

export interface StagesDummyListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
    throwError?: boolean;
}

export interface StagesDummyPartialUpdateRequest {
    stageUuid: string;
    patchedDummyStageRequest?: PatchedDummyStageRequest;
}

export interface StagesDummyRetrieveRequest {
    stageUuid: string;
}

export interface StagesDummyUpdateRequest {
    stageUuid: string;
    dummyStageRequest: DummyStageRequest;
}

export interface StagesDummyUsedByListRequest {
    stageUuid: string;
}

export interface StagesEmailCreateRequest {
    emailStageRequest: EmailStageRequest;
}

export interface StagesEmailDestroyRequest {
    stageUuid: string;
}

export interface StagesEmailListRequest {
    activateUserOnSuccess?: boolean;
    fromAddress?: string;
    host?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    port?: number;
    search?: string;
    subject?: string;
    template?: string;
    timeout?: number;
    tokenExpiry?: number;
    useGlobalSettings?: boolean;
    useSsl?: boolean;
    useTls?: boolean;
    username?: string;
}

export interface StagesEmailPartialUpdateRequest {
    stageUuid: string;
    patchedEmailStageRequest?: PatchedEmailStageRequest;
}

export interface StagesEmailRetrieveRequest {
    stageUuid: string;
}

export interface StagesEmailUpdateRequest {
    stageUuid: string;
    emailStageRequest: EmailStageRequest;
}

export interface StagesEmailUsedByListRequest {
    stageUuid: string;
}

export interface StagesIdentificationCreateRequest {
    identificationStageRequest: IdentificationStageRequest;
}

export interface StagesIdentificationDestroyRequest {
    stageUuid: string;
}

export interface StagesIdentificationListRequest {
    caseInsensitiveMatching?: boolean;
    enrollmentFlow?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    passwordStage?: string;
    passwordlessFlow?: string;
    recoveryFlow?: string;
    search?: string;
    showMatchedUser?: boolean;
    showSourceLabels?: boolean;
}

export interface StagesIdentificationPartialUpdateRequest {
    stageUuid: string;
    patchedIdentificationStageRequest?: PatchedIdentificationStageRequest;
}

export interface StagesIdentificationRetrieveRequest {
    stageUuid: string;
}

export interface StagesIdentificationUpdateRequest {
    stageUuid: string;
    identificationStageRequest: IdentificationStageRequest;
}

export interface StagesIdentificationUsedByListRequest {
    stageUuid: string;
}

export interface StagesInvitationInvitationsCreateRequest {
    invitationRequest: InvitationRequest;
}

export interface StagesInvitationInvitationsDestroyRequest {
    inviteUuid: string;
}

export interface StagesInvitationInvitationsListRequest {
    createdByUsername?: string;
    expires?: string;
    flowSlug?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface StagesInvitationInvitationsPartialUpdateRequest {
    inviteUuid: string;
    patchedInvitationRequest?: PatchedInvitationRequest;
}

export interface StagesInvitationInvitationsRetrieveRequest {
    inviteUuid: string;
}

export interface StagesInvitationInvitationsUpdateRequest {
    inviteUuid: string;
    invitationRequest: InvitationRequest;
}

export interface StagesInvitationInvitationsUsedByListRequest {
    inviteUuid: string;
}

export interface StagesInvitationStagesCreateRequest {
    invitationStageRequest: InvitationStageRequest;
}

export interface StagesInvitationStagesDestroyRequest {
    stageUuid: string;
}

export interface StagesInvitationStagesListRequest {
    continueFlowWithoutInvitation?: boolean;
    name?: string;
    noFlows?: boolean;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
}

export interface StagesInvitationStagesPartialUpdateRequest {
    stageUuid: string;
    patchedInvitationStageRequest?: PatchedInvitationStageRequest;
}

export interface StagesInvitationStagesRetrieveRequest {
    stageUuid: string;
}

export interface StagesInvitationStagesUpdateRequest {
    stageUuid: string;
    invitationStageRequest: InvitationStageRequest;
}

export interface StagesInvitationStagesUsedByListRequest {
    stageUuid: string;
}

export interface StagesPasswordCreateRequest {
    passwordStageRequest: PasswordStageRequest;
}

export interface StagesPasswordDestroyRequest {
    stageUuid: string;
}

export interface StagesPasswordListRequest {
    configureFlow?: string;
    failedAttemptsBeforeCancel?: number;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface StagesPasswordPartialUpdateRequest {
    stageUuid: string;
    patchedPasswordStageRequest?: PatchedPasswordStageRequest;
}

export interface StagesPasswordRetrieveRequest {
    stageUuid: string;
}

export interface StagesPasswordUpdateRequest {
    stageUuid: string;
    passwordStageRequest: PasswordStageRequest;
}

export interface StagesPasswordUsedByListRequest {
    stageUuid: string;
}

export interface StagesPromptPromptsCreateRequest {
    promptRequest: PromptRequest;
}

export interface StagesPromptPromptsDestroyRequest {
    promptUuid: string;
}

export interface StagesPromptPromptsListRequest {
    fieldKey?: string;
    label?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    placeholder?: string;
    search?: string;
    type?: StagesPromptPromptsListTypeEnum;
}

export interface StagesPromptPromptsPartialUpdateRequest {
    promptUuid: string;
    patchedPromptRequest?: PatchedPromptRequest;
}

export interface StagesPromptPromptsPreviewCreateRequest {
    promptRequest: PromptRequest;
}

export interface StagesPromptPromptsRetrieveRequest {
    promptUuid: string;
}

export interface StagesPromptPromptsUpdateRequest {
    promptUuid: string;
    promptRequest: PromptRequest;
}

export interface StagesPromptPromptsUsedByListRequest {
    promptUuid: string;
}

export interface StagesPromptStagesCreateRequest {
    promptStageRequest: PromptStageRequest;
}

export interface StagesPromptStagesDestroyRequest {
    stageUuid: string;
}

export interface StagesPromptStagesListRequest {
    fields?: Array<string>;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
    validationPolicies?: Array<string>;
}

export interface StagesPromptStagesPartialUpdateRequest {
    stageUuid: string;
    patchedPromptStageRequest?: PatchedPromptStageRequest;
}

export interface StagesPromptStagesRetrieveRequest {
    stageUuid: string;
}

export interface StagesPromptStagesUpdateRequest {
    stageUuid: string;
    promptStageRequest: PromptStageRequest;
}

export interface StagesPromptStagesUsedByListRequest {
    stageUuid: string;
}

export interface StagesUserDeleteCreateRequest {
    userDeleteStageRequest: UserDeleteStageRequest;
}

export interface StagesUserDeleteDestroyRequest {
    stageUuid: string;
}

export interface StagesUserDeleteListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
}

export interface StagesUserDeletePartialUpdateRequest {
    stageUuid: string;
    patchedUserDeleteStageRequest?: PatchedUserDeleteStageRequest;
}

export interface StagesUserDeleteRetrieveRequest {
    stageUuid: string;
}

export interface StagesUserDeleteUpdateRequest {
    stageUuid: string;
    userDeleteStageRequest: UserDeleteStageRequest;
}

export interface StagesUserDeleteUsedByListRequest {
    stageUuid: string;
}

export interface StagesUserLoginCreateRequest {
    userLoginStageRequest: UserLoginStageRequest;
}

export interface StagesUserLoginDestroyRequest {
    stageUuid: string;
}

export interface StagesUserLoginListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    rememberMeOffset?: string;
    search?: string;
    sessionDuration?: string;
    stageUuid?: string;
    terminateOtherSessions?: boolean;
}

export interface StagesUserLoginPartialUpdateRequest {
    stageUuid: string;
    patchedUserLoginStageRequest?: PatchedUserLoginStageRequest;
}

export interface StagesUserLoginRetrieveRequest {
    stageUuid: string;
}

export interface StagesUserLoginUpdateRequest {
    stageUuid: string;
    userLoginStageRequest: UserLoginStageRequest;
}

export interface StagesUserLoginUsedByListRequest {
    stageUuid: string;
}

export interface StagesUserLogoutCreateRequest {
    userLogoutStageRequest: UserLogoutStageRequest;
}

export interface StagesUserLogoutDestroyRequest {
    stageUuid: string;
}

export interface StagesUserLogoutListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
}

export interface StagesUserLogoutPartialUpdateRequest {
    stageUuid: string;
    patchedUserLogoutStageRequest?: PatchedUserLogoutStageRequest;
}

export interface StagesUserLogoutRetrieveRequest {
    stageUuid: string;
}

export interface StagesUserLogoutUpdateRequest {
    stageUuid: string;
    userLogoutStageRequest: UserLogoutStageRequest;
}

export interface StagesUserLogoutUsedByListRequest {
    stageUuid: string;
}

export interface StagesUserWriteCreateRequest {
    userWriteStageRequest: UserWriteStageRequest;
}

export interface StagesUserWriteDestroyRequest {
    stageUuid: string;
}

export interface StagesUserWriteListRequest {
    createUsersAsInactive?: boolean;
    createUsersGroup?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
    userCreationMode?: StagesUserWriteListUserCreationModeEnum;
    userPathTemplate?: string;
    userType?: StagesUserWriteListUserTypeEnum;
}

export interface StagesUserWritePartialUpdateRequest {
    stageUuid: string;
    patchedUserWriteStageRequest?: PatchedUserWriteStageRequest;
}

export interface StagesUserWriteRetrieveRequest {
    stageUuid: string;
}

export interface StagesUserWriteUpdateRequest {
    stageUuid: string;
    userWriteStageRequest: UserWriteStageRequest;
}

export interface StagesUserWriteUsedByListRequest {
    stageUuid: string;
}

/**
 * no description
 */
export class StagesApi extends BaseAPI {

    /**
     * Stage Viewset
     */
    stagesAllDestroy({ stageUuid }: StagesAllDestroyRequest): Observable<void>
    stagesAllDestroy({ stageUuid }: StagesAllDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesAllDestroy({ stageUuid }: StagesAllDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAllDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/all/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Stage Viewset
     */
    stagesAllList({ name, ordering, page, pageSize, search }: StagesAllListRequest): Observable<PaginatedStageList>
    stagesAllList({ name, ordering, page, pageSize, search }: StagesAllListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedStageList>>
    stagesAllList({ name, ordering, page, pageSize, search }: StagesAllListRequest, opts?: OperationOpts): Observable<PaginatedStageList | AjaxResponse<PaginatedStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedStageList>({
            url: '/stages/all/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Stage Viewset
     */
    stagesAllRetrieve({ stageUuid }: StagesAllRetrieveRequest): Observable<Stage>
    stagesAllRetrieve({ stageUuid }: StagesAllRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<Stage>>
    stagesAllRetrieve({ stageUuid }: StagesAllRetrieveRequest, opts?: OperationOpts): Observable<Stage | AjaxResponse<Stage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAllRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Stage>({
            url: '/stages/all/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get all creatable stage types
     */
    stagesAllTypesList(): Observable<Array<TypeCreate>>
    stagesAllTypesList(opts?: OperationOpts): Observable<AjaxResponse<Array<TypeCreate>>>
    stagesAllTypesList(opts?: OperationOpts): Observable<Array<TypeCreate> | AjaxResponse<Array<TypeCreate>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<TypeCreate>>({
            url: '/stages/all/types/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesAllUsedByList({ stageUuid }: StagesAllUsedByListRequest): Observable<Array<UsedBy>>
    stagesAllUsedByList({ stageUuid }: StagesAllUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesAllUsedByList({ stageUuid }: StagesAllUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAllUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/all/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get all stages the user can configure
     */
    stagesAllUserSettingsList(): Observable<Array<UserSetting>>
    stagesAllUserSettingsList(opts?: OperationOpts): Observable<AjaxResponse<Array<UserSetting>>>
    stagesAllUserSettingsList(opts?: OperationOpts): Observable<Array<UserSetting> | AjaxResponse<Array<UserSetting>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UserSetting>>({
            url: '/stages/all/user_settings/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorDuoStage Viewset
     */
    stagesAuthenticatorDuoCreate({ authenticatorDuoStageRequest }: StagesAuthenticatorDuoCreateRequest): Observable<AuthenticatorDuoStage>
    stagesAuthenticatorDuoCreate({ authenticatorDuoStageRequest }: StagesAuthenticatorDuoCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorDuoStage>>
    stagesAuthenticatorDuoCreate({ authenticatorDuoStageRequest }: StagesAuthenticatorDuoCreateRequest, opts?: OperationOpts): Observable<AuthenticatorDuoStage | AjaxResponse<AuthenticatorDuoStage>> {
        throwIfNullOrUndefined(authenticatorDuoStageRequest, 'authenticatorDuoStageRequest', 'stagesAuthenticatorDuoCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorDuoStage>({
            url: '/stages/authenticator/duo/',
            method: 'POST',
            headers,
            body: authenticatorDuoStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorDuoStage Viewset
     */
    stagesAuthenticatorDuoDestroy({ stageUuid }: StagesAuthenticatorDuoDestroyRequest): Observable<void>
    stagesAuthenticatorDuoDestroy({ stageUuid }: StagesAuthenticatorDuoDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesAuthenticatorDuoDestroy({ stageUuid }: StagesAuthenticatorDuoDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorDuoDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/authenticator/duo/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Check enrollment status of user details in current session
     */
    stagesAuthenticatorDuoEnrollmentStatusCreate({ stageUuid }: StagesAuthenticatorDuoEnrollmentStatusCreateRequest): Observable<DuoDeviceEnrollmentStatus>
    stagesAuthenticatorDuoEnrollmentStatusCreate({ stageUuid }: StagesAuthenticatorDuoEnrollmentStatusCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<DuoDeviceEnrollmentStatus>>
    stagesAuthenticatorDuoEnrollmentStatusCreate({ stageUuid }: StagesAuthenticatorDuoEnrollmentStatusCreateRequest, opts?: OperationOpts): Observable<DuoDeviceEnrollmentStatus | AjaxResponse<DuoDeviceEnrollmentStatus>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorDuoEnrollmentStatusCreate');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DuoDeviceEnrollmentStatus>({
            url: '/stages/authenticator/duo/{stage_uuid}/enrollment_status/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Import duo devices into authentik
     */
    stagesAuthenticatorDuoImportDeviceManualCreate({ stageUuid, authenticatorDuoStageManualDeviceImportRequest }: StagesAuthenticatorDuoImportDeviceManualCreateRequest): Observable<void>
    stagesAuthenticatorDuoImportDeviceManualCreate({ stageUuid, authenticatorDuoStageManualDeviceImportRequest }: StagesAuthenticatorDuoImportDeviceManualCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesAuthenticatorDuoImportDeviceManualCreate({ stageUuid, authenticatorDuoStageManualDeviceImportRequest }: StagesAuthenticatorDuoImportDeviceManualCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorDuoImportDeviceManualCreate');
        throwIfNullOrUndefined(authenticatorDuoStageManualDeviceImportRequest, 'authenticatorDuoStageManualDeviceImportRequest', 'stagesAuthenticatorDuoImportDeviceManualCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/authenticator/duo/{stage_uuid}/import_device_manual/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'POST',
            headers,
            body: authenticatorDuoStageManualDeviceImportRequest,
        }, opts?.responseOpts);
    };

    /**
     * Import duo devices into authentik
     */
    stagesAuthenticatorDuoImportDevicesAutomaticCreate({ stageUuid }: StagesAuthenticatorDuoImportDevicesAutomaticCreateRequest): Observable<AuthenticatorDuoStageDeviceImportResponse>
    stagesAuthenticatorDuoImportDevicesAutomaticCreate({ stageUuid }: StagesAuthenticatorDuoImportDevicesAutomaticCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorDuoStageDeviceImportResponse>>
    stagesAuthenticatorDuoImportDevicesAutomaticCreate({ stageUuid }: StagesAuthenticatorDuoImportDevicesAutomaticCreateRequest, opts?: OperationOpts): Observable<AuthenticatorDuoStageDeviceImportResponse | AjaxResponse<AuthenticatorDuoStageDeviceImportResponse>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorDuoImportDevicesAutomaticCreate');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorDuoStageDeviceImportResponse>({
            url: '/stages/authenticator/duo/{stage_uuid}/import_devices_automatic/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorDuoStage Viewset
     */
    stagesAuthenticatorDuoList({ apiHostname, clientId, configureFlow, name, ordering, page, pageSize, search }: StagesAuthenticatorDuoListRequest): Observable<PaginatedAuthenticatorDuoStageList>
    stagesAuthenticatorDuoList({ apiHostname, clientId, configureFlow, name, ordering, page, pageSize, search }: StagesAuthenticatorDuoListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedAuthenticatorDuoStageList>>
    stagesAuthenticatorDuoList({ apiHostname, clientId, configureFlow, name, ordering, page, pageSize, search }: StagesAuthenticatorDuoListRequest, opts?: OperationOpts): Observable<PaginatedAuthenticatorDuoStageList | AjaxResponse<PaginatedAuthenticatorDuoStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (apiHostname != null) { query['api_hostname'] = apiHostname; }
        if (clientId != null) { query['client_id'] = clientId; }
        if (configureFlow != null) { query['configure_flow'] = configureFlow; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedAuthenticatorDuoStageList>({
            url: '/stages/authenticator/duo/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorDuoStage Viewset
     */
    stagesAuthenticatorDuoPartialUpdate({ stageUuid, patchedAuthenticatorDuoStageRequest }: StagesAuthenticatorDuoPartialUpdateRequest): Observable<AuthenticatorDuoStage>
    stagesAuthenticatorDuoPartialUpdate({ stageUuid, patchedAuthenticatorDuoStageRequest }: StagesAuthenticatorDuoPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorDuoStage>>
    stagesAuthenticatorDuoPartialUpdate({ stageUuid, patchedAuthenticatorDuoStageRequest }: StagesAuthenticatorDuoPartialUpdateRequest, opts?: OperationOpts): Observable<AuthenticatorDuoStage | AjaxResponse<AuthenticatorDuoStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorDuoPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorDuoStage>({
            url: '/stages/authenticator/duo/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedAuthenticatorDuoStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorDuoStage Viewset
     */
    stagesAuthenticatorDuoRetrieve({ stageUuid }: StagesAuthenticatorDuoRetrieveRequest): Observable<AuthenticatorDuoStage>
    stagesAuthenticatorDuoRetrieve({ stageUuid }: StagesAuthenticatorDuoRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorDuoStage>>
    stagesAuthenticatorDuoRetrieve({ stageUuid }: StagesAuthenticatorDuoRetrieveRequest, opts?: OperationOpts): Observable<AuthenticatorDuoStage | AjaxResponse<AuthenticatorDuoStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorDuoRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorDuoStage>({
            url: '/stages/authenticator/duo/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorDuoStage Viewset
     */
    stagesAuthenticatorDuoUpdate({ stageUuid, authenticatorDuoStageRequest }: StagesAuthenticatorDuoUpdateRequest): Observable<AuthenticatorDuoStage>
    stagesAuthenticatorDuoUpdate({ stageUuid, authenticatorDuoStageRequest }: StagesAuthenticatorDuoUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorDuoStage>>
    stagesAuthenticatorDuoUpdate({ stageUuid, authenticatorDuoStageRequest }: StagesAuthenticatorDuoUpdateRequest, opts?: OperationOpts): Observable<AuthenticatorDuoStage | AjaxResponse<AuthenticatorDuoStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorDuoUpdate');
        throwIfNullOrUndefined(authenticatorDuoStageRequest, 'authenticatorDuoStageRequest', 'stagesAuthenticatorDuoUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorDuoStage>({
            url: '/stages/authenticator/duo/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: authenticatorDuoStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesAuthenticatorDuoUsedByList({ stageUuid }: StagesAuthenticatorDuoUsedByListRequest): Observable<Array<UsedBy>>
    stagesAuthenticatorDuoUsedByList({ stageUuid }: StagesAuthenticatorDuoUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesAuthenticatorDuoUsedByList({ stageUuid }: StagesAuthenticatorDuoUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorDuoUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/authenticator/duo/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorSMSStage Viewset
     */
    stagesAuthenticatorSmsCreate({ authenticatorSMSStageRequest }: StagesAuthenticatorSmsCreateRequest): Observable<AuthenticatorSMSStage>
    stagesAuthenticatorSmsCreate({ authenticatorSMSStageRequest }: StagesAuthenticatorSmsCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorSMSStage>>
    stagesAuthenticatorSmsCreate({ authenticatorSMSStageRequest }: StagesAuthenticatorSmsCreateRequest, opts?: OperationOpts): Observable<AuthenticatorSMSStage | AjaxResponse<AuthenticatorSMSStage>> {
        throwIfNullOrUndefined(authenticatorSMSStageRequest, 'authenticatorSMSStageRequest', 'stagesAuthenticatorSmsCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorSMSStage>({
            url: '/stages/authenticator/sms/',
            method: 'POST',
            headers,
            body: authenticatorSMSStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorSMSStage Viewset
     */
    stagesAuthenticatorSmsDestroy({ stageUuid }: StagesAuthenticatorSmsDestroyRequest): Observable<void>
    stagesAuthenticatorSmsDestroy({ stageUuid }: StagesAuthenticatorSmsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesAuthenticatorSmsDestroy({ stageUuid }: StagesAuthenticatorSmsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorSmsDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/authenticator/sms/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorSMSStage Viewset
     */
    stagesAuthenticatorSmsList({ accountSid, auth, authPassword, authType, configureFlow, friendlyName, fromNumber, mapping, name, ordering, page, pageSize, provider, search, stageUuid, verifyOnly }: StagesAuthenticatorSmsListRequest): Observable<PaginatedAuthenticatorSMSStageList>
    stagesAuthenticatorSmsList({ accountSid, auth, authPassword, authType, configureFlow, friendlyName, fromNumber, mapping, name, ordering, page, pageSize, provider, search, stageUuid, verifyOnly }: StagesAuthenticatorSmsListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedAuthenticatorSMSStageList>>
    stagesAuthenticatorSmsList({ accountSid, auth, authPassword, authType, configureFlow, friendlyName, fromNumber, mapping, name, ordering, page, pageSize, provider, search, stageUuid, verifyOnly }: StagesAuthenticatorSmsListRequest, opts?: OperationOpts): Observable<PaginatedAuthenticatorSMSStageList | AjaxResponse<PaginatedAuthenticatorSMSStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (accountSid != null) { query['account_sid'] = accountSid; }
        if (auth != null) { query['auth'] = auth; }
        if (authPassword != null) { query['auth_password'] = authPassword; }
        if (authType != null) { query['auth_type'] = authType; }
        if (configureFlow != null) { query['configure_flow'] = configureFlow; }
        if (friendlyName != null) { query['friendly_name'] = friendlyName; }
        if (fromNumber != null) { query['from_number'] = fromNumber; }
        if (mapping != null) { query['mapping'] = mapping; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (provider != null) { query['provider'] = provider; }
        if (search != null) { query['search'] = search; }
        if (stageUuid != null) { query['stage_uuid'] = stageUuid; }
        if (verifyOnly != null) { query['verify_only'] = verifyOnly; }

        return this.request<PaginatedAuthenticatorSMSStageList>({
            url: '/stages/authenticator/sms/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorSMSStage Viewset
     */
    stagesAuthenticatorSmsPartialUpdate({ stageUuid, patchedAuthenticatorSMSStageRequest }: StagesAuthenticatorSmsPartialUpdateRequest): Observable<AuthenticatorSMSStage>
    stagesAuthenticatorSmsPartialUpdate({ stageUuid, patchedAuthenticatorSMSStageRequest }: StagesAuthenticatorSmsPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorSMSStage>>
    stagesAuthenticatorSmsPartialUpdate({ stageUuid, patchedAuthenticatorSMSStageRequest }: StagesAuthenticatorSmsPartialUpdateRequest, opts?: OperationOpts): Observable<AuthenticatorSMSStage | AjaxResponse<AuthenticatorSMSStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorSmsPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorSMSStage>({
            url: '/stages/authenticator/sms/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedAuthenticatorSMSStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorSMSStage Viewset
     */
    stagesAuthenticatorSmsRetrieve({ stageUuid }: StagesAuthenticatorSmsRetrieveRequest): Observable<AuthenticatorSMSStage>
    stagesAuthenticatorSmsRetrieve({ stageUuid }: StagesAuthenticatorSmsRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorSMSStage>>
    stagesAuthenticatorSmsRetrieve({ stageUuid }: StagesAuthenticatorSmsRetrieveRequest, opts?: OperationOpts): Observable<AuthenticatorSMSStage | AjaxResponse<AuthenticatorSMSStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorSmsRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorSMSStage>({
            url: '/stages/authenticator/sms/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorSMSStage Viewset
     */
    stagesAuthenticatorSmsUpdate({ stageUuid, authenticatorSMSStageRequest }: StagesAuthenticatorSmsUpdateRequest): Observable<AuthenticatorSMSStage>
    stagesAuthenticatorSmsUpdate({ stageUuid, authenticatorSMSStageRequest }: StagesAuthenticatorSmsUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorSMSStage>>
    stagesAuthenticatorSmsUpdate({ stageUuid, authenticatorSMSStageRequest }: StagesAuthenticatorSmsUpdateRequest, opts?: OperationOpts): Observable<AuthenticatorSMSStage | AjaxResponse<AuthenticatorSMSStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorSmsUpdate');
        throwIfNullOrUndefined(authenticatorSMSStageRequest, 'authenticatorSMSStageRequest', 'stagesAuthenticatorSmsUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorSMSStage>({
            url: '/stages/authenticator/sms/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: authenticatorSMSStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesAuthenticatorSmsUsedByList({ stageUuid }: StagesAuthenticatorSmsUsedByListRequest): Observable<Array<UsedBy>>
    stagesAuthenticatorSmsUsedByList({ stageUuid }: StagesAuthenticatorSmsUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesAuthenticatorSmsUsedByList({ stageUuid }: StagesAuthenticatorSmsUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorSmsUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/authenticator/sms/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorStaticStage Viewset
     */
    stagesAuthenticatorStaticCreate({ authenticatorStaticStageRequest }: StagesAuthenticatorStaticCreateRequest): Observable<AuthenticatorStaticStage>
    stagesAuthenticatorStaticCreate({ authenticatorStaticStageRequest }: StagesAuthenticatorStaticCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorStaticStage>>
    stagesAuthenticatorStaticCreate({ authenticatorStaticStageRequest }: StagesAuthenticatorStaticCreateRequest, opts?: OperationOpts): Observable<AuthenticatorStaticStage | AjaxResponse<AuthenticatorStaticStage>> {
        throwIfNullOrUndefined(authenticatorStaticStageRequest, 'authenticatorStaticStageRequest', 'stagesAuthenticatorStaticCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorStaticStage>({
            url: '/stages/authenticator/static/',
            method: 'POST',
            headers,
            body: authenticatorStaticStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorStaticStage Viewset
     */
    stagesAuthenticatorStaticDestroy({ stageUuid }: StagesAuthenticatorStaticDestroyRequest): Observable<void>
    stagesAuthenticatorStaticDestroy({ stageUuid }: StagesAuthenticatorStaticDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesAuthenticatorStaticDestroy({ stageUuid }: StagesAuthenticatorStaticDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorStaticDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/authenticator/static/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorStaticStage Viewset
     */
    stagesAuthenticatorStaticList({ configureFlow, friendlyName, name, ordering, page, pageSize, search, stageUuid, tokenCount, tokenLength }: StagesAuthenticatorStaticListRequest): Observable<PaginatedAuthenticatorStaticStageList>
    stagesAuthenticatorStaticList({ configureFlow, friendlyName, name, ordering, page, pageSize, search, stageUuid, tokenCount, tokenLength }: StagesAuthenticatorStaticListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedAuthenticatorStaticStageList>>
    stagesAuthenticatorStaticList({ configureFlow, friendlyName, name, ordering, page, pageSize, search, stageUuid, tokenCount, tokenLength }: StagesAuthenticatorStaticListRequest, opts?: OperationOpts): Observable<PaginatedAuthenticatorStaticStageList | AjaxResponse<PaginatedAuthenticatorStaticStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (configureFlow != null) { query['configure_flow'] = configureFlow; }
        if (friendlyName != null) { query['friendly_name'] = friendlyName; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (stageUuid != null) { query['stage_uuid'] = stageUuid; }
        if (tokenCount != null) { query['token_count'] = tokenCount; }
        if (tokenLength != null) { query['token_length'] = tokenLength; }

        return this.request<PaginatedAuthenticatorStaticStageList>({
            url: '/stages/authenticator/static/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorStaticStage Viewset
     */
    stagesAuthenticatorStaticPartialUpdate({ stageUuid, patchedAuthenticatorStaticStageRequest }: StagesAuthenticatorStaticPartialUpdateRequest): Observable<AuthenticatorStaticStage>
    stagesAuthenticatorStaticPartialUpdate({ stageUuid, patchedAuthenticatorStaticStageRequest }: StagesAuthenticatorStaticPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorStaticStage>>
    stagesAuthenticatorStaticPartialUpdate({ stageUuid, patchedAuthenticatorStaticStageRequest }: StagesAuthenticatorStaticPartialUpdateRequest, opts?: OperationOpts): Observable<AuthenticatorStaticStage | AjaxResponse<AuthenticatorStaticStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorStaticPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorStaticStage>({
            url: '/stages/authenticator/static/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedAuthenticatorStaticStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorStaticStage Viewset
     */
    stagesAuthenticatorStaticRetrieve({ stageUuid }: StagesAuthenticatorStaticRetrieveRequest): Observable<AuthenticatorStaticStage>
    stagesAuthenticatorStaticRetrieve({ stageUuid }: StagesAuthenticatorStaticRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorStaticStage>>
    stagesAuthenticatorStaticRetrieve({ stageUuid }: StagesAuthenticatorStaticRetrieveRequest, opts?: OperationOpts): Observable<AuthenticatorStaticStage | AjaxResponse<AuthenticatorStaticStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorStaticRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorStaticStage>({
            url: '/stages/authenticator/static/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorStaticStage Viewset
     */
    stagesAuthenticatorStaticUpdate({ stageUuid, authenticatorStaticStageRequest }: StagesAuthenticatorStaticUpdateRequest): Observable<AuthenticatorStaticStage>
    stagesAuthenticatorStaticUpdate({ stageUuid, authenticatorStaticStageRequest }: StagesAuthenticatorStaticUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorStaticStage>>
    stagesAuthenticatorStaticUpdate({ stageUuid, authenticatorStaticStageRequest }: StagesAuthenticatorStaticUpdateRequest, opts?: OperationOpts): Observable<AuthenticatorStaticStage | AjaxResponse<AuthenticatorStaticStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorStaticUpdate');
        throwIfNullOrUndefined(authenticatorStaticStageRequest, 'authenticatorStaticStageRequest', 'stagesAuthenticatorStaticUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorStaticStage>({
            url: '/stages/authenticator/static/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: authenticatorStaticStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesAuthenticatorStaticUsedByList({ stageUuid }: StagesAuthenticatorStaticUsedByListRequest): Observable<Array<UsedBy>>
    stagesAuthenticatorStaticUsedByList({ stageUuid }: StagesAuthenticatorStaticUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesAuthenticatorStaticUsedByList({ stageUuid }: StagesAuthenticatorStaticUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorStaticUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/authenticator/static/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorTOTPStage Viewset
     */
    stagesAuthenticatorTotpCreate({ authenticatorTOTPStageRequest }: StagesAuthenticatorTotpCreateRequest): Observable<AuthenticatorTOTPStage>
    stagesAuthenticatorTotpCreate({ authenticatorTOTPStageRequest }: StagesAuthenticatorTotpCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorTOTPStage>>
    stagesAuthenticatorTotpCreate({ authenticatorTOTPStageRequest }: StagesAuthenticatorTotpCreateRequest, opts?: OperationOpts): Observable<AuthenticatorTOTPStage | AjaxResponse<AuthenticatorTOTPStage>> {
        throwIfNullOrUndefined(authenticatorTOTPStageRequest, 'authenticatorTOTPStageRequest', 'stagesAuthenticatorTotpCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorTOTPStage>({
            url: '/stages/authenticator/totp/',
            method: 'POST',
            headers,
            body: authenticatorTOTPStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorTOTPStage Viewset
     */
    stagesAuthenticatorTotpDestroy({ stageUuid }: StagesAuthenticatorTotpDestroyRequest): Observable<void>
    stagesAuthenticatorTotpDestroy({ stageUuid }: StagesAuthenticatorTotpDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesAuthenticatorTotpDestroy({ stageUuid }: StagesAuthenticatorTotpDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorTotpDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/authenticator/totp/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorTOTPStage Viewset
     */
    stagesAuthenticatorTotpList({ configureFlow, digits, friendlyName, name, ordering, page, pageSize, search, stageUuid }: StagesAuthenticatorTotpListRequest): Observable<PaginatedAuthenticatorTOTPStageList>
    stagesAuthenticatorTotpList({ configureFlow, digits, friendlyName, name, ordering, page, pageSize, search, stageUuid }: StagesAuthenticatorTotpListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedAuthenticatorTOTPStageList>>
    stagesAuthenticatorTotpList({ configureFlow, digits, friendlyName, name, ordering, page, pageSize, search, stageUuid }: StagesAuthenticatorTotpListRequest, opts?: OperationOpts): Observable<PaginatedAuthenticatorTOTPStageList | AjaxResponse<PaginatedAuthenticatorTOTPStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (configureFlow != null) { query['configure_flow'] = configureFlow; }
        if (digits != null) { query['digits'] = digits; }
        if (friendlyName != null) { query['friendly_name'] = friendlyName; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (stageUuid != null) { query['stage_uuid'] = stageUuid; }

        return this.request<PaginatedAuthenticatorTOTPStageList>({
            url: '/stages/authenticator/totp/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorTOTPStage Viewset
     */
    stagesAuthenticatorTotpPartialUpdate({ stageUuid, patchedAuthenticatorTOTPStageRequest }: StagesAuthenticatorTotpPartialUpdateRequest): Observable<AuthenticatorTOTPStage>
    stagesAuthenticatorTotpPartialUpdate({ stageUuid, patchedAuthenticatorTOTPStageRequest }: StagesAuthenticatorTotpPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorTOTPStage>>
    stagesAuthenticatorTotpPartialUpdate({ stageUuid, patchedAuthenticatorTOTPStageRequest }: StagesAuthenticatorTotpPartialUpdateRequest, opts?: OperationOpts): Observable<AuthenticatorTOTPStage | AjaxResponse<AuthenticatorTOTPStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorTotpPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorTOTPStage>({
            url: '/stages/authenticator/totp/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedAuthenticatorTOTPStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorTOTPStage Viewset
     */
    stagesAuthenticatorTotpRetrieve({ stageUuid }: StagesAuthenticatorTotpRetrieveRequest): Observable<AuthenticatorTOTPStage>
    stagesAuthenticatorTotpRetrieve({ stageUuid }: StagesAuthenticatorTotpRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorTOTPStage>>
    stagesAuthenticatorTotpRetrieve({ stageUuid }: StagesAuthenticatorTotpRetrieveRequest, opts?: OperationOpts): Observable<AuthenticatorTOTPStage | AjaxResponse<AuthenticatorTOTPStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorTotpRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorTOTPStage>({
            url: '/stages/authenticator/totp/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorTOTPStage Viewset
     */
    stagesAuthenticatorTotpUpdate({ stageUuid, authenticatorTOTPStageRequest }: StagesAuthenticatorTotpUpdateRequest): Observable<AuthenticatorTOTPStage>
    stagesAuthenticatorTotpUpdate({ stageUuid, authenticatorTOTPStageRequest }: StagesAuthenticatorTotpUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorTOTPStage>>
    stagesAuthenticatorTotpUpdate({ stageUuid, authenticatorTOTPStageRequest }: StagesAuthenticatorTotpUpdateRequest, opts?: OperationOpts): Observable<AuthenticatorTOTPStage | AjaxResponse<AuthenticatorTOTPStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorTotpUpdate');
        throwIfNullOrUndefined(authenticatorTOTPStageRequest, 'authenticatorTOTPStageRequest', 'stagesAuthenticatorTotpUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorTOTPStage>({
            url: '/stages/authenticator/totp/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: authenticatorTOTPStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesAuthenticatorTotpUsedByList({ stageUuid }: StagesAuthenticatorTotpUsedByListRequest): Observable<Array<UsedBy>>
    stagesAuthenticatorTotpUsedByList({ stageUuid }: StagesAuthenticatorTotpUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesAuthenticatorTotpUsedByList({ stageUuid }: StagesAuthenticatorTotpUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorTotpUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/authenticator/totp/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorValidateStage Viewset
     */
    stagesAuthenticatorValidateCreate({ authenticatorValidateStageRequest }: StagesAuthenticatorValidateCreateRequest): Observable<AuthenticatorValidateStage>
    stagesAuthenticatorValidateCreate({ authenticatorValidateStageRequest }: StagesAuthenticatorValidateCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorValidateStage>>
    stagesAuthenticatorValidateCreate({ authenticatorValidateStageRequest }: StagesAuthenticatorValidateCreateRequest, opts?: OperationOpts): Observable<AuthenticatorValidateStage | AjaxResponse<AuthenticatorValidateStage>> {
        throwIfNullOrUndefined(authenticatorValidateStageRequest, 'authenticatorValidateStageRequest', 'stagesAuthenticatorValidateCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorValidateStage>({
            url: '/stages/authenticator/validate/',
            method: 'POST',
            headers,
            body: authenticatorValidateStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorValidateStage Viewset
     */
    stagesAuthenticatorValidateDestroy({ stageUuid }: StagesAuthenticatorValidateDestroyRequest): Observable<void>
    stagesAuthenticatorValidateDestroy({ stageUuid }: StagesAuthenticatorValidateDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesAuthenticatorValidateDestroy({ stageUuid }: StagesAuthenticatorValidateDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorValidateDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/authenticator/validate/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorValidateStage Viewset
     */
    stagesAuthenticatorValidateList({ configurationStages, name, notConfiguredAction, ordering, page, pageSize, search }: StagesAuthenticatorValidateListRequest): Observable<PaginatedAuthenticatorValidateStageList>
    stagesAuthenticatorValidateList({ configurationStages, name, notConfiguredAction, ordering, page, pageSize, search }: StagesAuthenticatorValidateListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedAuthenticatorValidateStageList>>
    stagesAuthenticatorValidateList({ configurationStages, name, notConfiguredAction, ordering, page, pageSize, search }: StagesAuthenticatorValidateListRequest, opts?: OperationOpts): Observable<PaginatedAuthenticatorValidateStageList | AjaxResponse<PaginatedAuthenticatorValidateStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (configurationStages != null) { query['configuration_stages'] = configurationStages; }
        if (name != null) { query['name'] = name; }
        if (notConfiguredAction != null) { query['not_configured_action'] = notConfiguredAction; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedAuthenticatorValidateStageList>({
            url: '/stages/authenticator/validate/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorValidateStage Viewset
     */
    stagesAuthenticatorValidatePartialUpdate({ stageUuid, patchedAuthenticatorValidateStageRequest }: StagesAuthenticatorValidatePartialUpdateRequest): Observable<AuthenticatorValidateStage>
    stagesAuthenticatorValidatePartialUpdate({ stageUuid, patchedAuthenticatorValidateStageRequest }: StagesAuthenticatorValidatePartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorValidateStage>>
    stagesAuthenticatorValidatePartialUpdate({ stageUuid, patchedAuthenticatorValidateStageRequest }: StagesAuthenticatorValidatePartialUpdateRequest, opts?: OperationOpts): Observable<AuthenticatorValidateStage | AjaxResponse<AuthenticatorValidateStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorValidatePartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorValidateStage>({
            url: '/stages/authenticator/validate/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedAuthenticatorValidateStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorValidateStage Viewset
     */
    stagesAuthenticatorValidateRetrieve({ stageUuid }: StagesAuthenticatorValidateRetrieveRequest): Observable<AuthenticatorValidateStage>
    stagesAuthenticatorValidateRetrieve({ stageUuid }: StagesAuthenticatorValidateRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorValidateStage>>
    stagesAuthenticatorValidateRetrieve({ stageUuid }: StagesAuthenticatorValidateRetrieveRequest, opts?: OperationOpts): Observable<AuthenticatorValidateStage | AjaxResponse<AuthenticatorValidateStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorValidateRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorValidateStage>({
            url: '/stages/authenticator/validate/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticatorValidateStage Viewset
     */
    stagesAuthenticatorValidateUpdate({ stageUuid, authenticatorValidateStageRequest }: StagesAuthenticatorValidateUpdateRequest): Observable<AuthenticatorValidateStage>
    stagesAuthenticatorValidateUpdate({ stageUuid, authenticatorValidateStageRequest }: StagesAuthenticatorValidateUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticatorValidateStage>>
    stagesAuthenticatorValidateUpdate({ stageUuid, authenticatorValidateStageRequest }: StagesAuthenticatorValidateUpdateRequest, opts?: OperationOpts): Observable<AuthenticatorValidateStage | AjaxResponse<AuthenticatorValidateStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorValidateUpdate');
        throwIfNullOrUndefined(authenticatorValidateStageRequest, 'authenticatorValidateStageRequest', 'stagesAuthenticatorValidateUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticatorValidateStage>({
            url: '/stages/authenticator/validate/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: authenticatorValidateStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesAuthenticatorValidateUsedByList({ stageUuid }: StagesAuthenticatorValidateUsedByListRequest): Observable<Array<UsedBy>>
    stagesAuthenticatorValidateUsedByList({ stageUuid }: StagesAuthenticatorValidateUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesAuthenticatorValidateUsedByList({ stageUuid }: StagesAuthenticatorValidateUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorValidateUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/authenticator/validate/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    stagesAuthenticatorWebauthnCreate({ authenticateWebAuthnStageRequest }: StagesAuthenticatorWebauthnCreateRequest): Observable<AuthenticateWebAuthnStage>
    stagesAuthenticatorWebauthnCreate({ authenticateWebAuthnStageRequest }: StagesAuthenticatorWebauthnCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticateWebAuthnStage>>
    stagesAuthenticatorWebauthnCreate({ authenticateWebAuthnStageRequest }: StagesAuthenticatorWebauthnCreateRequest, opts?: OperationOpts): Observable<AuthenticateWebAuthnStage | AjaxResponse<AuthenticateWebAuthnStage>> {
        throwIfNullOrUndefined(authenticateWebAuthnStageRequest, 'authenticateWebAuthnStageRequest', 'stagesAuthenticatorWebauthnCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticateWebAuthnStage>({
            url: '/stages/authenticator/webauthn/',
            method: 'POST',
            headers,
            body: authenticateWebAuthnStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    stagesAuthenticatorWebauthnDestroy({ stageUuid }: StagesAuthenticatorWebauthnDestroyRequest): Observable<void>
    stagesAuthenticatorWebauthnDestroy({ stageUuid }: StagesAuthenticatorWebauthnDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesAuthenticatorWebauthnDestroy({ stageUuid }: StagesAuthenticatorWebauthnDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorWebauthnDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/authenticator/webauthn/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    stagesAuthenticatorWebauthnList({ authenticatorAttachment, configureFlow, friendlyName, name, ordering, page, pageSize, residentKeyRequirement, search, stageUuid, userVerification }: StagesAuthenticatorWebauthnListRequest): Observable<PaginatedAuthenticateWebAuthnStageList>
    stagesAuthenticatorWebauthnList({ authenticatorAttachment, configureFlow, friendlyName, name, ordering, page, pageSize, residentKeyRequirement, search, stageUuid, userVerification }: StagesAuthenticatorWebauthnListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedAuthenticateWebAuthnStageList>>
    stagesAuthenticatorWebauthnList({ authenticatorAttachment, configureFlow, friendlyName, name, ordering, page, pageSize, residentKeyRequirement, search, stageUuid, userVerification }: StagesAuthenticatorWebauthnListRequest, opts?: OperationOpts): Observable<PaginatedAuthenticateWebAuthnStageList | AjaxResponse<PaginatedAuthenticateWebAuthnStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (authenticatorAttachment != null) { query['authenticator_attachment'] = authenticatorAttachment; }
        if (configureFlow != null) { query['configure_flow'] = configureFlow; }
        if (friendlyName != null) { query['friendly_name'] = friendlyName; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (residentKeyRequirement != null) { query['resident_key_requirement'] = residentKeyRequirement; }
        if (search != null) { query['search'] = search; }
        if (stageUuid != null) { query['stage_uuid'] = stageUuid; }
        if (userVerification != null) { query['user_verification'] = userVerification; }

        return this.request<PaginatedAuthenticateWebAuthnStageList>({
            url: '/stages/authenticator/webauthn/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    stagesAuthenticatorWebauthnPartialUpdate({ stageUuid, patchedAuthenticateWebAuthnStageRequest }: StagesAuthenticatorWebauthnPartialUpdateRequest): Observable<AuthenticateWebAuthnStage>
    stagesAuthenticatorWebauthnPartialUpdate({ stageUuid, patchedAuthenticateWebAuthnStageRequest }: StagesAuthenticatorWebauthnPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticateWebAuthnStage>>
    stagesAuthenticatorWebauthnPartialUpdate({ stageUuid, patchedAuthenticateWebAuthnStageRequest }: StagesAuthenticatorWebauthnPartialUpdateRequest, opts?: OperationOpts): Observable<AuthenticateWebAuthnStage | AjaxResponse<AuthenticateWebAuthnStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorWebauthnPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticateWebAuthnStage>({
            url: '/stages/authenticator/webauthn/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedAuthenticateWebAuthnStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    stagesAuthenticatorWebauthnRetrieve({ stageUuid }: StagesAuthenticatorWebauthnRetrieveRequest): Observable<AuthenticateWebAuthnStage>
    stagesAuthenticatorWebauthnRetrieve({ stageUuid }: StagesAuthenticatorWebauthnRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticateWebAuthnStage>>
    stagesAuthenticatorWebauthnRetrieve({ stageUuid }: StagesAuthenticatorWebauthnRetrieveRequest, opts?: OperationOpts): Observable<AuthenticateWebAuthnStage | AjaxResponse<AuthenticateWebAuthnStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorWebauthnRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticateWebAuthnStage>({
            url: '/stages/authenticator/webauthn/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    stagesAuthenticatorWebauthnUpdate({ stageUuid, authenticateWebAuthnStageRequest }: StagesAuthenticatorWebauthnUpdateRequest): Observable<AuthenticateWebAuthnStage>
    stagesAuthenticatorWebauthnUpdate({ stageUuid, authenticateWebAuthnStageRequest }: StagesAuthenticatorWebauthnUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<AuthenticateWebAuthnStage>>
    stagesAuthenticatorWebauthnUpdate({ stageUuid, authenticateWebAuthnStageRequest }: StagesAuthenticatorWebauthnUpdateRequest, opts?: OperationOpts): Observable<AuthenticateWebAuthnStage | AjaxResponse<AuthenticateWebAuthnStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorWebauthnUpdate');
        throwIfNullOrUndefined(authenticateWebAuthnStageRequest, 'authenticateWebAuthnStageRequest', 'stagesAuthenticatorWebauthnUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<AuthenticateWebAuthnStage>({
            url: '/stages/authenticator/webauthn/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: authenticateWebAuthnStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesAuthenticatorWebauthnUsedByList({ stageUuid }: StagesAuthenticatorWebauthnUsedByListRequest): Observable<Array<UsedBy>>
    stagesAuthenticatorWebauthnUsedByList({ stageUuid }: StagesAuthenticatorWebauthnUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesAuthenticatorWebauthnUsedByList({ stageUuid }: StagesAuthenticatorWebauthnUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesAuthenticatorWebauthnUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/authenticator/webauthn/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * CaptchaStage Viewset
     */
    stagesCaptchaCreate({ captchaStageRequest }: StagesCaptchaCreateRequest): Observable<CaptchaStage>
    stagesCaptchaCreate({ captchaStageRequest }: StagesCaptchaCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<CaptchaStage>>
    stagesCaptchaCreate({ captchaStageRequest }: StagesCaptchaCreateRequest, opts?: OperationOpts): Observable<CaptchaStage | AjaxResponse<CaptchaStage>> {
        throwIfNullOrUndefined(captchaStageRequest, 'captchaStageRequest', 'stagesCaptchaCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<CaptchaStage>({
            url: '/stages/captcha/',
            method: 'POST',
            headers,
            body: captchaStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * CaptchaStage Viewset
     */
    stagesCaptchaDestroy({ stageUuid }: StagesCaptchaDestroyRequest): Observable<void>
    stagesCaptchaDestroy({ stageUuid }: StagesCaptchaDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesCaptchaDestroy({ stageUuid }: StagesCaptchaDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesCaptchaDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/captcha/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * CaptchaStage Viewset
     */
    stagesCaptchaList({ name, ordering, page, pageSize, publicKey, search }: StagesCaptchaListRequest): Observable<PaginatedCaptchaStageList>
    stagesCaptchaList({ name, ordering, page, pageSize, publicKey, search }: StagesCaptchaListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedCaptchaStageList>>
    stagesCaptchaList({ name, ordering, page, pageSize, publicKey, search }: StagesCaptchaListRequest, opts?: OperationOpts): Observable<PaginatedCaptchaStageList | AjaxResponse<PaginatedCaptchaStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (publicKey != null) { query['public_key'] = publicKey; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedCaptchaStageList>({
            url: '/stages/captcha/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * CaptchaStage Viewset
     */
    stagesCaptchaPartialUpdate({ stageUuid, patchedCaptchaStageRequest }: StagesCaptchaPartialUpdateRequest): Observable<CaptchaStage>
    stagesCaptchaPartialUpdate({ stageUuid, patchedCaptchaStageRequest }: StagesCaptchaPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<CaptchaStage>>
    stagesCaptchaPartialUpdate({ stageUuid, patchedCaptchaStageRequest }: StagesCaptchaPartialUpdateRequest, opts?: OperationOpts): Observable<CaptchaStage | AjaxResponse<CaptchaStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesCaptchaPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<CaptchaStage>({
            url: '/stages/captcha/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedCaptchaStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * CaptchaStage Viewset
     */
    stagesCaptchaRetrieve({ stageUuid }: StagesCaptchaRetrieveRequest): Observable<CaptchaStage>
    stagesCaptchaRetrieve({ stageUuid }: StagesCaptchaRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<CaptchaStage>>
    stagesCaptchaRetrieve({ stageUuid }: StagesCaptchaRetrieveRequest, opts?: OperationOpts): Observable<CaptchaStage | AjaxResponse<CaptchaStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesCaptchaRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<CaptchaStage>({
            url: '/stages/captcha/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * CaptchaStage Viewset
     */
    stagesCaptchaUpdate({ stageUuid, captchaStageRequest }: StagesCaptchaUpdateRequest): Observable<CaptchaStage>
    stagesCaptchaUpdate({ stageUuid, captchaStageRequest }: StagesCaptchaUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<CaptchaStage>>
    stagesCaptchaUpdate({ stageUuid, captchaStageRequest }: StagesCaptchaUpdateRequest, opts?: OperationOpts): Observable<CaptchaStage | AjaxResponse<CaptchaStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesCaptchaUpdate');
        throwIfNullOrUndefined(captchaStageRequest, 'captchaStageRequest', 'stagesCaptchaUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<CaptchaStage>({
            url: '/stages/captcha/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: captchaStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesCaptchaUsedByList({ stageUuid }: StagesCaptchaUsedByListRequest): Observable<Array<UsedBy>>
    stagesCaptchaUsedByList({ stageUuid }: StagesCaptchaUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesCaptchaUsedByList({ stageUuid }: StagesCaptchaUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesCaptchaUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/captcha/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ConsentStage Viewset
     */
    stagesConsentCreate({ consentStageRequest }: StagesConsentCreateRequest): Observable<ConsentStage>
    stagesConsentCreate({ consentStageRequest }: StagesConsentCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<ConsentStage>>
    stagesConsentCreate({ consentStageRequest }: StagesConsentCreateRequest, opts?: OperationOpts): Observable<ConsentStage | AjaxResponse<ConsentStage>> {
        throwIfNullOrUndefined(consentStageRequest, 'consentStageRequest', 'stagesConsentCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ConsentStage>({
            url: '/stages/consent/',
            method: 'POST',
            headers,
            body: consentStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * ConsentStage Viewset
     */
    stagesConsentDestroy({ stageUuid }: StagesConsentDestroyRequest): Observable<void>
    stagesConsentDestroy({ stageUuid }: StagesConsentDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesConsentDestroy({ stageUuid }: StagesConsentDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesConsentDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/consent/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ConsentStage Viewset
     */
    stagesConsentList({ consentExpireIn, mode, name, ordering, page, pageSize, search, stageUuid }: StagesConsentListRequest): Observable<PaginatedConsentStageList>
    stagesConsentList({ consentExpireIn, mode, name, ordering, page, pageSize, search, stageUuid }: StagesConsentListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedConsentStageList>>
    stagesConsentList({ consentExpireIn, mode, name, ordering, page, pageSize, search, stageUuid }: StagesConsentListRequest, opts?: OperationOpts): Observable<PaginatedConsentStageList | AjaxResponse<PaginatedConsentStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (consentExpireIn != null) { query['consent_expire_in'] = consentExpireIn; }
        if (mode != null) { query['mode'] = mode; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (stageUuid != null) { query['stage_uuid'] = stageUuid; }

        return this.request<PaginatedConsentStageList>({
            url: '/stages/consent/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * ConsentStage Viewset
     */
    stagesConsentPartialUpdate({ stageUuid, patchedConsentStageRequest }: StagesConsentPartialUpdateRequest): Observable<ConsentStage>
    stagesConsentPartialUpdate({ stageUuid, patchedConsentStageRequest }: StagesConsentPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<ConsentStage>>
    stagesConsentPartialUpdate({ stageUuid, patchedConsentStageRequest }: StagesConsentPartialUpdateRequest, opts?: OperationOpts): Observable<ConsentStage | AjaxResponse<ConsentStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesConsentPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ConsentStage>({
            url: '/stages/consent/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedConsentStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * ConsentStage Viewset
     */
    stagesConsentRetrieve({ stageUuid }: StagesConsentRetrieveRequest): Observable<ConsentStage>
    stagesConsentRetrieve({ stageUuid }: StagesConsentRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<ConsentStage>>
    stagesConsentRetrieve({ stageUuid }: StagesConsentRetrieveRequest, opts?: OperationOpts): Observable<ConsentStage | AjaxResponse<ConsentStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesConsentRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ConsentStage>({
            url: '/stages/consent/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ConsentStage Viewset
     */
    stagesConsentUpdate({ stageUuid, consentStageRequest }: StagesConsentUpdateRequest): Observable<ConsentStage>
    stagesConsentUpdate({ stageUuid, consentStageRequest }: StagesConsentUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<ConsentStage>>
    stagesConsentUpdate({ stageUuid, consentStageRequest }: StagesConsentUpdateRequest, opts?: OperationOpts): Observable<ConsentStage | AjaxResponse<ConsentStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesConsentUpdate');
        throwIfNullOrUndefined(consentStageRequest, 'consentStageRequest', 'stagesConsentUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ConsentStage>({
            url: '/stages/consent/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: consentStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesConsentUsedByList({ stageUuid }: StagesConsentUsedByListRequest): Observable<Array<UsedBy>>
    stagesConsentUsedByList({ stageUuid }: StagesConsentUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesConsentUsedByList({ stageUuid }: StagesConsentUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesConsentUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/consent/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * DenyStage Viewset
     */
    stagesDenyCreate({ denyStageRequest }: StagesDenyCreateRequest): Observable<DenyStage>
    stagesDenyCreate({ denyStageRequest }: StagesDenyCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<DenyStage>>
    stagesDenyCreate({ denyStageRequest }: StagesDenyCreateRequest, opts?: OperationOpts): Observable<DenyStage | AjaxResponse<DenyStage>> {
        throwIfNullOrUndefined(denyStageRequest, 'denyStageRequest', 'stagesDenyCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DenyStage>({
            url: '/stages/deny/',
            method: 'POST',
            headers,
            body: denyStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * DenyStage Viewset
     */
    stagesDenyDestroy({ stageUuid }: StagesDenyDestroyRequest): Observable<void>
    stagesDenyDestroy({ stageUuid }: StagesDenyDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesDenyDestroy({ stageUuid }: StagesDenyDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesDenyDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/deny/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * DenyStage Viewset
     */
    stagesDenyList({ denyMessage, name, ordering, page, pageSize, search, stageUuid }: StagesDenyListRequest): Observable<PaginatedDenyStageList>
    stagesDenyList({ denyMessage, name, ordering, page, pageSize, search, stageUuid }: StagesDenyListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedDenyStageList>>
    stagesDenyList({ denyMessage, name, ordering, page, pageSize, search, stageUuid }: StagesDenyListRequest, opts?: OperationOpts): Observable<PaginatedDenyStageList | AjaxResponse<PaginatedDenyStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (denyMessage != null) { query['deny_message'] = denyMessage; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (stageUuid != null) { query['stage_uuid'] = stageUuid; }

        return this.request<PaginatedDenyStageList>({
            url: '/stages/deny/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * DenyStage Viewset
     */
    stagesDenyPartialUpdate({ stageUuid, patchedDenyStageRequest }: StagesDenyPartialUpdateRequest): Observable<DenyStage>
    stagesDenyPartialUpdate({ stageUuid, patchedDenyStageRequest }: StagesDenyPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<DenyStage>>
    stagesDenyPartialUpdate({ stageUuid, patchedDenyStageRequest }: StagesDenyPartialUpdateRequest, opts?: OperationOpts): Observable<DenyStage | AjaxResponse<DenyStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesDenyPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DenyStage>({
            url: '/stages/deny/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedDenyStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * DenyStage Viewset
     */
    stagesDenyRetrieve({ stageUuid }: StagesDenyRetrieveRequest): Observable<DenyStage>
    stagesDenyRetrieve({ stageUuid }: StagesDenyRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<DenyStage>>
    stagesDenyRetrieve({ stageUuid }: StagesDenyRetrieveRequest, opts?: OperationOpts): Observable<DenyStage | AjaxResponse<DenyStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesDenyRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DenyStage>({
            url: '/stages/deny/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * DenyStage Viewset
     */
    stagesDenyUpdate({ stageUuid, denyStageRequest }: StagesDenyUpdateRequest): Observable<DenyStage>
    stagesDenyUpdate({ stageUuid, denyStageRequest }: StagesDenyUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<DenyStage>>
    stagesDenyUpdate({ stageUuid, denyStageRequest }: StagesDenyUpdateRequest, opts?: OperationOpts): Observable<DenyStage | AjaxResponse<DenyStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesDenyUpdate');
        throwIfNullOrUndefined(denyStageRequest, 'denyStageRequest', 'stagesDenyUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DenyStage>({
            url: '/stages/deny/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: denyStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesDenyUsedByList({ stageUuid }: StagesDenyUsedByListRequest): Observable<Array<UsedBy>>
    stagesDenyUsedByList({ stageUuid }: StagesDenyUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesDenyUsedByList({ stageUuid }: StagesDenyUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesDenyUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/deny/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * DummyStage Viewset
     */
    stagesDummyCreate({ dummyStageRequest }: StagesDummyCreateRequest): Observable<DummyStage>
    stagesDummyCreate({ dummyStageRequest }: StagesDummyCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<DummyStage>>
    stagesDummyCreate({ dummyStageRequest }: StagesDummyCreateRequest, opts?: OperationOpts): Observable<DummyStage | AjaxResponse<DummyStage>> {
        throwIfNullOrUndefined(dummyStageRequest, 'dummyStageRequest', 'stagesDummyCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DummyStage>({
            url: '/stages/dummy/',
            method: 'POST',
            headers,
            body: dummyStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * DummyStage Viewset
     */
    stagesDummyDestroy({ stageUuid }: StagesDummyDestroyRequest): Observable<void>
    stagesDummyDestroy({ stageUuid }: StagesDummyDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesDummyDestroy({ stageUuid }: StagesDummyDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesDummyDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/dummy/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * DummyStage Viewset
     */
    stagesDummyList({ name, ordering, page, pageSize, search, stageUuid, throwError }: StagesDummyListRequest): Observable<PaginatedDummyStageList>
    stagesDummyList({ name, ordering, page, pageSize, search, stageUuid, throwError }: StagesDummyListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedDummyStageList>>
    stagesDummyList({ name, ordering, page, pageSize, search, stageUuid, throwError }: StagesDummyListRequest, opts?: OperationOpts): Observable<PaginatedDummyStageList | AjaxResponse<PaginatedDummyStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (stageUuid != null) { query['stage_uuid'] = stageUuid; }
        if (throwError != null) { query['throw_error'] = throwError; }

        return this.request<PaginatedDummyStageList>({
            url: '/stages/dummy/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * DummyStage Viewset
     */
    stagesDummyPartialUpdate({ stageUuid, patchedDummyStageRequest }: StagesDummyPartialUpdateRequest): Observable<DummyStage>
    stagesDummyPartialUpdate({ stageUuid, patchedDummyStageRequest }: StagesDummyPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<DummyStage>>
    stagesDummyPartialUpdate({ stageUuid, patchedDummyStageRequest }: StagesDummyPartialUpdateRequest, opts?: OperationOpts): Observable<DummyStage | AjaxResponse<DummyStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesDummyPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DummyStage>({
            url: '/stages/dummy/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedDummyStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * DummyStage Viewset
     */
    stagesDummyRetrieve({ stageUuid }: StagesDummyRetrieveRequest): Observable<DummyStage>
    stagesDummyRetrieve({ stageUuid }: StagesDummyRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<DummyStage>>
    stagesDummyRetrieve({ stageUuid }: StagesDummyRetrieveRequest, opts?: OperationOpts): Observable<DummyStage | AjaxResponse<DummyStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesDummyRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DummyStage>({
            url: '/stages/dummy/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * DummyStage Viewset
     */
    stagesDummyUpdate({ stageUuid, dummyStageRequest }: StagesDummyUpdateRequest): Observable<DummyStage>
    stagesDummyUpdate({ stageUuid, dummyStageRequest }: StagesDummyUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<DummyStage>>
    stagesDummyUpdate({ stageUuid, dummyStageRequest }: StagesDummyUpdateRequest, opts?: OperationOpts): Observable<DummyStage | AjaxResponse<DummyStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesDummyUpdate');
        throwIfNullOrUndefined(dummyStageRequest, 'dummyStageRequest', 'stagesDummyUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<DummyStage>({
            url: '/stages/dummy/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: dummyStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesDummyUsedByList({ stageUuid }: StagesDummyUsedByListRequest): Observable<Array<UsedBy>>
    stagesDummyUsedByList({ stageUuid }: StagesDummyUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesDummyUsedByList({ stageUuid }: StagesDummyUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesDummyUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/dummy/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * EmailStage Viewset
     */
    stagesEmailCreate({ emailStageRequest }: StagesEmailCreateRequest): Observable<EmailStage>
    stagesEmailCreate({ emailStageRequest }: StagesEmailCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<EmailStage>>
    stagesEmailCreate({ emailStageRequest }: StagesEmailCreateRequest, opts?: OperationOpts): Observable<EmailStage | AjaxResponse<EmailStage>> {
        throwIfNullOrUndefined(emailStageRequest, 'emailStageRequest', 'stagesEmailCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<EmailStage>({
            url: '/stages/email/',
            method: 'POST',
            headers,
            body: emailStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * EmailStage Viewset
     */
    stagesEmailDestroy({ stageUuid }: StagesEmailDestroyRequest): Observable<void>
    stagesEmailDestroy({ stageUuid }: StagesEmailDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesEmailDestroy({ stageUuid }: StagesEmailDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesEmailDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/email/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * EmailStage Viewset
     */
    stagesEmailList({ activateUserOnSuccess, fromAddress, host, name, ordering, page, pageSize, port, search, subject, template, timeout, tokenExpiry, useGlobalSettings, useSsl, useTls, username }: StagesEmailListRequest): Observable<PaginatedEmailStageList>
    stagesEmailList({ activateUserOnSuccess, fromAddress, host, name, ordering, page, pageSize, port, search, subject, template, timeout, tokenExpiry, useGlobalSettings, useSsl, useTls, username }: StagesEmailListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedEmailStageList>>
    stagesEmailList({ activateUserOnSuccess, fromAddress, host, name, ordering, page, pageSize, port, search, subject, template, timeout, tokenExpiry, useGlobalSettings, useSsl, useTls, username }: StagesEmailListRequest, opts?: OperationOpts): Observable<PaginatedEmailStageList | AjaxResponse<PaginatedEmailStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (activateUserOnSuccess != null) { query['activate_user_on_success'] = activateUserOnSuccess; }
        if (fromAddress != null) { query['from_address'] = fromAddress; }
        if (host != null) { query['host'] = host; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (port != null) { query['port'] = port; }
        if (search != null) { query['search'] = search; }
        if (subject != null) { query['subject'] = subject; }
        if (template != null) { query['template'] = template; }
        if (timeout != null) { query['timeout'] = timeout; }
        if (tokenExpiry != null) { query['token_expiry'] = tokenExpiry; }
        if (useGlobalSettings != null) { query['use_global_settings'] = useGlobalSettings; }
        if (useSsl != null) { query['use_ssl'] = useSsl; }
        if (useTls != null) { query['use_tls'] = useTls; }
        if (username != null) { query['username'] = username; }

        return this.request<PaginatedEmailStageList>({
            url: '/stages/email/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * EmailStage Viewset
     */
    stagesEmailPartialUpdate({ stageUuid, patchedEmailStageRequest }: StagesEmailPartialUpdateRequest): Observable<EmailStage>
    stagesEmailPartialUpdate({ stageUuid, patchedEmailStageRequest }: StagesEmailPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<EmailStage>>
    stagesEmailPartialUpdate({ stageUuid, patchedEmailStageRequest }: StagesEmailPartialUpdateRequest, opts?: OperationOpts): Observable<EmailStage | AjaxResponse<EmailStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesEmailPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<EmailStage>({
            url: '/stages/email/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedEmailStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * EmailStage Viewset
     */
    stagesEmailRetrieve({ stageUuid }: StagesEmailRetrieveRequest): Observable<EmailStage>
    stagesEmailRetrieve({ stageUuid }: StagesEmailRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<EmailStage>>
    stagesEmailRetrieve({ stageUuid }: StagesEmailRetrieveRequest, opts?: OperationOpts): Observable<EmailStage | AjaxResponse<EmailStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesEmailRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<EmailStage>({
            url: '/stages/email/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get all available templates, including custom templates
     */
    stagesEmailTemplatesList(): Observable<Array<TypeCreate>>
    stagesEmailTemplatesList(opts?: OperationOpts): Observable<AjaxResponse<Array<TypeCreate>>>
    stagesEmailTemplatesList(opts?: OperationOpts): Observable<Array<TypeCreate> | AjaxResponse<Array<TypeCreate>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<TypeCreate>>({
            url: '/stages/email/templates/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * EmailStage Viewset
     */
    stagesEmailUpdate({ stageUuid, emailStageRequest }: StagesEmailUpdateRequest): Observable<EmailStage>
    stagesEmailUpdate({ stageUuid, emailStageRequest }: StagesEmailUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<EmailStage>>
    stagesEmailUpdate({ stageUuid, emailStageRequest }: StagesEmailUpdateRequest, opts?: OperationOpts): Observable<EmailStage | AjaxResponse<EmailStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesEmailUpdate');
        throwIfNullOrUndefined(emailStageRequest, 'emailStageRequest', 'stagesEmailUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<EmailStage>({
            url: '/stages/email/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: emailStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesEmailUsedByList({ stageUuid }: StagesEmailUsedByListRequest): Observable<Array<UsedBy>>
    stagesEmailUsedByList({ stageUuid }: StagesEmailUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesEmailUsedByList({ stageUuid }: StagesEmailUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesEmailUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/email/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * IdentificationStage Viewset
     */
    stagesIdentificationCreate({ identificationStageRequest }: StagesIdentificationCreateRequest): Observable<IdentificationStage>
    stagesIdentificationCreate({ identificationStageRequest }: StagesIdentificationCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<IdentificationStage>>
    stagesIdentificationCreate({ identificationStageRequest }: StagesIdentificationCreateRequest, opts?: OperationOpts): Observable<IdentificationStage | AjaxResponse<IdentificationStage>> {
        throwIfNullOrUndefined(identificationStageRequest, 'identificationStageRequest', 'stagesIdentificationCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<IdentificationStage>({
            url: '/stages/identification/',
            method: 'POST',
            headers,
            body: identificationStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * IdentificationStage Viewset
     */
    stagesIdentificationDestroy({ stageUuid }: StagesIdentificationDestroyRequest): Observable<void>
    stagesIdentificationDestroy({ stageUuid }: StagesIdentificationDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesIdentificationDestroy({ stageUuid }: StagesIdentificationDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesIdentificationDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/identification/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * IdentificationStage Viewset
     */
    stagesIdentificationList({ caseInsensitiveMatching, enrollmentFlow, name, ordering, page, pageSize, passwordStage, passwordlessFlow, recoveryFlow, search, showMatchedUser, showSourceLabels }: StagesIdentificationListRequest): Observable<PaginatedIdentificationStageList>
    stagesIdentificationList({ caseInsensitiveMatching, enrollmentFlow, name, ordering, page, pageSize, passwordStage, passwordlessFlow, recoveryFlow, search, showMatchedUser, showSourceLabels }: StagesIdentificationListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedIdentificationStageList>>
    stagesIdentificationList({ caseInsensitiveMatching, enrollmentFlow, name, ordering, page, pageSize, passwordStage, passwordlessFlow, recoveryFlow, search, showMatchedUser, showSourceLabels }: StagesIdentificationListRequest, opts?: OperationOpts): Observable<PaginatedIdentificationStageList | AjaxResponse<PaginatedIdentificationStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (caseInsensitiveMatching != null) { query['case_insensitive_matching'] = caseInsensitiveMatching; }
        if (enrollmentFlow != null) { query['enrollment_flow'] = enrollmentFlow; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (passwordStage != null) { query['password_stage'] = passwordStage; }
        if (passwordlessFlow != null) { query['passwordless_flow'] = passwordlessFlow; }
        if (recoveryFlow != null) { query['recovery_flow'] = recoveryFlow; }
        if (search != null) { query['search'] = search; }
        if (showMatchedUser != null) { query['show_matched_user'] = showMatchedUser; }
        if (showSourceLabels != null) { query['show_source_labels'] = showSourceLabels; }

        return this.request<PaginatedIdentificationStageList>({
            url: '/stages/identification/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * IdentificationStage Viewset
     */
    stagesIdentificationPartialUpdate({ stageUuid, patchedIdentificationStageRequest }: StagesIdentificationPartialUpdateRequest): Observable<IdentificationStage>
    stagesIdentificationPartialUpdate({ stageUuid, patchedIdentificationStageRequest }: StagesIdentificationPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<IdentificationStage>>
    stagesIdentificationPartialUpdate({ stageUuid, patchedIdentificationStageRequest }: StagesIdentificationPartialUpdateRequest, opts?: OperationOpts): Observable<IdentificationStage | AjaxResponse<IdentificationStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesIdentificationPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<IdentificationStage>({
            url: '/stages/identification/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedIdentificationStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * IdentificationStage Viewset
     */
    stagesIdentificationRetrieve({ stageUuid }: StagesIdentificationRetrieveRequest): Observable<IdentificationStage>
    stagesIdentificationRetrieve({ stageUuid }: StagesIdentificationRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<IdentificationStage>>
    stagesIdentificationRetrieve({ stageUuid }: StagesIdentificationRetrieveRequest, opts?: OperationOpts): Observable<IdentificationStage | AjaxResponse<IdentificationStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesIdentificationRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<IdentificationStage>({
            url: '/stages/identification/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * IdentificationStage Viewset
     */
    stagesIdentificationUpdate({ stageUuid, identificationStageRequest }: StagesIdentificationUpdateRequest): Observable<IdentificationStage>
    stagesIdentificationUpdate({ stageUuid, identificationStageRequest }: StagesIdentificationUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<IdentificationStage>>
    stagesIdentificationUpdate({ stageUuid, identificationStageRequest }: StagesIdentificationUpdateRequest, opts?: OperationOpts): Observable<IdentificationStage | AjaxResponse<IdentificationStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesIdentificationUpdate');
        throwIfNullOrUndefined(identificationStageRequest, 'identificationStageRequest', 'stagesIdentificationUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<IdentificationStage>({
            url: '/stages/identification/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: identificationStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesIdentificationUsedByList({ stageUuid }: StagesIdentificationUsedByListRequest): Observable<Array<UsedBy>>
    stagesIdentificationUsedByList({ stageUuid }: StagesIdentificationUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesIdentificationUsedByList({ stageUuid }: StagesIdentificationUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesIdentificationUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/identification/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Invitation Viewset
     */
    stagesInvitationInvitationsCreate({ invitationRequest }: StagesInvitationInvitationsCreateRequest): Observable<Invitation>
    stagesInvitationInvitationsCreate({ invitationRequest }: StagesInvitationInvitationsCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<Invitation>>
    stagesInvitationInvitationsCreate({ invitationRequest }: StagesInvitationInvitationsCreateRequest, opts?: OperationOpts): Observable<Invitation | AjaxResponse<Invitation>> {
        throwIfNullOrUndefined(invitationRequest, 'invitationRequest', 'stagesInvitationInvitationsCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Invitation>({
            url: '/stages/invitation/invitations/',
            method: 'POST',
            headers,
            body: invitationRequest,
        }, opts?.responseOpts);
    };

    /**
     * Invitation Viewset
     */
    stagesInvitationInvitationsDestroy({ inviteUuid }: StagesInvitationInvitationsDestroyRequest): Observable<void>
    stagesInvitationInvitationsDestroy({ inviteUuid }: StagesInvitationInvitationsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesInvitationInvitationsDestroy({ inviteUuid }: StagesInvitationInvitationsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(inviteUuid, 'inviteUuid', 'stagesInvitationInvitationsDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/invitation/invitations/{invite_uuid}/'.replace('{invite_uuid}', encodeURI(inviteUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Invitation Viewset
     */
    stagesInvitationInvitationsList({ createdByUsername, expires, flowSlug, name, ordering, page, pageSize, search }: StagesInvitationInvitationsListRequest): Observable<PaginatedInvitationList>
    stagesInvitationInvitationsList({ createdByUsername, expires, flowSlug, name, ordering, page, pageSize, search }: StagesInvitationInvitationsListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedInvitationList>>
    stagesInvitationInvitationsList({ createdByUsername, expires, flowSlug, name, ordering, page, pageSize, search }: StagesInvitationInvitationsListRequest, opts?: OperationOpts): Observable<PaginatedInvitationList | AjaxResponse<PaginatedInvitationList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (createdByUsername != null) { query['created_by__username'] = createdByUsername; }
        if (expires != null) { query['expires'] = (expires as any).toISOString(); }
        if (flowSlug != null) { query['flow__slug'] = flowSlug; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedInvitationList>({
            url: '/stages/invitation/invitations/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Invitation Viewset
     */
    stagesInvitationInvitationsPartialUpdate({ inviteUuid, patchedInvitationRequest }: StagesInvitationInvitationsPartialUpdateRequest): Observable<Invitation>
    stagesInvitationInvitationsPartialUpdate({ inviteUuid, patchedInvitationRequest }: StagesInvitationInvitationsPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Invitation>>
    stagesInvitationInvitationsPartialUpdate({ inviteUuid, patchedInvitationRequest }: StagesInvitationInvitationsPartialUpdateRequest, opts?: OperationOpts): Observable<Invitation | AjaxResponse<Invitation>> {
        throwIfNullOrUndefined(inviteUuid, 'inviteUuid', 'stagesInvitationInvitationsPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Invitation>({
            url: '/stages/invitation/invitations/{invite_uuid}/'.replace('{invite_uuid}', encodeURI(inviteUuid)),
            method: 'PATCH',
            headers,
            body: patchedInvitationRequest,
        }, opts?.responseOpts);
    };

    /**
     * Invitation Viewset
     */
    stagesInvitationInvitationsRetrieve({ inviteUuid }: StagesInvitationInvitationsRetrieveRequest): Observable<Invitation>
    stagesInvitationInvitationsRetrieve({ inviteUuid }: StagesInvitationInvitationsRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<Invitation>>
    stagesInvitationInvitationsRetrieve({ inviteUuid }: StagesInvitationInvitationsRetrieveRequest, opts?: OperationOpts): Observable<Invitation | AjaxResponse<Invitation>> {
        throwIfNullOrUndefined(inviteUuid, 'inviteUuid', 'stagesInvitationInvitationsRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Invitation>({
            url: '/stages/invitation/invitations/{invite_uuid}/'.replace('{invite_uuid}', encodeURI(inviteUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Invitation Viewset
     */
    stagesInvitationInvitationsUpdate({ inviteUuid, invitationRequest }: StagesInvitationInvitationsUpdateRequest): Observable<Invitation>
    stagesInvitationInvitationsUpdate({ inviteUuid, invitationRequest }: StagesInvitationInvitationsUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Invitation>>
    stagesInvitationInvitationsUpdate({ inviteUuid, invitationRequest }: StagesInvitationInvitationsUpdateRequest, opts?: OperationOpts): Observable<Invitation | AjaxResponse<Invitation>> {
        throwIfNullOrUndefined(inviteUuid, 'inviteUuid', 'stagesInvitationInvitationsUpdate');
        throwIfNullOrUndefined(invitationRequest, 'invitationRequest', 'stagesInvitationInvitationsUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Invitation>({
            url: '/stages/invitation/invitations/{invite_uuid}/'.replace('{invite_uuid}', encodeURI(inviteUuid)),
            method: 'PUT',
            headers,
            body: invitationRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesInvitationInvitationsUsedByList({ inviteUuid }: StagesInvitationInvitationsUsedByListRequest): Observable<Array<UsedBy>>
    stagesInvitationInvitationsUsedByList({ inviteUuid }: StagesInvitationInvitationsUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesInvitationInvitationsUsedByList({ inviteUuid }: StagesInvitationInvitationsUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(inviteUuid, 'inviteUuid', 'stagesInvitationInvitationsUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/invitation/invitations/{invite_uuid}/used_by/'.replace('{invite_uuid}', encodeURI(inviteUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * InvitationStage Viewset
     */
    stagesInvitationStagesCreate({ invitationStageRequest }: StagesInvitationStagesCreateRequest): Observable<InvitationStage>
    stagesInvitationStagesCreate({ invitationStageRequest }: StagesInvitationStagesCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<InvitationStage>>
    stagesInvitationStagesCreate({ invitationStageRequest }: StagesInvitationStagesCreateRequest, opts?: OperationOpts): Observable<InvitationStage | AjaxResponse<InvitationStage>> {
        throwIfNullOrUndefined(invitationStageRequest, 'invitationStageRequest', 'stagesInvitationStagesCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<InvitationStage>({
            url: '/stages/invitation/stages/',
            method: 'POST',
            headers,
            body: invitationStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * InvitationStage Viewset
     */
    stagesInvitationStagesDestroy({ stageUuid }: StagesInvitationStagesDestroyRequest): Observable<void>
    stagesInvitationStagesDestroy({ stageUuid }: StagesInvitationStagesDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesInvitationStagesDestroy({ stageUuid }: StagesInvitationStagesDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesInvitationStagesDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/invitation/stages/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * InvitationStage Viewset
     */
    stagesInvitationStagesList({ continueFlowWithoutInvitation, name, noFlows, ordering, page, pageSize, search, stageUuid }: StagesInvitationStagesListRequest): Observable<PaginatedInvitationStageList>
    stagesInvitationStagesList({ continueFlowWithoutInvitation, name, noFlows, ordering, page, pageSize, search, stageUuid }: StagesInvitationStagesListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedInvitationStageList>>
    stagesInvitationStagesList({ continueFlowWithoutInvitation, name, noFlows, ordering, page, pageSize, search, stageUuid }: StagesInvitationStagesListRequest, opts?: OperationOpts): Observable<PaginatedInvitationStageList | AjaxResponse<PaginatedInvitationStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (continueFlowWithoutInvitation != null) { query['continue_flow_without_invitation'] = continueFlowWithoutInvitation; }
        if (name != null) { query['name'] = name; }
        if (noFlows != null) { query['no_flows'] = noFlows; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (stageUuid != null) { query['stage_uuid'] = stageUuid; }

        return this.request<PaginatedInvitationStageList>({
            url: '/stages/invitation/stages/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * InvitationStage Viewset
     */
    stagesInvitationStagesPartialUpdate({ stageUuid, patchedInvitationStageRequest }: StagesInvitationStagesPartialUpdateRequest): Observable<InvitationStage>
    stagesInvitationStagesPartialUpdate({ stageUuid, patchedInvitationStageRequest }: StagesInvitationStagesPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<InvitationStage>>
    stagesInvitationStagesPartialUpdate({ stageUuid, patchedInvitationStageRequest }: StagesInvitationStagesPartialUpdateRequest, opts?: OperationOpts): Observable<InvitationStage | AjaxResponse<InvitationStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesInvitationStagesPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<InvitationStage>({
            url: '/stages/invitation/stages/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedInvitationStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * InvitationStage Viewset
     */
    stagesInvitationStagesRetrieve({ stageUuid }: StagesInvitationStagesRetrieveRequest): Observable<InvitationStage>
    stagesInvitationStagesRetrieve({ stageUuid }: StagesInvitationStagesRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<InvitationStage>>
    stagesInvitationStagesRetrieve({ stageUuid }: StagesInvitationStagesRetrieveRequest, opts?: OperationOpts): Observable<InvitationStage | AjaxResponse<InvitationStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesInvitationStagesRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<InvitationStage>({
            url: '/stages/invitation/stages/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * InvitationStage Viewset
     */
    stagesInvitationStagesUpdate({ stageUuid, invitationStageRequest }: StagesInvitationStagesUpdateRequest): Observable<InvitationStage>
    stagesInvitationStagesUpdate({ stageUuid, invitationStageRequest }: StagesInvitationStagesUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<InvitationStage>>
    stagesInvitationStagesUpdate({ stageUuid, invitationStageRequest }: StagesInvitationStagesUpdateRequest, opts?: OperationOpts): Observable<InvitationStage | AjaxResponse<InvitationStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesInvitationStagesUpdate');
        throwIfNullOrUndefined(invitationStageRequest, 'invitationStageRequest', 'stagesInvitationStagesUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<InvitationStage>({
            url: '/stages/invitation/stages/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: invitationStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesInvitationStagesUsedByList({ stageUuid }: StagesInvitationStagesUsedByListRequest): Observable<Array<UsedBy>>
    stagesInvitationStagesUsedByList({ stageUuid }: StagesInvitationStagesUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesInvitationStagesUsedByList({ stageUuid }: StagesInvitationStagesUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesInvitationStagesUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/invitation/stages/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * PasswordStage Viewset
     */
    stagesPasswordCreate({ passwordStageRequest }: StagesPasswordCreateRequest): Observable<PasswordStage>
    stagesPasswordCreate({ passwordStageRequest }: StagesPasswordCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<PasswordStage>>
    stagesPasswordCreate({ passwordStageRequest }: StagesPasswordCreateRequest, opts?: OperationOpts): Observable<PasswordStage | AjaxResponse<PasswordStage>> {
        throwIfNullOrUndefined(passwordStageRequest, 'passwordStageRequest', 'stagesPasswordCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PasswordStage>({
            url: '/stages/password/',
            method: 'POST',
            headers,
            body: passwordStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * PasswordStage Viewset
     */
    stagesPasswordDestroy({ stageUuid }: StagesPasswordDestroyRequest): Observable<void>
    stagesPasswordDestroy({ stageUuid }: StagesPasswordDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesPasswordDestroy({ stageUuid }: StagesPasswordDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesPasswordDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/password/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * PasswordStage Viewset
     */
    stagesPasswordList({ configureFlow, failedAttemptsBeforeCancel, name, ordering, page, pageSize, search }: StagesPasswordListRequest): Observable<PaginatedPasswordStageList>
    stagesPasswordList({ configureFlow, failedAttemptsBeforeCancel, name, ordering, page, pageSize, search }: StagesPasswordListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedPasswordStageList>>
    stagesPasswordList({ configureFlow, failedAttemptsBeforeCancel, name, ordering, page, pageSize, search }: StagesPasswordListRequest, opts?: OperationOpts): Observable<PaginatedPasswordStageList | AjaxResponse<PaginatedPasswordStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (configureFlow != null) { query['configure_flow'] = configureFlow; }
        if (failedAttemptsBeforeCancel != null) { query['failed_attempts_before_cancel'] = failedAttemptsBeforeCancel; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedPasswordStageList>({
            url: '/stages/password/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * PasswordStage Viewset
     */
    stagesPasswordPartialUpdate({ stageUuid, patchedPasswordStageRequest }: StagesPasswordPartialUpdateRequest): Observable<PasswordStage>
    stagesPasswordPartialUpdate({ stageUuid, patchedPasswordStageRequest }: StagesPasswordPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<PasswordStage>>
    stagesPasswordPartialUpdate({ stageUuid, patchedPasswordStageRequest }: StagesPasswordPartialUpdateRequest, opts?: OperationOpts): Observable<PasswordStage | AjaxResponse<PasswordStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesPasswordPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PasswordStage>({
            url: '/stages/password/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedPasswordStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * PasswordStage Viewset
     */
    stagesPasswordRetrieve({ stageUuid }: StagesPasswordRetrieveRequest): Observable<PasswordStage>
    stagesPasswordRetrieve({ stageUuid }: StagesPasswordRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<PasswordStage>>
    stagesPasswordRetrieve({ stageUuid }: StagesPasswordRetrieveRequest, opts?: OperationOpts): Observable<PasswordStage | AjaxResponse<PasswordStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesPasswordRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PasswordStage>({
            url: '/stages/password/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * PasswordStage Viewset
     */
    stagesPasswordUpdate({ stageUuid, passwordStageRequest }: StagesPasswordUpdateRequest): Observable<PasswordStage>
    stagesPasswordUpdate({ stageUuid, passwordStageRequest }: StagesPasswordUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<PasswordStage>>
    stagesPasswordUpdate({ stageUuid, passwordStageRequest }: StagesPasswordUpdateRequest, opts?: OperationOpts): Observable<PasswordStage | AjaxResponse<PasswordStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesPasswordUpdate');
        throwIfNullOrUndefined(passwordStageRequest, 'passwordStageRequest', 'stagesPasswordUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PasswordStage>({
            url: '/stages/password/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: passwordStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesPasswordUsedByList({ stageUuid }: StagesPasswordUsedByListRequest): Observable<Array<UsedBy>>
    stagesPasswordUsedByList({ stageUuid }: StagesPasswordUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesPasswordUsedByList({ stageUuid }: StagesPasswordUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesPasswordUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/password/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Prompt Viewset
     */
    stagesPromptPromptsCreate({ promptRequest }: StagesPromptPromptsCreateRequest): Observable<Prompt>
    stagesPromptPromptsCreate({ promptRequest }: StagesPromptPromptsCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<Prompt>>
    stagesPromptPromptsCreate({ promptRequest }: StagesPromptPromptsCreateRequest, opts?: OperationOpts): Observable<Prompt | AjaxResponse<Prompt>> {
        throwIfNullOrUndefined(promptRequest, 'promptRequest', 'stagesPromptPromptsCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Prompt>({
            url: '/stages/prompt/prompts/',
            method: 'POST',
            headers,
            body: promptRequest,
        }, opts?.responseOpts);
    };

    /**
     * Prompt Viewset
     */
    stagesPromptPromptsDestroy({ promptUuid }: StagesPromptPromptsDestroyRequest): Observable<void>
    stagesPromptPromptsDestroy({ promptUuid }: StagesPromptPromptsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesPromptPromptsDestroy({ promptUuid }: StagesPromptPromptsDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(promptUuid, 'promptUuid', 'stagesPromptPromptsDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/prompt/prompts/{prompt_uuid}/'.replace('{prompt_uuid}', encodeURI(promptUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Prompt Viewset
     */
    stagesPromptPromptsList({ fieldKey, label, name, ordering, page, pageSize, placeholder, search, type }: StagesPromptPromptsListRequest): Observable<PaginatedPromptList>
    stagesPromptPromptsList({ fieldKey, label, name, ordering, page, pageSize, placeholder, search, type }: StagesPromptPromptsListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedPromptList>>
    stagesPromptPromptsList({ fieldKey, label, name, ordering, page, pageSize, placeholder, search, type }: StagesPromptPromptsListRequest, opts?: OperationOpts): Observable<PaginatedPromptList | AjaxResponse<PaginatedPromptList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (fieldKey != null) { query['field_key'] = fieldKey; }
        if (label != null) { query['label'] = label; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (placeholder != null) { query['placeholder'] = placeholder; }
        if (search != null) { query['search'] = search; }
        if (type != null) { query['type'] = type; }

        return this.request<PaginatedPromptList>({
            url: '/stages/prompt/prompts/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Prompt Viewset
     */
    stagesPromptPromptsPartialUpdate({ promptUuid, patchedPromptRequest }: StagesPromptPromptsPartialUpdateRequest): Observable<Prompt>
    stagesPromptPromptsPartialUpdate({ promptUuid, patchedPromptRequest }: StagesPromptPromptsPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Prompt>>
    stagesPromptPromptsPartialUpdate({ promptUuid, patchedPromptRequest }: StagesPromptPromptsPartialUpdateRequest, opts?: OperationOpts): Observable<Prompt | AjaxResponse<Prompt>> {
        throwIfNullOrUndefined(promptUuid, 'promptUuid', 'stagesPromptPromptsPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Prompt>({
            url: '/stages/prompt/prompts/{prompt_uuid}/'.replace('{prompt_uuid}', encodeURI(promptUuid)),
            method: 'PATCH',
            headers,
            body: patchedPromptRequest,
        }, opts?.responseOpts);
    };

    /**
     * Preview a prompt as a challenge, just like a flow would receive
     */
    stagesPromptPromptsPreviewCreate({ promptRequest }: StagesPromptPromptsPreviewCreateRequest): Observable<PromptChallenge>
    stagesPromptPromptsPreviewCreate({ promptRequest }: StagesPromptPromptsPreviewCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<PromptChallenge>>
    stagesPromptPromptsPreviewCreate({ promptRequest }: StagesPromptPromptsPreviewCreateRequest, opts?: OperationOpts): Observable<PromptChallenge | AjaxResponse<PromptChallenge>> {
        throwIfNullOrUndefined(promptRequest, 'promptRequest', 'stagesPromptPromptsPreviewCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PromptChallenge>({
            url: '/stages/prompt/prompts/preview/',
            method: 'POST',
            headers,
            body: promptRequest,
        }, opts?.responseOpts);
    };

    /**
     * Prompt Viewset
     */
    stagesPromptPromptsRetrieve({ promptUuid }: StagesPromptPromptsRetrieveRequest): Observable<Prompt>
    stagesPromptPromptsRetrieve({ promptUuid }: StagesPromptPromptsRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<Prompt>>
    stagesPromptPromptsRetrieve({ promptUuid }: StagesPromptPromptsRetrieveRequest, opts?: OperationOpts): Observable<Prompt | AjaxResponse<Prompt>> {
        throwIfNullOrUndefined(promptUuid, 'promptUuid', 'stagesPromptPromptsRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Prompt>({
            url: '/stages/prompt/prompts/{prompt_uuid}/'.replace('{prompt_uuid}', encodeURI(promptUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Prompt Viewset
     */
    stagesPromptPromptsUpdate({ promptUuid, promptRequest }: StagesPromptPromptsUpdateRequest): Observable<Prompt>
    stagesPromptPromptsUpdate({ promptUuid, promptRequest }: StagesPromptPromptsUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<Prompt>>
    stagesPromptPromptsUpdate({ promptUuid, promptRequest }: StagesPromptPromptsUpdateRequest, opts?: OperationOpts): Observable<Prompt | AjaxResponse<Prompt>> {
        throwIfNullOrUndefined(promptUuid, 'promptUuid', 'stagesPromptPromptsUpdate');
        throwIfNullOrUndefined(promptRequest, 'promptRequest', 'stagesPromptPromptsUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Prompt>({
            url: '/stages/prompt/prompts/{prompt_uuid}/'.replace('{prompt_uuid}', encodeURI(promptUuid)),
            method: 'PUT',
            headers,
            body: promptRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesPromptPromptsUsedByList({ promptUuid }: StagesPromptPromptsUsedByListRequest): Observable<Array<UsedBy>>
    stagesPromptPromptsUsedByList({ promptUuid }: StagesPromptPromptsUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesPromptPromptsUsedByList({ promptUuid }: StagesPromptPromptsUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(promptUuid, 'promptUuid', 'stagesPromptPromptsUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/prompt/prompts/{prompt_uuid}/used_by/'.replace('{prompt_uuid}', encodeURI(promptUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * PromptStage Viewset
     */
    stagesPromptStagesCreate({ promptStageRequest }: StagesPromptStagesCreateRequest): Observable<PromptStage>
    stagesPromptStagesCreate({ promptStageRequest }: StagesPromptStagesCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<PromptStage>>
    stagesPromptStagesCreate({ promptStageRequest }: StagesPromptStagesCreateRequest, opts?: OperationOpts): Observable<PromptStage | AjaxResponse<PromptStage>> {
        throwIfNullOrUndefined(promptStageRequest, 'promptStageRequest', 'stagesPromptStagesCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PromptStage>({
            url: '/stages/prompt/stages/',
            method: 'POST',
            headers,
            body: promptStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * PromptStage Viewset
     */
    stagesPromptStagesDestroy({ stageUuid }: StagesPromptStagesDestroyRequest): Observable<void>
    stagesPromptStagesDestroy({ stageUuid }: StagesPromptStagesDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesPromptStagesDestroy({ stageUuid }: StagesPromptStagesDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesPromptStagesDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/prompt/stages/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * PromptStage Viewset
     */
    stagesPromptStagesList({ fields, name, ordering, page, pageSize, search, stageUuid, validationPolicies }: StagesPromptStagesListRequest): Observable<PaginatedPromptStageList>
    stagesPromptStagesList({ fields, name, ordering, page, pageSize, search, stageUuid, validationPolicies }: StagesPromptStagesListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedPromptStageList>>
    stagesPromptStagesList({ fields, name, ordering, page, pageSize, search, stageUuid, validationPolicies }: StagesPromptStagesListRequest, opts?: OperationOpts): Observable<PaginatedPromptStageList | AjaxResponse<PaginatedPromptStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (fields != null) { query['fields'] = fields; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (stageUuid != null) { query['stage_uuid'] = stageUuid; }
        if (validationPolicies != null) { query['validation_policies'] = validationPolicies; }

        return this.request<PaginatedPromptStageList>({
            url: '/stages/prompt/stages/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * PromptStage Viewset
     */
    stagesPromptStagesPartialUpdate({ stageUuid, patchedPromptStageRequest }: StagesPromptStagesPartialUpdateRequest): Observable<PromptStage>
    stagesPromptStagesPartialUpdate({ stageUuid, patchedPromptStageRequest }: StagesPromptStagesPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<PromptStage>>
    stagesPromptStagesPartialUpdate({ stageUuid, patchedPromptStageRequest }: StagesPromptStagesPartialUpdateRequest, opts?: OperationOpts): Observable<PromptStage | AjaxResponse<PromptStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesPromptStagesPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PromptStage>({
            url: '/stages/prompt/stages/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedPromptStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * PromptStage Viewset
     */
    stagesPromptStagesRetrieve({ stageUuid }: StagesPromptStagesRetrieveRequest): Observable<PromptStage>
    stagesPromptStagesRetrieve({ stageUuid }: StagesPromptStagesRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<PromptStage>>
    stagesPromptStagesRetrieve({ stageUuid }: StagesPromptStagesRetrieveRequest, opts?: OperationOpts): Observable<PromptStage | AjaxResponse<PromptStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesPromptStagesRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PromptStage>({
            url: '/stages/prompt/stages/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * PromptStage Viewset
     */
    stagesPromptStagesUpdate({ stageUuid, promptStageRequest }: StagesPromptStagesUpdateRequest): Observable<PromptStage>
    stagesPromptStagesUpdate({ stageUuid, promptStageRequest }: StagesPromptStagesUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<PromptStage>>
    stagesPromptStagesUpdate({ stageUuid, promptStageRequest }: StagesPromptStagesUpdateRequest, opts?: OperationOpts): Observable<PromptStage | AjaxResponse<PromptStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesPromptStagesUpdate');
        throwIfNullOrUndefined(promptStageRequest, 'promptStageRequest', 'stagesPromptStagesUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PromptStage>({
            url: '/stages/prompt/stages/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: promptStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesPromptStagesUsedByList({ stageUuid }: StagesPromptStagesUsedByListRequest): Observable<Array<UsedBy>>
    stagesPromptStagesUsedByList({ stageUuid }: StagesPromptStagesUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesPromptStagesUsedByList({ stageUuid }: StagesPromptStagesUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesPromptStagesUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/prompt/stages/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * UserDeleteStage Viewset
     */
    stagesUserDeleteCreate({ userDeleteStageRequest }: StagesUserDeleteCreateRequest): Observable<UserDeleteStage>
    stagesUserDeleteCreate({ userDeleteStageRequest }: StagesUserDeleteCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<UserDeleteStage>>
    stagesUserDeleteCreate({ userDeleteStageRequest }: StagesUserDeleteCreateRequest, opts?: OperationOpts): Observable<UserDeleteStage | AjaxResponse<UserDeleteStage>> {
        throwIfNullOrUndefined(userDeleteStageRequest, 'userDeleteStageRequest', 'stagesUserDeleteCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserDeleteStage>({
            url: '/stages/user_delete/',
            method: 'POST',
            headers,
            body: userDeleteStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * UserDeleteStage Viewset
     */
    stagesUserDeleteDestroy({ stageUuid }: StagesUserDeleteDestroyRequest): Observable<void>
    stagesUserDeleteDestroy({ stageUuid }: StagesUserDeleteDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesUserDeleteDestroy({ stageUuid }: StagesUserDeleteDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserDeleteDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/user_delete/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * UserDeleteStage Viewset
     */
    stagesUserDeleteList({ name, ordering, page, pageSize, search, stageUuid }: StagesUserDeleteListRequest): Observable<PaginatedUserDeleteStageList>
    stagesUserDeleteList({ name, ordering, page, pageSize, search, stageUuid }: StagesUserDeleteListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedUserDeleteStageList>>
    stagesUserDeleteList({ name, ordering, page, pageSize, search, stageUuid }: StagesUserDeleteListRequest, opts?: OperationOpts): Observable<PaginatedUserDeleteStageList | AjaxResponse<PaginatedUserDeleteStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (stageUuid != null) { query['stage_uuid'] = stageUuid; }

        return this.request<PaginatedUserDeleteStageList>({
            url: '/stages/user_delete/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * UserDeleteStage Viewset
     */
    stagesUserDeletePartialUpdate({ stageUuid, patchedUserDeleteStageRequest }: StagesUserDeletePartialUpdateRequest): Observable<UserDeleteStage>
    stagesUserDeletePartialUpdate({ stageUuid, patchedUserDeleteStageRequest }: StagesUserDeletePartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<UserDeleteStage>>
    stagesUserDeletePartialUpdate({ stageUuid, patchedUserDeleteStageRequest }: StagesUserDeletePartialUpdateRequest, opts?: OperationOpts): Observable<UserDeleteStage | AjaxResponse<UserDeleteStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserDeletePartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserDeleteStage>({
            url: '/stages/user_delete/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedUserDeleteStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * UserDeleteStage Viewset
     */
    stagesUserDeleteRetrieve({ stageUuid }: StagesUserDeleteRetrieveRequest): Observable<UserDeleteStage>
    stagesUserDeleteRetrieve({ stageUuid }: StagesUserDeleteRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<UserDeleteStage>>
    stagesUserDeleteRetrieve({ stageUuid }: StagesUserDeleteRetrieveRequest, opts?: OperationOpts): Observable<UserDeleteStage | AjaxResponse<UserDeleteStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserDeleteRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserDeleteStage>({
            url: '/stages/user_delete/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * UserDeleteStage Viewset
     */
    stagesUserDeleteUpdate({ stageUuid, userDeleteStageRequest }: StagesUserDeleteUpdateRequest): Observable<UserDeleteStage>
    stagesUserDeleteUpdate({ stageUuid, userDeleteStageRequest }: StagesUserDeleteUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<UserDeleteStage>>
    stagesUserDeleteUpdate({ stageUuid, userDeleteStageRequest }: StagesUserDeleteUpdateRequest, opts?: OperationOpts): Observable<UserDeleteStage | AjaxResponse<UserDeleteStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserDeleteUpdate');
        throwIfNullOrUndefined(userDeleteStageRequest, 'userDeleteStageRequest', 'stagesUserDeleteUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserDeleteStage>({
            url: '/stages/user_delete/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: userDeleteStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesUserDeleteUsedByList({ stageUuid }: StagesUserDeleteUsedByListRequest): Observable<Array<UsedBy>>
    stagesUserDeleteUsedByList({ stageUuid }: StagesUserDeleteUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesUserDeleteUsedByList({ stageUuid }: StagesUserDeleteUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserDeleteUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/user_delete/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * UserLoginStage Viewset
     */
    stagesUserLoginCreate({ userLoginStageRequest }: StagesUserLoginCreateRequest): Observable<UserLoginStage>
    stagesUserLoginCreate({ userLoginStageRequest }: StagesUserLoginCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<UserLoginStage>>
    stagesUserLoginCreate({ userLoginStageRequest }: StagesUserLoginCreateRequest, opts?: OperationOpts): Observable<UserLoginStage | AjaxResponse<UserLoginStage>> {
        throwIfNullOrUndefined(userLoginStageRequest, 'userLoginStageRequest', 'stagesUserLoginCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserLoginStage>({
            url: '/stages/user_login/',
            method: 'POST',
            headers,
            body: userLoginStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * UserLoginStage Viewset
     */
    stagesUserLoginDestroy({ stageUuid }: StagesUserLoginDestroyRequest): Observable<void>
    stagesUserLoginDestroy({ stageUuid }: StagesUserLoginDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesUserLoginDestroy({ stageUuid }: StagesUserLoginDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserLoginDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/user_login/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * UserLoginStage Viewset
     */
    stagesUserLoginList({ name, ordering, page, pageSize, rememberMeOffset, search, sessionDuration, stageUuid, terminateOtherSessions }: StagesUserLoginListRequest): Observable<PaginatedUserLoginStageList>
    stagesUserLoginList({ name, ordering, page, pageSize, rememberMeOffset, search, sessionDuration, stageUuid, terminateOtherSessions }: StagesUserLoginListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedUserLoginStageList>>
    stagesUserLoginList({ name, ordering, page, pageSize, rememberMeOffset, search, sessionDuration, stageUuid, terminateOtherSessions }: StagesUserLoginListRequest, opts?: OperationOpts): Observable<PaginatedUserLoginStageList | AjaxResponse<PaginatedUserLoginStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (rememberMeOffset != null) { query['remember_me_offset'] = rememberMeOffset; }
        if (search != null) { query['search'] = search; }
        if (sessionDuration != null) { query['session_duration'] = sessionDuration; }
        if (stageUuid != null) { query['stage_uuid'] = stageUuid; }
        if (terminateOtherSessions != null) { query['terminate_other_sessions'] = terminateOtherSessions; }

        return this.request<PaginatedUserLoginStageList>({
            url: '/stages/user_login/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * UserLoginStage Viewset
     */
    stagesUserLoginPartialUpdate({ stageUuid, patchedUserLoginStageRequest }: StagesUserLoginPartialUpdateRequest): Observable<UserLoginStage>
    stagesUserLoginPartialUpdate({ stageUuid, patchedUserLoginStageRequest }: StagesUserLoginPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<UserLoginStage>>
    stagesUserLoginPartialUpdate({ stageUuid, patchedUserLoginStageRequest }: StagesUserLoginPartialUpdateRequest, opts?: OperationOpts): Observable<UserLoginStage | AjaxResponse<UserLoginStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserLoginPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserLoginStage>({
            url: '/stages/user_login/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedUserLoginStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * UserLoginStage Viewset
     */
    stagesUserLoginRetrieve({ stageUuid }: StagesUserLoginRetrieveRequest): Observable<UserLoginStage>
    stagesUserLoginRetrieve({ stageUuid }: StagesUserLoginRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<UserLoginStage>>
    stagesUserLoginRetrieve({ stageUuid }: StagesUserLoginRetrieveRequest, opts?: OperationOpts): Observable<UserLoginStage | AjaxResponse<UserLoginStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserLoginRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserLoginStage>({
            url: '/stages/user_login/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * UserLoginStage Viewset
     */
    stagesUserLoginUpdate({ stageUuid, userLoginStageRequest }: StagesUserLoginUpdateRequest): Observable<UserLoginStage>
    stagesUserLoginUpdate({ stageUuid, userLoginStageRequest }: StagesUserLoginUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<UserLoginStage>>
    stagesUserLoginUpdate({ stageUuid, userLoginStageRequest }: StagesUserLoginUpdateRequest, opts?: OperationOpts): Observable<UserLoginStage | AjaxResponse<UserLoginStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserLoginUpdate');
        throwIfNullOrUndefined(userLoginStageRequest, 'userLoginStageRequest', 'stagesUserLoginUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserLoginStage>({
            url: '/stages/user_login/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: userLoginStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesUserLoginUsedByList({ stageUuid }: StagesUserLoginUsedByListRequest): Observable<Array<UsedBy>>
    stagesUserLoginUsedByList({ stageUuid }: StagesUserLoginUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesUserLoginUsedByList({ stageUuid }: StagesUserLoginUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserLoginUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/user_login/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * UserLogoutStage Viewset
     */
    stagesUserLogoutCreate({ userLogoutStageRequest }: StagesUserLogoutCreateRequest): Observable<UserLogoutStage>
    stagesUserLogoutCreate({ userLogoutStageRequest }: StagesUserLogoutCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<UserLogoutStage>>
    stagesUserLogoutCreate({ userLogoutStageRequest }: StagesUserLogoutCreateRequest, opts?: OperationOpts): Observable<UserLogoutStage | AjaxResponse<UserLogoutStage>> {
        throwIfNullOrUndefined(userLogoutStageRequest, 'userLogoutStageRequest', 'stagesUserLogoutCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserLogoutStage>({
            url: '/stages/user_logout/',
            method: 'POST',
            headers,
            body: userLogoutStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * UserLogoutStage Viewset
     */
    stagesUserLogoutDestroy({ stageUuid }: StagesUserLogoutDestroyRequest): Observable<void>
    stagesUserLogoutDestroy({ stageUuid }: StagesUserLogoutDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesUserLogoutDestroy({ stageUuid }: StagesUserLogoutDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserLogoutDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/user_logout/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * UserLogoutStage Viewset
     */
    stagesUserLogoutList({ name, ordering, page, pageSize, search, stageUuid }: StagesUserLogoutListRequest): Observable<PaginatedUserLogoutStageList>
    stagesUserLogoutList({ name, ordering, page, pageSize, search, stageUuid }: StagesUserLogoutListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedUserLogoutStageList>>
    stagesUserLogoutList({ name, ordering, page, pageSize, search, stageUuid }: StagesUserLogoutListRequest, opts?: OperationOpts): Observable<PaginatedUserLogoutStageList | AjaxResponse<PaginatedUserLogoutStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (stageUuid != null) { query['stage_uuid'] = stageUuid; }

        return this.request<PaginatedUserLogoutStageList>({
            url: '/stages/user_logout/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * UserLogoutStage Viewset
     */
    stagesUserLogoutPartialUpdate({ stageUuid, patchedUserLogoutStageRequest }: StagesUserLogoutPartialUpdateRequest): Observable<UserLogoutStage>
    stagesUserLogoutPartialUpdate({ stageUuid, patchedUserLogoutStageRequest }: StagesUserLogoutPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<UserLogoutStage>>
    stagesUserLogoutPartialUpdate({ stageUuid, patchedUserLogoutStageRequest }: StagesUserLogoutPartialUpdateRequest, opts?: OperationOpts): Observable<UserLogoutStage | AjaxResponse<UserLogoutStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserLogoutPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserLogoutStage>({
            url: '/stages/user_logout/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedUserLogoutStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * UserLogoutStage Viewset
     */
    stagesUserLogoutRetrieve({ stageUuid }: StagesUserLogoutRetrieveRequest): Observable<UserLogoutStage>
    stagesUserLogoutRetrieve({ stageUuid }: StagesUserLogoutRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<UserLogoutStage>>
    stagesUserLogoutRetrieve({ stageUuid }: StagesUserLogoutRetrieveRequest, opts?: OperationOpts): Observable<UserLogoutStage | AjaxResponse<UserLogoutStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserLogoutRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserLogoutStage>({
            url: '/stages/user_logout/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * UserLogoutStage Viewset
     */
    stagesUserLogoutUpdate({ stageUuid, userLogoutStageRequest }: StagesUserLogoutUpdateRequest): Observable<UserLogoutStage>
    stagesUserLogoutUpdate({ stageUuid, userLogoutStageRequest }: StagesUserLogoutUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<UserLogoutStage>>
    stagesUserLogoutUpdate({ stageUuid, userLogoutStageRequest }: StagesUserLogoutUpdateRequest, opts?: OperationOpts): Observable<UserLogoutStage | AjaxResponse<UserLogoutStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserLogoutUpdate');
        throwIfNullOrUndefined(userLogoutStageRequest, 'userLogoutStageRequest', 'stagesUserLogoutUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserLogoutStage>({
            url: '/stages/user_logout/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: userLogoutStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesUserLogoutUsedByList({ stageUuid }: StagesUserLogoutUsedByListRequest): Observable<Array<UsedBy>>
    stagesUserLogoutUsedByList({ stageUuid }: StagesUserLogoutUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesUserLogoutUsedByList({ stageUuid }: StagesUserLogoutUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserLogoutUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/user_logout/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * UserWriteStage Viewset
     */
    stagesUserWriteCreate({ userWriteStageRequest }: StagesUserWriteCreateRequest): Observable<UserWriteStage>
    stagesUserWriteCreate({ userWriteStageRequest }: StagesUserWriteCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<UserWriteStage>>
    stagesUserWriteCreate({ userWriteStageRequest }: StagesUserWriteCreateRequest, opts?: OperationOpts): Observable<UserWriteStage | AjaxResponse<UserWriteStage>> {
        throwIfNullOrUndefined(userWriteStageRequest, 'userWriteStageRequest', 'stagesUserWriteCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserWriteStage>({
            url: '/stages/user_write/',
            method: 'POST',
            headers,
            body: userWriteStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * UserWriteStage Viewset
     */
    stagesUserWriteDestroy({ stageUuid }: StagesUserWriteDestroyRequest): Observable<void>
    stagesUserWriteDestroy({ stageUuid }: StagesUserWriteDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    stagesUserWriteDestroy({ stageUuid }: StagesUserWriteDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserWriteDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/stages/user_write/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * UserWriteStage Viewset
     */
    stagesUserWriteList({ createUsersAsInactive, createUsersGroup, name, ordering, page, pageSize, search, stageUuid, userCreationMode, userPathTemplate, userType }: StagesUserWriteListRequest): Observable<PaginatedUserWriteStageList>
    stagesUserWriteList({ createUsersAsInactive, createUsersGroup, name, ordering, page, pageSize, search, stageUuid, userCreationMode, userPathTemplate, userType }: StagesUserWriteListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedUserWriteStageList>>
    stagesUserWriteList({ createUsersAsInactive, createUsersGroup, name, ordering, page, pageSize, search, stageUuid, userCreationMode, userPathTemplate, userType }: StagesUserWriteListRequest, opts?: OperationOpts): Observable<PaginatedUserWriteStageList | AjaxResponse<PaginatedUserWriteStageList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (createUsersAsInactive != null) { query['create_users_as_inactive'] = createUsersAsInactive; }
        if (createUsersGroup != null) { query['create_users_group'] = createUsersGroup; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (stageUuid != null) { query['stage_uuid'] = stageUuid; }
        if (userCreationMode != null) { query['user_creation_mode'] = userCreationMode; }
        if (userPathTemplate != null) { query['user_path_template'] = userPathTemplate; }
        if (userType != null) { query['user_type'] = userType; }

        return this.request<PaginatedUserWriteStageList>({
            url: '/stages/user_write/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * UserWriteStage Viewset
     */
    stagesUserWritePartialUpdate({ stageUuid, patchedUserWriteStageRequest }: StagesUserWritePartialUpdateRequest): Observable<UserWriteStage>
    stagesUserWritePartialUpdate({ stageUuid, patchedUserWriteStageRequest }: StagesUserWritePartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<UserWriteStage>>
    stagesUserWritePartialUpdate({ stageUuid, patchedUserWriteStageRequest }: StagesUserWritePartialUpdateRequest, opts?: OperationOpts): Observable<UserWriteStage | AjaxResponse<UserWriteStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserWritePartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserWriteStage>({
            url: '/stages/user_write/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PATCH',
            headers,
            body: patchedUserWriteStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * UserWriteStage Viewset
     */
    stagesUserWriteRetrieve({ stageUuid }: StagesUserWriteRetrieveRequest): Observable<UserWriteStage>
    stagesUserWriteRetrieve({ stageUuid }: StagesUserWriteRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<UserWriteStage>>
    stagesUserWriteRetrieve({ stageUuid }: StagesUserWriteRetrieveRequest, opts?: OperationOpts): Observable<UserWriteStage | AjaxResponse<UserWriteStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserWriteRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserWriteStage>({
            url: '/stages/user_write/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * UserWriteStage Viewset
     */
    stagesUserWriteUpdate({ stageUuid, userWriteStageRequest }: StagesUserWriteUpdateRequest): Observable<UserWriteStage>
    stagesUserWriteUpdate({ stageUuid, userWriteStageRequest }: StagesUserWriteUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<UserWriteStage>>
    stagesUserWriteUpdate({ stageUuid, userWriteStageRequest }: StagesUserWriteUpdateRequest, opts?: OperationOpts): Observable<UserWriteStage | AjaxResponse<UserWriteStage>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserWriteUpdate');
        throwIfNullOrUndefined(userWriteStageRequest, 'userWriteStageRequest', 'stagesUserWriteUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<UserWriteStage>({
            url: '/stages/user_write/{stage_uuid}/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'PUT',
            headers,
            body: userWriteStageRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    stagesUserWriteUsedByList({ stageUuid }: StagesUserWriteUsedByListRequest): Observable<Array<UsedBy>>
    stagesUserWriteUsedByList({ stageUuid }: StagesUserWriteUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    stagesUserWriteUsedByList({ stageUuid }: StagesUserWriteUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(stageUuid, 'stageUuid', 'stagesUserWriteUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/stages/user_write/{stage_uuid}/used_by/'.replace('{stage_uuid}', encodeURI(stageUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum StagesAuthenticatorSmsListAuthTypeEnum {
    Basic = 'basic',
    Bearer = 'bearer'
}
/**
 * @export
 * @enum {string}
 */
export enum StagesAuthenticatorSmsListProviderEnum {
    Generic = 'generic',
    Twilio = 'twilio'
}
/**
 * @export
 * @enum {string}
 */
export enum StagesAuthenticatorTotpListDigitsEnum {
    NUMBER_6 = 6,
    NUMBER_8 = 8
}
/**
 * @export
 * @enum {string}
 */
export enum StagesAuthenticatorValidateListNotConfiguredActionEnum {
    Configure = 'configure',
    Deny = 'deny',
    Skip = 'skip'
}
/**
 * @export
 * @enum {string}
 */
export enum StagesAuthenticatorWebauthnListAuthenticatorAttachmentEnum {
    CrossPlatform = 'cross-platform',
    Platform = 'platform'
}
/**
 * @export
 * @enum {string}
 */
export enum StagesAuthenticatorWebauthnListResidentKeyRequirementEnum {
    Discouraged = 'discouraged',
    Preferred = 'preferred',
    Required = 'required'
}
/**
 * @export
 * @enum {string}
 */
export enum StagesAuthenticatorWebauthnListUserVerificationEnum {
    Discouraged = 'discouraged',
    Preferred = 'preferred',
    Required = 'required'
}
/**
 * @export
 * @enum {string}
 */
export enum StagesConsentListModeEnum {
    AlwaysRequire = 'always_require',
    Expiring = 'expiring',
    Permanent = 'permanent'
}
/**
 * @export
 * @enum {string}
 */
export enum StagesPromptPromptsListTypeEnum {
    AkLocale = 'ak-locale',
    Checkbox = 'checkbox',
    Date = 'date',
    DateTime = 'date-time',
    Dropdown = 'dropdown',
    Email = 'email',
    File = 'file',
    Hidden = 'hidden',
    Number = 'number',
    Password = 'password',
    RadioButtonGroup = 'radio-button-group',
    Separator = 'separator',
    Static = 'static',
    Text = 'text',
    TextArea = 'text_area',
    TextAreaReadOnly = 'text_area_read_only',
    TextReadOnly = 'text_read_only',
    Username = 'username'
}
/**
 * @export
 * @enum {string}
 */
export enum StagesUserWriteListUserCreationModeEnum {
    AlwaysCreate = 'always_create',
    CreateWhenRequired = 'create_when_required',
    NeverCreate = 'never_create'
}
/**
 * @export
 * @enum {string}
 */
export enum StagesUserWriteListUserTypeEnum {
    External = 'external',
    Internal = 'internal',
    InternalServiceAccount = 'internal_service_account',
    ServiceAccount = 'service_account'
}
