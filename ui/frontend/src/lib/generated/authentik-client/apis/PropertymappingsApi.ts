// tslint:disable
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2023.10.2
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    GenericError,
    LDAPPropertyMapping,
    LDAPPropertyMappingRequest,
    NotificationWebhookMapping,
    NotificationWebhookMappingRequest,
    PaginatedLDAPPropertyMappingList,
    PaginatedNotificationWebhookMappingList,
    PaginatedPropertyMappingList,
    PaginatedSAMLPropertyMappingList,
    PaginatedSCIMMappingList,
    PaginatedScopeMappingList,
    PatchedLDAPPropertyMappingRequest,
    PatchedNotificationWebhookMappingRequest,
    PatchedSAMLPropertyMappingRequest,
    PatchedSCIMMappingRequest,
    PatchedScopeMappingRequest,
    PolicyTestRequest,
    PropertyMapping,
    PropertyMappingTestResult,
    SAMLPropertyMapping,
    SAMLPropertyMappingRequest,
    SCIMMapping,
    SCIMMappingRequest,
    ScopeMapping,
    ScopeMappingRequest,
    TypeCreate,
    UsedBy,
    ValidationError,
} from '../models';

export interface PropertymappingsAllDestroyRequest {
    pmUuid: string;
}

export interface PropertymappingsAllListRequest {
    managedIsnull?: boolean;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface PropertymappingsAllRetrieveRequest {
    pmUuid: string;
}

export interface PropertymappingsAllTestCreateRequest {
    pmUuid: string;
    policyTestRequest: PolicyTestRequest;
    formatResult?: boolean;
}

export interface PropertymappingsAllUsedByListRequest {
    pmUuid: string;
}

export interface PropertymappingsLdapCreateRequest {
    lDAPPropertyMappingRequest: LDAPPropertyMappingRequest;
}

export interface PropertymappingsLdapDestroyRequest {
    pmUuid: string;
}

export interface PropertymappingsLdapListRequest {
    expression?: string;
    managed?: Array<string>;
    name?: string;
    objectField?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    pmUuid?: string;
    search?: string;
}

export interface PropertymappingsLdapPartialUpdateRequest {
    pmUuid: string;
    patchedLDAPPropertyMappingRequest?: PatchedLDAPPropertyMappingRequest;
}

export interface PropertymappingsLdapRetrieveRequest {
    pmUuid: string;
}

export interface PropertymappingsLdapUpdateRequest {
    pmUuid: string;
    lDAPPropertyMappingRequest: LDAPPropertyMappingRequest;
}

export interface PropertymappingsLdapUsedByListRequest {
    pmUuid: string;
}

export interface PropertymappingsNotificationCreateRequest {
    notificationWebhookMappingRequest: NotificationWebhookMappingRequest;
}

export interface PropertymappingsNotificationDestroyRequest {
    pmUuid: string;
}

export interface PropertymappingsNotificationListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface PropertymappingsNotificationPartialUpdateRequest {
    pmUuid: string;
    patchedNotificationWebhookMappingRequest?: PatchedNotificationWebhookMappingRequest;
}

export interface PropertymappingsNotificationRetrieveRequest {
    pmUuid: string;
}

export interface PropertymappingsNotificationUpdateRequest {
    pmUuid: string;
    notificationWebhookMappingRequest: NotificationWebhookMappingRequest;
}

export interface PropertymappingsNotificationUsedByListRequest {
    pmUuid: string;
}

export interface PropertymappingsSamlCreateRequest {
    sAMLPropertyMappingRequest: SAMLPropertyMappingRequest;
}

export interface PropertymappingsSamlDestroyRequest {
    pmUuid: string;
}

export interface PropertymappingsSamlListRequest {
    expression?: string;
    friendlyName?: string;
    managed?: Array<string>;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    pmUuid?: string;
    samlName?: string;
    search?: string;
}

export interface PropertymappingsSamlPartialUpdateRequest {
    pmUuid: string;
    patchedSAMLPropertyMappingRequest?: PatchedSAMLPropertyMappingRequest;
}

export interface PropertymappingsSamlRetrieveRequest {
    pmUuid: string;
}

export interface PropertymappingsSamlUpdateRequest {
    pmUuid: string;
    sAMLPropertyMappingRequest: SAMLPropertyMappingRequest;
}

export interface PropertymappingsSamlUsedByListRequest {
    pmUuid: string;
}

export interface PropertymappingsScimCreateRequest {
    sCIMMappingRequest: SCIMMappingRequest;
}

export interface PropertymappingsScimDestroyRequest {
    pmUuid: string;
}

export interface PropertymappingsScimListRequest {
    expression?: string;
    managed?: Array<string>;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    pmUuid?: string;
    search?: string;
}

export interface PropertymappingsScimPartialUpdateRequest {
    pmUuid: string;
    patchedSCIMMappingRequest?: PatchedSCIMMappingRequest;
}

export interface PropertymappingsScimRetrieveRequest {
    pmUuid: string;
}

export interface PropertymappingsScimUpdateRequest {
    pmUuid: string;
    sCIMMappingRequest: SCIMMappingRequest;
}

export interface PropertymappingsScimUsedByListRequest {
    pmUuid: string;
}

export interface PropertymappingsScopeCreateRequest {
    scopeMappingRequest: ScopeMappingRequest;
}

export interface PropertymappingsScopeDestroyRequest {
    pmUuid: string;
}

export interface PropertymappingsScopeListRequest {
    managed?: Array<string>;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    scopeName?: string;
    search?: string;
}

export interface PropertymappingsScopePartialUpdateRequest {
    pmUuid: string;
    patchedScopeMappingRequest?: PatchedScopeMappingRequest;
}

export interface PropertymappingsScopeRetrieveRequest {
    pmUuid: string;
}

export interface PropertymappingsScopeUpdateRequest {
    pmUuid: string;
    scopeMappingRequest: ScopeMappingRequest;
}

export interface PropertymappingsScopeUsedByListRequest {
    pmUuid: string;
}

/**
 * no description
 */
export class PropertymappingsApi extends BaseAPI {

    /**
     * PropertyMapping Viewset
     */
    propertymappingsAllDestroy({ pmUuid }: PropertymappingsAllDestroyRequest): Observable<void>
    propertymappingsAllDestroy({ pmUuid }: PropertymappingsAllDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    propertymappingsAllDestroy({ pmUuid }: PropertymappingsAllDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsAllDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/propertymappings/all/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * PropertyMapping Viewset
     */
    propertymappingsAllList({ managedIsnull, ordering, page, pageSize, search }: PropertymappingsAllListRequest): Observable<PaginatedPropertyMappingList>
    propertymappingsAllList({ managedIsnull, ordering, page, pageSize, search }: PropertymappingsAllListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedPropertyMappingList>>
    propertymappingsAllList({ managedIsnull, ordering, page, pageSize, search }: PropertymappingsAllListRequest, opts?: OperationOpts): Observable<PaginatedPropertyMappingList | AjaxResponse<PaginatedPropertyMappingList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (managedIsnull != null) { query['managed__isnull'] = managedIsnull; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedPropertyMappingList>({
            url: '/propertymappings/all/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * PropertyMapping Viewset
     */
    propertymappingsAllRetrieve({ pmUuid }: PropertymappingsAllRetrieveRequest): Observable<PropertyMapping>
    propertymappingsAllRetrieve({ pmUuid }: PropertymappingsAllRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<PropertyMapping>>
    propertymappingsAllRetrieve({ pmUuid }: PropertymappingsAllRetrieveRequest, opts?: OperationOpts): Observable<PropertyMapping | AjaxResponse<PropertyMapping>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsAllRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PropertyMapping>({
            url: '/propertymappings/all/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Test Property Mapping
     */
    propertymappingsAllTestCreate({ pmUuid, policyTestRequest, formatResult }: PropertymappingsAllTestCreateRequest): Observable<PropertyMappingTestResult>
    propertymappingsAllTestCreate({ pmUuid, policyTestRequest, formatResult }: PropertymappingsAllTestCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<PropertyMappingTestResult>>
    propertymappingsAllTestCreate({ pmUuid, policyTestRequest, formatResult }: PropertymappingsAllTestCreateRequest, opts?: OperationOpts): Observable<PropertyMappingTestResult | AjaxResponse<PropertyMappingTestResult>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsAllTestCreate');
        throwIfNullOrUndefined(policyTestRequest, 'policyTestRequest', 'propertymappingsAllTestCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (formatResult != null) { query['format_result'] = formatResult; }

        return this.request<PropertyMappingTestResult>({
            url: '/propertymappings/all/{pm_uuid}/test/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'POST',
            headers,
            query,
            body: policyTestRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get all creatable property-mapping types
     */
    propertymappingsAllTypesList(): Observable<Array<TypeCreate>>
    propertymappingsAllTypesList(opts?: OperationOpts): Observable<AjaxResponse<Array<TypeCreate>>>
    propertymappingsAllTypesList(opts?: OperationOpts): Observable<Array<TypeCreate> | AjaxResponse<Array<TypeCreate>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<TypeCreate>>({
            url: '/propertymappings/all/types/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    propertymappingsAllUsedByList({ pmUuid }: PropertymappingsAllUsedByListRequest): Observable<Array<UsedBy>>
    propertymappingsAllUsedByList({ pmUuid }: PropertymappingsAllUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    propertymappingsAllUsedByList({ pmUuid }: PropertymappingsAllUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsAllUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/propertymappings/all/{pm_uuid}/used_by/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapCreate({ lDAPPropertyMappingRequest }: PropertymappingsLdapCreateRequest): Observable<LDAPPropertyMapping>
    propertymappingsLdapCreate({ lDAPPropertyMappingRequest }: PropertymappingsLdapCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<LDAPPropertyMapping>>
    propertymappingsLdapCreate({ lDAPPropertyMappingRequest }: PropertymappingsLdapCreateRequest, opts?: OperationOpts): Observable<LDAPPropertyMapping | AjaxResponse<LDAPPropertyMapping>> {
        throwIfNullOrUndefined(lDAPPropertyMappingRequest, 'lDAPPropertyMappingRequest', 'propertymappingsLdapCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<LDAPPropertyMapping>({
            url: '/propertymappings/ldap/',
            method: 'POST',
            headers,
            body: lDAPPropertyMappingRequest,
        }, opts?.responseOpts);
    };

    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapDestroy({ pmUuid }: PropertymappingsLdapDestroyRequest): Observable<void>
    propertymappingsLdapDestroy({ pmUuid }: PropertymappingsLdapDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    propertymappingsLdapDestroy({ pmUuid }: PropertymappingsLdapDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsLdapDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/propertymappings/ldap/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapList({ expression, managed, name, objectField, ordering, page, pageSize, pmUuid, search }: PropertymappingsLdapListRequest): Observable<PaginatedLDAPPropertyMappingList>
    propertymappingsLdapList({ expression, managed, name, objectField, ordering, page, pageSize, pmUuid, search }: PropertymappingsLdapListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedLDAPPropertyMappingList>>
    propertymappingsLdapList({ expression, managed, name, objectField, ordering, page, pageSize, pmUuid, search }: PropertymappingsLdapListRequest, opts?: OperationOpts): Observable<PaginatedLDAPPropertyMappingList | AjaxResponse<PaginatedLDAPPropertyMappingList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (expression != null) { query['expression'] = expression; }
        if (managed != null) { query['managed'] = managed; }
        if (name != null) { query['name'] = name; }
        if (objectField != null) { query['object_field'] = objectField; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (pmUuid != null) { query['pm_uuid'] = pmUuid; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedLDAPPropertyMappingList>({
            url: '/propertymappings/ldap/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapPartialUpdate({ pmUuid, patchedLDAPPropertyMappingRequest }: PropertymappingsLdapPartialUpdateRequest): Observable<LDAPPropertyMapping>
    propertymappingsLdapPartialUpdate({ pmUuid, patchedLDAPPropertyMappingRequest }: PropertymappingsLdapPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<LDAPPropertyMapping>>
    propertymappingsLdapPartialUpdate({ pmUuid, patchedLDAPPropertyMappingRequest }: PropertymappingsLdapPartialUpdateRequest, opts?: OperationOpts): Observable<LDAPPropertyMapping | AjaxResponse<LDAPPropertyMapping>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsLdapPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<LDAPPropertyMapping>({
            url: '/propertymappings/ldap/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'PATCH',
            headers,
            body: patchedLDAPPropertyMappingRequest,
        }, opts?.responseOpts);
    };

    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapRetrieve({ pmUuid }: PropertymappingsLdapRetrieveRequest): Observable<LDAPPropertyMapping>
    propertymappingsLdapRetrieve({ pmUuid }: PropertymappingsLdapRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<LDAPPropertyMapping>>
    propertymappingsLdapRetrieve({ pmUuid }: PropertymappingsLdapRetrieveRequest, opts?: OperationOpts): Observable<LDAPPropertyMapping | AjaxResponse<LDAPPropertyMapping>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsLdapRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<LDAPPropertyMapping>({
            url: '/propertymappings/ldap/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapUpdate({ pmUuid, lDAPPropertyMappingRequest }: PropertymappingsLdapUpdateRequest): Observable<LDAPPropertyMapping>
    propertymappingsLdapUpdate({ pmUuid, lDAPPropertyMappingRequest }: PropertymappingsLdapUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<LDAPPropertyMapping>>
    propertymappingsLdapUpdate({ pmUuid, lDAPPropertyMappingRequest }: PropertymappingsLdapUpdateRequest, opts?: OperationOpts): Observable<LDAPPropertyMapping | AjaxResponse<LDAPPropertyMapping>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsLdapUpdate');
        throwIfNullOrUndefined(lDAPPropertyMappingRequest, 'lDAPPropertyMappingRequest', 'propertymappingsLdapUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<LDAPPropertyMapping>({
            url: '/propertymappings/ldap/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'PUT',
            headers,
            body: lDAPPropertyMappingRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    propertymappingsLdapUsedByList({ pmUuid }: PropertymappingsLdapUsedByListRequest): Observable<Array<UsedBy>>
    propertymappingsLdapUsedByList({ pmUuid }: PropertymappingsLdapUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    propertymappingsLdapUsedByList({ pmUuid }: PropertymappingsLdapUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsLdapUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/propertymappings/ldap/{pm_uuid}/used_by/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationCreate({ notificationWebhookMappingRequest }: PropertymappingsNotificationCreateRequest): Observable<NotificationWebhookMapping>
    propertymappingsNotificationCreate({ notificationWebhookMappingRequest }: PropertymappingsNotificationCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<NotificationWebhookMapping>>
    propertymappingsNotificationCreate({ notificationWebhookMappingRequest }: PropertymappingsNotificationCreateRequest, opts?: OperationOpts): Observable<NotificationWebhookMapping | AjaxResponse<NotificationWebhookMapping>> {
        throwIfNullOrUndefined(notificationWebhookMappingRequest, 'notificationWebhookMappingRequest', 'propertymappingsNotificationCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<NotificationWebhookMapping>({
            url: '/propertymappings/notification/',
            method: 'POST',
            headers,
            body: notificationWebhookMappingRequest,
        }, opts?.responseOpts);
    };

    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationDestroy({ pmUuid }: PropertymappingsNotificationDestroyRequest): Observable<void>
    propertymappingsNotificationDestroy({ pmUuid }: PropertymappingsNotificationDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    propertymappingsNotificationDestroy({ pmUuid }: PropertymappingsNotificationDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsNotificationDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/propertymappings/notification/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationList({ name, ordering, page, pageSize, search }: PropertymappingsNotificationListRequest): Observable<PaginatedNotificationWebhookMappingList>
    propertymappingsNotificationList({ name, ordering, page, pageSize, search }: PropertymappingsNotificationListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedNotificationWebhookMappingList>>
    propertymappingsNotificationList({ name, ordering, page, pageSize, search }: PropertymappingsNotificationListRequest, opts?: OperationOpts): Observable<PaginatedNotificationWebhookMappingList | AjaxResponse<PaginatedNotificationWebhookMappingList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedNotificationWebhookMappingList>({
            url: '/propertymappings/notification/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationPartialUpdate({ pmUuid, patchedNotificationWebhookMappingRequest }: PropertymappingsNotificationPartialUpdateRequest): Observable<NotificationWebhookMapping>
    propertymappingsNotificationPartialUpdate({ pmUuid, patchedNotificationWebhookMappingRequest }: PropertymappingsNotificationPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<NotificationWebhookMapping>>
    propertymappingsNotificationPartialUpdate({ pmUuid, patchedNotificationWebhookMappingRequest }: PropertymappingsNotificationPartialUpdateRequest, opts?: OperationOpts): Observable<NotificationWebhookMapping | AjaxResponse<NotificationWebhookMapping>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsNotificationPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<NotificationWebhookMapping>({
            url: '/propertymappings/notification/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'PATCH',
            headers,
            body: patchedNotificationWebhookMappingRequest,
        }, opts?.responseOpts);
    };

    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationRetrieve({ pmUuid }: PropertymappingsNotificationRetrieveRequest): Observable<NotificationWebhookMapping>
    propertymappingsNotificationRetrieve({ pmUuid }: PropertymappingsNotificationRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<NotificationWebhookMapping>>
    propertymappingsNotificationRetrieve({ pmUuid }: PropertymappingsNotificationRetrieveRequest, opts?: OperationOpts): Observable<NotificationWebhookMapping | AjaxResponse<NotificationWebhookMapping>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsNotificationRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<NotificationWebhookMapping>({
            url: '/propertymappings/notification/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationUpdate({ pmUuid, notificationWebhookMappingRequest }: PropertymappingsNotificationUpdateRequest): Observable<NotificationWebhookMapping>
    propertymappingsNotificationUpdate({ pmUuid, notificationWebhookMappingRequest }: PropertymappingsNotificationUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<NotificationWebhookMapping>>
    propertymappingsNotificationUpdate({ pmUuid, notificationWebhookMappingRequest }: PropertymappingsNotificationUpdateRequest, opts?: OperationOpts): Observable<NotificationWebhookMapping | AjaxResponse<NotificationWebhookMapping>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsNotificationUpdate');
        throwIfNullOrUndefined(notificationWebhookMappingRequest, 'notificationWebhookMappingRequest', 'propertymappingsNotificationUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<NotificationWebhookMapping>({
            url: '/propertymappings/notification/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'PUT',
            headers,
            body: notificationWebhookMappingRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    propertymappingsNotificationUsedByList({ pmUuid }: PropertymappingsNotificationUsedByListRequest): Observable<Array<UsedBy>>
    propertymappingsNotificationUsedByList({ pmUuid }: PropertymappingsNotificationUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    propertymappingsNotificationUsedByList({ pmUuid }: PropertymappingsNotificationUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsNotificationUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/propertymappings/notification/{pm_uuid}/used_by/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlCreate({ sAMLPropertyMappingRequest }: PropertymappingsSamlCreateRequest): Observable<SAMLPropertyMapping>
    propertymappingsSamlCreate({ sAMLPropertyMappingRequest }: PropertymappingsSamlCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<SAMLPropertyMapping>>
    propertymappingsSamlCreate({ sAMLPropertyMappingRequest }: PropertymappingsSamlCreateRequest, opts?: OperationOpts): Observable<SAMLPropertyMapping | AjaxResponse<SAMLPropertyMapping>> {
        throwIfNullOrUndefined(sAMLPropertyMappingRequest, 'sAMLPropertyMappingRequest', 'propertymappingsSamlCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SAMLPropertyMapping>({
            url: '/propertymappings/saml/',
            method: 'POST',
            headers,
            body: sAMLPropertyMappingRequest,
        }, opts?.responseOpts);
    };

    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlDestroy({ pmUuid }: PropertymappingsSamlDestroyRequest): Observable<void>
    propertymappingsSamlDestroy({ pmUuid }: PropertymappingsSamlDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    propertymappingsSamlDestroy({ pmUuid }: PropertymappingsSamlDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsSamlDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/propertymappings/saml/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlList({ expression, friendlyName, managed, name, ordering, page, pageSize, pmUuid, samlName, search }: PropertymappingsSamlListRequest): Observable<PaginatedSAMLPropertyMappingList>
    propertymappingsSamlList({ expression, friendlyName, managed, name, ordering, page, pageSize, pmUuid, samlName, search }: PropertymappingsSamlListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedSAMLPropertyMappingList>>
    propertymappingsSamlList({ expression, friendlyName, managed, name, ordering, page, pageSize, pmUuid, samlName, search }: PropertymappingsSamlListRequest, opts?: OperationOpts): Observable<PaginatedSAMLPropertyMappingList | AjaxResponse<PaginatedSAMLPropertyMappingList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (expression != null) { query['expression'] = expression; }
        if (friendlyName != null) { query['friendly_name'] = friendlyName; }
        if (managed != null) { query['managed'] = managed; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (pmUuid != null) { query['pm_uuid'] = pmUuid; }
        if (samlName != null) { query['saml_name'] = samlName; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedSAMLPropertyMappingList>({
            url: '/propertymappings/saml/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlPartialUpdate({ pmUuid, patchedSAMLPropertyMappingRequest }: PropertymappingsSamlPartialUpdateRequest): Observable<SAMLPropertyMapping>
    propertymappingsSamlPartialUpdate({ pmUuid, patchedSAMLPropertyMappingRequest }: PropertymappingsSamlPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<SAMLPropertyMapping>>
    propertymappingsSamlPartialUpdate({ pmUuid, patchedSAMLPropertyMappingRequest }: PropertymappingsSamlPartialUpdateRequest, opts?: OperationOpts): Observable<SAMLPropertyMapping | AjaxResponse<SAMLPropertyMapping>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsSamlPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SAMLPropertyMapping>({
            url: '/propertymappings/saml/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'PATCH',
            headers,
            body: patchedSAMLPropertyMappingRequest,
        }, opts?.responseOpts);
    };

    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlRetrieve({ pmUuid }: PropertymappingsSamlRetrieveRequest): Observable<SAMLPropertyMapping>
    propertymappingsSamlRetrieve({ pmUuid }: PropertymappingsSamlRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<SAMLPropertyMapping>>
    propertymappingsSamlRetrieve({ pmUuid }: PropertymappingsSamlRetrieveRequest, opts?: OperationOpts): Observable<SAMLPropertyMapping | AjaxResponse<SAMLPropertyMapping>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsSamlRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SAMLPropertyMapping>({
            url: '/propertymappings/saml/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlUpdate({ pmUuid, sAMLPropertyMappingRequest }: PropertymappingsSamlUpdateRequest): Observable<SAMLPropertyMapping>
    propertymappingsSamlUpdate({ pmUuid, sAMLPropertyMappingRequest }: PropertymappingsSamlUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<SAMLPropertyMapping>>
    propertymappingsSamlUpdate({ pmUuid, sAMLPropertyMappingRequest }: PropertymappingsSamlUpdateRequest, opts?: OperationOpts): Observable<SAMLPropertyMapping | AjaxResponse<SAMLPropertyMapping>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsSamlUpdate');
        throwIfNullOrUndefined(sAMLPropertyMappingRequest, 'sAMLPropertyMappingRequest', 'propertymappingsSamlUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SAMLPropertyMapping>({
            url: '/propertymappings/saml/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'PUT',
            headers,
            body: sAMLPropertyMappingRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    propertymappingsSamlUsedByList({ pmUuid }: PropertymappingsSamlUsedByListRequest): Observable<Array<UsedBy>>
    propertymappingsSamlUsedByList({ pmUuid }: PropertymappingsSamlUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    propertymappingsSamlUsedByList({ pmUuid }: PropertymappingsSamlUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsSamlUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/propertymappings/saml/{pm_uuid}/used_by/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimCreate({ sCIMMappingRequest }: PropertymappingsScimCreateRequest): Observable<SCIMMapping>
    propertymappingsScimCreate({ sCIMMappingRequest }: PropertymappingsScimCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<SCIMMapping>>
    propertymappingsScimCreate({ sCIMMappingRequest }: PropertymappingsScimCreateRequest, opts?: OperationOpts): Observable<SCIMMapping | AjaxResponse<SCIMMapping>> {
        throwIfNullOrUndefined(sCIMMappingRequest, 'sCIMMappingRequest', 'propertymappingsScimCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SCIMMapping>({
            url: '/propertymappings/scim/',
            method: 'POST',
            headers,
            body: sCIMMappingRequest,
        }, opts?.responseOpts);
    };

    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimDestroy({ pmUuid }: PropertymappingsScimDestroyRequest): Observable<void>
    propertymappingsScimDestroy({ pmUuid }: PropertymappingsScimDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    propertymappingsScimDestroy({ pmUuid }: PropertymappingsScimDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsScimDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/propertymappings/scim/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimList({ expression, managed, name, ordering, page, pageSize, pmUuid, search }: PropertymappingsScimListRequest): Observable<PaginatedSCIMMappingList>
    propertymappingsScimList({ expression, managed, name, ordering, page, pageSize, pmUuid, search }: PropertymappingsScimListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedSCIMMappingList>>
    propertymappingsScimList({ expression, managed, name, ordering, page, pageSize, pmUuid, search }: PropertymappingsScimListRequest, opts?: OperationOpts): Observable<PaginatedSCIMMappingList | AjaxResponse<PaginatedSCIMMappingList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (expression != null) { query['expression'] = expression; }
        if (managed != null) { query['managed'] = managed; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (pmUuid != null) { query['pm_uuid'] = pmUuid; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedSCIMMappingList>({
            url: '/propertymappings/scim/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimPartialUpdate({ pmUuid, patchedSCIMMappingRequest }: PropertymappingsScimPartialUpdateRequest): Observable<SCIMMapping>
    propertymappingsScimPartialUpdate({ pmUuid, patchedSCIMMappingRequest }: PropertymappingsScimPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<SCIMMapping>>
    propertymappingsScimPartialUpdate({ pmUuid, patchedSCIMMappingRequest }: PropertymappingsScimPartialUpdateRequest, opts?: OperationOpts): Observable<SCIMMapping | AjaxResponse<SCIMMapping>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsScimPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SCIMMapping>({
            url: '/propertymappings/scim/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'PATCH',
            headers,
            body: patchedSCIMMappingRequest,
        }, opts?.responseOpts);
    };

    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimRetrieve({ pmUuid }: PropertymappingsScimRetrieveRequest): Observable<SCIMMapping>
    propertymappingsScimRetrieve({ pmUuid }: PropertymappingsScimRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<SCIMMapping>>
    propertymappingsScimRetrieve({ pmUuid }: PropertymappingsScimRetrieveRequest, opts?: OperationOpts): Observable<SCIMMapping | AjaxResponse<SCIMMapping>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsScimRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SCIMMapping>({
            url: '/propertymappings/scim/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimUpdate({ pmUuid, sCIMMappingRequest }: PropertymappingsScimUpdateRequest): Observable<SCIMMapping>
    propertymappingsScimUpdate({ pmUuid, sCIMMappingRequest }: PropertymappingsScimUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<SCIMMapping>>
    propertymappingsScimUpdate({ pmUuid, sCIMMappingRequest }: PropertymappingsScimUpdateRequest, opts?: OperationOpts): Observable<SCIMMapping | AjaxResponse<SCIMMapping>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsScimUpdate');
        throwIfNullOrUndefined(sCIMMappingRequest, 'sCIMMappingRequest', 'propertymappingsScimUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SCIMMapping>({
            url: '/propertymappings/scim/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'PUT',
            headers,
            body: sCIMMappingRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    propertymappingsScimUsedByList({ pmUuid }: PropertymappingsScimUsedByListRequest): Observable<Array<UsedBy>>
    propertymappingsScimUsedByList({ pmUuid }: PropertymappingsScimUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    propertymappingsScimUsedByList({ pmUuid }: PropertymappingsScimUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsScimUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/propertymappings/scim/{pm_uuid}/used_by/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopeCreate({ scopeMappingRequest }: PropertymappingsScopeCreateRequest): Observable<ScopeMapping>
    propertymappingsScopeCreate({ scopeMappingRequest }: PropertymappingsScopeCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<ScopeMapping>>
    propertymappingsScopeCreate({ scopeMappingRequest }: PropertymappingsScopeCreateRequest, opts?: OperationOpts): Observable<ScopeMapping | AjaxResponse<ScopeMapping>> {
        throwIfNullOrUndefined(scopeMappingRequest, 'scopeMappingRequest', 'propertymappingsScopeCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ScopeMapping>({
            url: '/propertymappings/scope/',
            method: 'POST',
            headers,
            body: scopeMappingRequest,
        }, opts?.responseOpts);
    };

    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopeDestroy({ pmUuid }: PropertymappingsScopeDestroyRequest): Observable<void>
    propertymappingsScopeDestroy({ pmUuid }: PropertymappingsScopeDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    propertymappingsScopeDestroy({ pmUuid }: PropertymappingsScopeDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsScopeDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/propertymappings/scope/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopeList({ managed, name, ordering, page, pageSize, scopeName, search }: PropertymappingsScopeListRequest): Observable<PaginatedScopeMappingList>
    propertymappingsScopeList({ managed, name, ordering, page, pageSize, scopeName, search }: PropertymappingsScopeListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedScopeMappingList>>
    propertymappingsScopeList({ managed, name, ordering, page, pageSize, scopeName, search }: PropertymappingsScopeListRequest, opts?: OperationOpts): Observable<PaginatedScopeMappingList | AjaxResponse<PaginatedScopeMappingList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (managed != null) { query['managed'] = managed; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (scopeName != null) { query['scope_name'] = scopeName; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedScopeMappingList>({
            url: '/propertymappings/scope/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopePartialUpdate({ pmUuid, patchedScopeMappingRequest }: PropertymappingsScopePartialUpdateRequest): Observable<ScopeMapping>
    propertymappingsScopePartialUpdate({ pmUuid, patchedScopeMappingRequest }: PropertymappingsScopePartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<ScopeMapping>>
    propertymappingsScopePartialUpdate({ pmUuid, patchedScopeMappingRequest }: PropertymappingsScopePartialUpdateRequest, opts?: OperationOpts): Observable<ScopeMapping | AjaxResponse<ScopeMapping>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsScopePartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ScopeMapping>({
            url: '/propertymappings/scope/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'PATCH',
            headers,
            body: patchedScopeMappingRequest,
        }, opts?.responseOpts);
    };

    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopeRetrieve({ pmUuid }: PropertymappingsScopeRetrieveRequest): Observable<ScopeMapping>
    propertymappingsScopeRetrieve({ pmUuid }: PropertymappingsScopeRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<ScopeMapping>>
    propertymappingsScopeRetrieve({ pmUuid }: PropertymappingsScopeRetrieveRequest, opts?: OperationOpts): Observable<ScopeMapping | AjaxResponse<ScopeMapping>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsScopeRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ScopeMapping>({
            url: '/propertymappings/scope/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopeUpdate({ pmUuid, scopeMappingRequest }: PropertymappingsScopeUpdateRequest): Observable<ScopeMapping>
    propertymappingsScopeUpdate({ pmUuid, scopeMappingRequest }: PropertymappingsScopeUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<ScopeMapping>>
    propertymappingsScopeUpdate({ pmUuid, scopeMappingRequest }: PropertymappingsScopeUpdateRequest, opts?: OperationOpts): Observable<ScopeMapping | AjaxResponse<ScopeMapping>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsScopeUpdate');
        throwIfNullOrUndefined(scopeMappingRequest, 'scopeMappingRequest', 'propertymappingsScopeUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ScopeMapping>({
            url: '/propertymappings/scope/{pm_uuid}/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'PUT',
            headers,
            body: scopeMappingRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    propertymappingsScopeUsedByList({ pmUuid }: PropertymappingsScopeUsedByListRequest): Observable<Array<UsedBy>>
    propertymappingsScopeUsedByList({ pmUuid }: PropertymappingsScopeUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    propertymappingsScopeUsedByList({ pmUuid }: PropertymappingsScopeUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(pmUuid, 'pmUuid', 'propertymappingsScopeUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/propertymappings/scope/{pm_uuid}/used_by/'.replace('{pm_uuid}', encodeURI(pmUuid)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}
