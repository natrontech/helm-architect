// tslint:disable
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2023.10.2
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ExpiringBaseGrantModel,
    GenericError,
    PaginatedExpiringBaseGrantModelList,
    PaginatedTokenModelList,
    TokenModel,
    UsedBy,
    ValidationError,
} from '../models';

export interface Oauth2AccessTokensDestroyRequest {
    id: number;
}

export interface Oauth2AccessTokensListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
    provider?: number;
    search?: string;
    user?: number;
}

export interface Oauth2AccessTokensRetrieveRequest {
    id: number;
}

export interface Oauth2AccessTokensUsedByListRequest {
    id: number;
}

export interface Oauth2AuthorizationCodesDestroyRequest {
    id: number;
}

export interface Oauth2AuthorizationCodesListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
    provider?: number;
    search?: string;
    user?: number;
}

export interface Oauth2AuthorizationCodesRetrieveRequest {
    id: number;
}

export interface Oauth2AuthorizationCodesUsedByListRequest {
    id: number;
}

export interface Oauth2RefreshTokensDestroyRequest {
    id: number;
}

export interface Oauth2RefreshTokensListRequest {
    ordering?: string;
    page?: number;
    pageSize?: number;
    provider?: number;
    search?: string;
    user?: number;
}

export interface Oauth2RefreshTokensRetrieveRequest {
    id: number;
}

export interface Oauth2RefreshTokensUsedByListRequest {
    id: number;
}

/**
 * no description
 */
export class Oauth2Api extends BaseAPI {

    /**
     * AccessToken Viewset
     */
    oauth2AccessTokensDestroy({ id }: Oauth2AccessTokensDestroyRequest): Observable<void>
    oauth2AccessTokensDestroy({ id }: Oauth2AccessTokensDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    oauth2AccessTokensDestroy({ id }: Oauth2AccessTokensDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'oauth2AccessTokensDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/oauth2/access_tokens/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AccessToken Viewset
     */
    oauth2AccessTokensList({ ordering, page, pageSize, provider, search, user }: Oauth2AccessTokensListRequest): Observable<PaginatedTokenModelList>
    oauth2AccessTokensList({ ordering, page, pageSize, provider, search, user }: Oauth2AccessTokensListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedTokenModelList>>
    oauth2AccessTokensList({ ordering, page, pageSize, provider, search, user }: Oauth2AccessTokensListRequest, opts?: OperationOpts): Observable<PaginatedTokenModelList | AjaxResponse<PaginatedTokenModelList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (provider != null) { query['provider'] = provider; }
        if (search != null) { query['search'] = search; }
        if (user != null) { query['user'] = user; }

        return this.request<PaginatedTokenModelList>({
            url: '/oauth2/access_tokens/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * AccessToken Viewset
     */
    oauth2AccessTokensRetrieve({ id }: Oauth2AccessTokensRetrieveRequest): Observable<TokenModel>
    oauth2AccessTokensRetrieve({ id }: Oauth2AccessTokensRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<TokenModel>>
    oauth2AccessTokensRetrieve({ id }: Oauth2AccessTokensRetrieveRequest, opts?: OperationOpts): Observable<TokenModel | AjaxResponse<TokenModel>> {
        throwIfNullOrUndefined(id, 'id', 'oauth2AccessTokensRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<TokenModel>({
            url: '/oauth2/access_tokens/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    oauth2AccessTokensUsedByList({ id }: Oauth2AccessTokensUsedByListRequest): Observable<Array<UsedBy>>
    oauth2AccessTokensUsedByList({ id }: Oauth2AccessTokensUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    oauth2AccessTokensUsedByList({ id }: Oauth2AccessTokensUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'oauth2AccessTokensUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/oauth2/access_tokens/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthorizationCode Viewset
     */
    oauth2AuthorizationCodesDestroy({ id }: Oauth2AuthorizationCodesDestroyRequest): Observable<void>
    oauth2AuthorizationCodesDestroy({ id }: Oauth2AuthorizationCodesDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    oauth2AuthorizationCodesDestroy({ id }: Oauth2AuthorizationCodesDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'oauth2AuthorizationCodesDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/oauth2/authorization_codes/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * AuthorizationCode Viewset
     */
    oauth2AuthorizationCodesList({ ordering, page, pageSize, provider, search, user }: Oauth2AuthorizationCodesListRequest): Observable<PaginatedExpiringBaseGrantModelList>
    oauth2AuthorizationCodesList({ ordering, page, pageSize, provider, search, user }: Oauth2AuthorizationCodesListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedExpiringBaseGrantModelList>>
    oauth2AuthorizationCodesList({ ordering, page, pageSize, provider, search, user }: Oauth2AuthorizationCodesListRequest, opts?: OperationOpts): Observable<PaginatedExpiringBaseGrantModelList | AjaxResponse<PaginatedExpiringBaseGrantModelList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (provider != null) { query['provider'] = provider; }
        if (search != null) { query['search'] = search; }
        if (user != null) { query['user'] = user; }

        return this.request<PaginatedExpiringBaseGrantModelList>({
            url: '/oauth2/authorization_codes/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * AuthorizationCode Viewset
     */
    oauth2AuthorizationCodesRetrieve({ id }: Oauth2AuthorizationCodesRetrieveRequest): Observable<ExpiringBaseGrantModel>
    oauth2AuthorizationCodesRetrieve({ id }: Oauth2AuthorizationCodesRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<ExpiringBaseGrantModel>>
    oauth2AuthorizationCodesRetrieve({ id }: Oauth2AuthorizationCodesRetrieveRequest, opts?: OperationOpts): Observable<ExpiringBaseGrantModel | AjaxResponse<ExpiringBaseGrantModel>> {
        throwIfNullOrUndefined(id, 'id', 'oauth2AuthorizationCodesRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ExpiringBaseGrantModel>({
            url: '/oauth2/authorization_codes/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    oauth2AuthorizationCodesUsedByList({ id }: Oauth2AuthorizationCodesUsedByListRequest): Observable<Array<UsedBy>>
    oauth2AuthorizationCodesUsedByList({ id }: Oauth2AuthorizationCodesUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    oauth2AuthorizationCodesUsedByList({ id }: Oauth2AuthorizationCodesUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'oauth2AuthorizationCodesUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/oauth2/authorization_codes/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * RefreshToken Viewset
     */
    oauth2RefreshTokensDestroy({ id }: Oauth2RefreshTokensDestroyRequest): Observable<void>
    oauth2RefreshTokensDestroy({ id }: Oauth2RefreshTokensDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    oauth2RefreshTokensDestroy({ id }: Oauth2RefreshTokensDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'oauth2RefreshTokensDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/oauth2/refresh_tokens/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * RefreshToken Viewset
     */
    oauth2RefreshTokensList({ ordering, page, pageSize, provider, search, user }: Oauth2RefreshTokensListRequest): Observable<PaginatedTokenModelList>
    oauth2RefreshTokensList({ ordering, page, pageSize, provider, search, user }: Oauth2RefreshTokensListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedTokenModelList>>
    oauth2RefreshTokensList({ ordering, page, pageSize, provider, search, user }: Oauth2RefreshTokensListRequest, opts?: OperationOpts): Observable<PaginatedTokenModelList | AjaxResponse<PaginatedTokenModelList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (provider != null) { query['provider'] = provider; }
        if (search != null) { query['search'] = search; }
        if (user != null) { query['user'] = user; }

        return this.request<PaginatedTokenModelList>({
            url: '/oauth2/refresh_tokens/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * RefreshToken Viewset
     */
    oauth2RefreshTokensRetrieve({ id }: Oauth2RefreshTokensRetrieveRequest): Observable<TokenModel>
    oauth2RefreshTokensRetrieve({ id }: Oauth2RefreshTokensRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<TokenModel>>
    oauth2RefreshTokensRetrieve({ id }: Oauth2RefreshTokensRetrieveRequest, opts?: OperationOpts): Observable<TokenModel | AjaxResponse<TokenModel>> {
        throwIfNullOrUndefined(id, 'id', 'oauth2RefreshTokensRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<TokenModel>({
            url: '/oauth2/refresh_tokens/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    oauth2RefreshTokensUsedByList({ id }: Oauth2RefreshTokensUsedByListRequest): Observable<Array<UsedBy>>
    oauth2RefreshTokensUsedByList({ id }: Oauth2RefreshTokensUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    oauth2RefreshTokensUsedByList({ id }: Oauth2RefreshTokensUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'oauth2RefreshTokensUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/oauth2/refresh_tokens/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}
