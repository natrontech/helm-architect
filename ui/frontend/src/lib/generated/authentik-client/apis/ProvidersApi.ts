// tslint:disable
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2023.10.2
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    GenericError,
    LDAPProvider,
    LDAPProviderRequest,
    OAuth2Provider,
    OAuth2ProviderRequest,
    OAuth2ProviderSetupURLs,
    PaginatedLDAPProviderList,
    PaginatedOAuth2ProviderList,
    PaginatedProviderList,
    PaginatedProxyProviderList,
    PaginatedRadiusProviderList,
    PaginatedSAMLProviderList,
    PaginatedSCIMProviderList,
    PatchedLDAPProviderRequest,
    PatchedOAuth2ProviderRequest,
    PatchedProxyProviderRequest,
    PatchedRadiusProviderRequest,
    PatchedSAMLProviderRequest,
    PatchedSCIMProviderRequest,
    PropertyMappingPreview,
    Provider,
    ProxyProvider,
    ProxyProviderRequest,
    RadiusProvider,
    RadiusProviderRequest,
    SAMLMetadata,
    SAMLProvider,
    SAMLProviderRequest,
    SCIMProvider,
    SCIMProviderRequest,
    Task,
    TypeCreate,
    UsedBy,
    ValidationError,
} from '../models';

export interface ProvidersAllDestroyRequest {
    id: number;
}

export interface ProvidersAllListRequest {
    applicationIsnull?: boolean;
    backchannelOnly?: boolean;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface ProvidersAllRetrieveRequest {
    id: number;
}

export interface ProvidersAllUsedByListRequest {
    id: number;
}

export interface ProvidersLdapCreateRequest {
    lDAPProviderRequest: LDAPProviderRequest;
}

export interface ProvidersLdapDestroyRequest {
    id: number;
}

export interface ProvidersLdapListRequest {
    applicationIsnull?: boolean;
    authorizationFlowSlugIexact?: string;
    baseDnIexact?: string;
    certificateKpUuidIexact?: string;
    certificateNameIexact?: string;
    gidStartNumberIexact?: number;
    nameIexact?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    searchGroupGroupUuidIexact?: string;
    searchGroupNameIexact?: string;
    tlsServerNameIexact?: string;
    uidStartNumberIexact?: number;
}

export interface ProvidersLdapPartialUpdateRequest {
    id: number;
    patchedLDAPProviderRequest?: PatchedLDAPProviderRequest;
}

export interface ProvidersLdapRetrieveRequest {
    id: number;
}

export interface ProvidersLdapUpdateRequest {
    id: number;
    lDAPProviderRequest: LDAPProviderRequest;
}

export interface ProvidersLdapUsedByListRequest {
    id: number;
}

export interface ProvidersOauth2CreateRequest {
    oAuth2ProviderRequest: OAuth2ProviderRequest;
}

export interface ProvidersOauth2DestroyRequest {
    id: number;
}

export interface ProvidersOauth2ListRequest {
    accessCodeValidity?: string;
    accessTokenValidity?: string;
    application?: string;
    authorizationFlow?: string;
    clientId?: string;
    clientType?: ProvidersOauth2ListClientTypeEnum;
    includeClaimsInIdToken?: boolean;
    issuerMode?: ProvidersOauth2ListIssuerModeEnum;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    propertyMappings?: Array<string>;
    redirectUris?: string;
    refreshTokenValidity?: string;
    search?: string;
    signingKey?: string;
    subMode?: ProvidersOauth2ListSubModeEnum;
}

export interface ProvidersOauth2PartialUpdateRequest {
    id: number;
    patchedOAuth2ProviderRequest?: PatchedOAuth2ProviderRequest;
}

export interface ProvidersOauth2PreviewUserRetrieveRequest {
    id: number;
}

export interface ProvidersOauth2RetrieveRequest {
    id: number;
}

export interface ProvidersOauth2SetupUrlsRetrieveRequest {
    id: number;
}

export interface ProvidersOauth2UpdateRequest {
    id: number;
    oAuth2ProviderRequest: OAuth2ProviderRequest;
}

export interface ProvidersOauth2UsedByListRequest {
    id: number;
}

export interface ProvidersProxyCreateRequest {
    proxyProviderRequest: ProxyProviderRequest;
}

export interface ProvidersProxyDestroyRequest {
    id: number;
}

export interface ProvidersProxyListRequest {
    applicationIsnull?: boolean;
    authorizationFlowSlugIexact?: string;
    basicAuthEnabledIexact?: boolean;
    basicAuthPasswordAttributeIexact?: string;
    basicAuthUserAttributeIexact?: string;
    certificateKpUuidIexact?: string;
    certificateNameIexact?: string;
    cookieDomainIexact?: string;
    externalHostIexact?: string;
    internalHostIexact?: string;
    internalHostSslValidationIexact?: boolean;
    modeIexact?: string;
    nameIexact?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    propertyMappingsIexact?: Array<string>;
    redirectUrisIexact?: string;
    search?: string;
    skipPathRegexIexact?: string;
}

export interface ProvidersProxyPartialUpdateRequest {
    id: number;
    patchedProxyProviderRequest?: PatchedProxyProviderRequest;
}

export interface ProvidersProxyRetrieveRequest {
    id: number;
}

export interface ProvidersProxyUpdateRequest {
    id: number;
    proxyProviderRequest: ProxyProviderRequest;
}

export interface ProvidersProxyUsedByListRequest {
    id: number;
}

export interface ProvidersRadiusCreateRequest {
    radiusProviderRequest: RadiusProviderRequest;
}

export interface ProvidersRadiusDestroyRequest {
    id: number;
}

export interface ProvidersRadiusListRequest {
    applicationIsnull?: boolean;
    authorizationFlowSlugIexact?: string;
    clientNetworksIexact?: string;
    nameIexact?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface ProvidersRadiusPartialUpdateRequest {
    id: number;
    patchedRadiusProviderRequest?: PatchedRadiusProviderRequest;
}

export interface ProvidersRadiusRetrieveRequest {
    id: number;
}

export interface ProvidersRadiusUpdateRequest {
    id: number;
    radiusProviderRequest: RadiusProviderRequest;
}

export interface ProvidersRadiusUsedByListRequest {
    id: number;
}

export interface ProvidersSamlCreateRequest {
    sAMLProviderRequest: SAMLProviderRequest;
}

export interface ProvidersSamlDestroyRequest {
    id: number;
}

export interface ProvidersSamlImportMetadataCreateRequest {
    name: string;
    authorizationFlow: string;
    file: Blob;
}

export interface ProvidersSamlListRequest {
    acsUrl?: string;
    assertionValidNotBefore?: string;
    assertionValidNotOnOrAfter?: string;
    audience?: string;
    authenticationFlow?: string;
    authorizationFlow?: string;
    backchannelApplication?: string;
    defaultRelayState?: string;
    digestAlgorithm?: ProvidersSamlListDigestAlgorithmEnum;
    isBackchannel?: boolean;
    issuer?: string;
    name?: string;
    nameIdMapping?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    propertyMappings?: Array<string>;
    search?: string;
    sessionValidNotOnOrAfter?: string;
    signatureAlgorithm?: ProvidersSamlListSignatureAlgorithmEnum;
    signingKp?: string;
    spBinding?: ProvidersSamlListSpBindingEnum;
    verificationKp?: string;
}

export interface ProvidersSamlMetadataRetrieveRequest {
    id: number;
    download?: boolean;
    forceBinding?: ProvidersSamlMetadataRetrieveForceBindingEnum;
}

export interface ProvidersSamlPartialUpdateRequest {
    id: number;
    patchedSAMLProviderRequest?: PatchedSAMLProviderRequest;
}

export interface ProvidersSamlPreviewUserRetrieveRequest {
    id: number;
}

export interface ProvidersSamlRetrieveRequest {
    id: number;
}

export interface ProvidersSamlUpdateRequest {
    id: number;
    sAMLProviderRequest: SAMLProviderRequest;
}

export interface ProvidersSamlUsedByListRequest {
    id: number;
}

export interface ProvidersScimCreateRequest {
    sCIMProviderRequest: SCIMProviderRequest;
}

export interface ProvidersScimDestroyRequest {
    id: number;
}

export interface ProvidersScimListRequest {
    excludeUsersServiceAccount?: boolean;
    filterGroup?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    url?: string;
}

export interface ProvidersScimPartialUpdateRequest {
    id: number;
    patchedSCIMProviderRequest?: PatchedSCIMProviderRequest;
}

export interface ProvidersScimRetrieveRequest {
    id: number;
}

export interface ProvidersScimSyncStatusRetrieveRequest {
    id: number;
}

export interface ProvidersScimUpdateRequest {
    id: number;
    sCIMProviderRequest: SCIMProviderRequest;
}

export interface ProvidersScimUsedByListRequest {
    id: number;
}

/**
 * no description
 */
export class ProvidersApi extends BaseAPI {

    /**
     * Provider Viewset
     */
    providersAllDestroy({ id }: ProvidersAllDestroyRequest): Observable<void>
    providersAllDestroy({ id }: ProvidersAllDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    providersAllDestroy({ id }: ProvidersAllDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'providersAllDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/providers/all/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Provider Viewset
     */
    providersAllList({ applicationIsnull, backchannelOnly, ordering, page, pageSize, search }: ProvidersAllListRequest): Observable<PaginatedProviderList>
    providersAllList({ applicationIsnull, backchannelOnly, ordering, page, pageSize, search }: ProvidersAllListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedProviderList>>
    providersAllList({ applicationIsnull, backchannelOnly, ordering, page, pageSize, search }: ProvidersAllListRequest, opts?: OperationOpts): Observable<PaginatedProviderList | AjaxResponse<PaginatedProviderList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (applicationIsnull != null) { query['application__isnull'] = applicationIsnull; }
        if (backchannelOnly != null) { query['backchannel_only'] = backchannelOnly; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedProviderList>({
            url: '/providers/all/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Provider Viewset
     */
    providersAllRetrieve({ id }: ProvidersAllRetrieveRequest): Observable<Provider>
    providersAllRetrieve({ id }: ProvidersAllRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<Provider>>
    providersAllRetrieve({ id }: ProvidersAllRetrieveRequest, opts?: OperationOpts): Observable<Provider | AjaxResponse<Provider>> {
        throwIfNullOrUndefined(id, 'id', 'providersAllRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Provider>({
            url: '/providers/all/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get all creatable provider types
     */
    providersAllTypesList(): Observable<Array<TypeCreate>>
    providersAllTypesList(opts?: OperationOpts): Observable<AjaxResponse<Array<TypeCreate>>>
    providersAllTypesList(opts?: OperationOpts): Observable<Array<TypeCreate> | AjaxResponse<Array<TypeCreate>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<TypeCreate>>({
            url: '/providers/all/types/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    providersAllUsedByList({ id }: ProvidersAllUsedByListRequest): Observable<Array<UsedBy>>
    providersAllUsedByList({ id }: ProvidersAllUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    providersAllUsedByList({ id }: ProvidersAllUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'providersAllUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/providers/all/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * LDAPProvider Viewset
     */
    providersLdapCreate({ lDAPProviderRequest }: ProvidersLdapCreateRequest): Observable<LDAPProvider>
    providersLdapCreate({ lDAPProviderRequest }: ProvidersLdapCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<LDAPProvider>>
    providersLdapCreate({ lDAPProviderRequest }: ProvidersLdapCreateRequest, opts?: OperationOpts): Observable<LDAPProvider | AjaxResponse<LDAPProvider>> {
        throwIfNullOrUndefined(lDAPProviderRequest, 'lDAPProviderRequest', 'providersLdapCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<LDAPProvider>({
            url: '/providers/ldap/',
            method: 'POST',
            headers,
            body: lDAPProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * LDAPProvider Viewset
     */
    providersLdapDestroy({ id }: ProvidersLdapDestroyRequest): Observable<void>
    providersLdapDestroy({ id }: ProvidersLdapDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    providersLdapDestroy({ id }: ProvidersLdapDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'providersLdapDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/providers/ldap/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * LDAPProvider Viewset
     */
    providersLdapList({ applicationIsnull, authorizationFlowSlugIexact, baseDnIexact, certificateKpUuidIexact, certificateNameIexact, gidStartNumberIexact, nameIexact, ordering, page, pageSize, search, searchGroupGroupUuidIexact, searchGroupNameIexact, tlsServerNameIexact, uidStartNumberIexact }: ProvidersLdapListRequest): Observable<PaginatedLDAPProviderList>
    providersLdapList({ applicationIsnull, authorizationFlowSlugIexact, baseDnIexact, certificateKpUuidIexact, certificateNameIexact, gidStartNumberIexact, nameIexact, ordering, page, pageSize, search, searchGroupGroupUuidIexact, searchGroupNameIexact, tlsServerNameIexact, uidStartNumberIexact }: ProvidersLdapListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedLDAPProviderList>>
    providersLdapList({ applicationIsnull, authorizationFlowSlugIexact, baseDnIexact, certificateKpUuidIexact, certificateNameIexact, gidStartNumberIexact, nameIexact, ordering, page, pageSize, search, searchGroupGroupUuidIexact, searchGroupNameIexact, tlsServerNameIexact, uidStartNumberIexact }: ProvidersLdapListRequest, opts?: OperationOpts): Observable<PaginatedLDAPProviderList | AjaxResponse<PaginatedLDAPProviderList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (applicationIsnull != null) { query['application__isnull'] = applicationIsnull; }
        if (authorizationFlowSlugIexact != null) { query['authorization_flow__slug__iexact'] = authorizationFlowSlugIexact; }
        if (baseDnIexact != null) { query['base_dn__iexact'] = baseDnIexact; }
        if (certificateKpUuidIexact != null) { query['certificate__kp_uuid__iexact'] = certificateKpUuidIexact; }
        if (certificateNameIexact != null) { query['certificate__name__iexact'] = certificateNameIexact; }
        if (gidStartNumberIexact != null) { query['gid_start_number__iexact'] = gidStartNumberIexact; }
        if (nameIexact != null) { query['name__iexact'] = nameIexact; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (searchGroupGroupUuidIexact != null) { query['search_group__group_uuid__iexact'] = searchGroupGroupUuidIexact; }
        if (searchGroupNameIexact != null) { query['search_group__name__iexact'] = searchGroupNameIexact; }
        if (tlsServerNameIexact != null) { query['tls_server_name__iexact'] = tlsServerNameIexact; }
        if (uidStartNumberIexact != null) { query['uid_start_number__iexact'] = uidStartNumberIexact; }

        return this.request<PaginatedLDAPProviderList>({
            url: '/providers/ldap/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * LDAPProvider Viewset
     */
    providersLdapPartialUpdate({ id, patchedLDAPProviderRequest }: ProvidersLdapPartialUpdateRequest): Observable<LDAPProvider>
    providersLdapPartialUpdate({ id, patchedLDAPProviderRequest }: ProvidersLdapPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<LDAPProvider>>
    providersLdapPartialUpdate({ id, patchedLDAPProviderRequest }: ProvidersLdapPartialUpdateRequest, opts?: OperationOpts): Observable<LDAPProvider | AjaxResponse<LDAPProvider>> {
        throwIfNullOrUndefined(id, 'id', 'providersLdapPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<LDAPProvider>({
            url: '/providers/ldap/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedLDAPProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * LDAPProvider Viewset
     */
    providersLdapRetrieve({ id }: ProvidersLdapRetrieveRequest): Observable<LDAPProvider>
    providersLdapRetrieve({ id }: ProvidersLdapRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<LDAPProvider>>
    providersLdapRetrieve({ id }: ProvidersLdapRetrieveRequest, opts?: OperationOpts): Observable<LDAPProvider | AjaxResponse<LDAPProvider>> {
        throwIfNullOrUndefined(id, 'id', 'providersLdapRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<LDAPProvider>({
            url: '/providers/ldap/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * LDAPProvider Viewset
     */
    providersLdapUpdate({ id, lDAPProviderRequest }: ProvidersLdapUpdateRequest): Observable<LDAPProvider>
    providersLdapUpdate({ id, lDAPProviderRequest }: ProvidersLdapUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<LDAPProvider>>
    providersLdapUpdate({ id, lDAPProviderRequest }: ProvidersLdapUpdateRequest, opts?: OperationOpts): Observable<LDAPProvider | AjaxResponse<LDAPProvider>> {
        throwIfNullOrUndefined(id, 'id', 'providersLdapUpdate');
        throwIfNullOrUndefined(lDAPProviderRequest, 'lDAPProviderRequest', 'providersLdapUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<LDAPProvider>({
            url: '/providers/ldap/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: lDAPProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    providersLdapUsedByList({ id }: ProvidersLdapUsedByListRequest): Observable<Array<UsedBy>>
    providersLdapUsedByList({ id }: ProvidersLdapUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    providersLdapUsedByList({ id }: ProvidersLdapUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'providersLdapUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/providers/ldap/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * OAuth2Provider Viewset
     */
    providersOauth2Create({ oAuth2ProviderRequest }: ProvidersOauth2CreateRequest): Observable<OAuth2Provider>
    providersOauth2Create({ oAuth2ProviderRequest }: ProvidersOauth2CreateRequest, opts?: OperationOpts): Observable<AjaxResponse<OAuth2Provider>>
    providersOauth2Create({ oAuth2ProviderRequest }: ProvidersOauth2CreateRequest, opts?: OperationOpts): Observable<OAuth2Provider | AjaxResponse<OAuth2Provider>> {
        throwIfNullOrUndefined(oAuth2ProviderRequest, 'oAuth2ProviderRequest', 'providersOauth2Create');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<OAuth2Provider>({
            url: '/providers/oauth2/',
            method: 'POST',
            headers,
            body: oAuth2ProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * OAuth2Provider Viewset
     */
    providersOauth2Destroy({ id }: ProvidersOauth2DestroyRequest): Observable<void>
    providersOauth2Destroy({ id }: ProvidersOauth2DestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    providersOauth2Destroy({ id }: ProvidersOauth2DestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'providersOauth2Destroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/providers/oauth2/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * OAuth2Provider Viewset
     */
    providersOauth2List({ accessCodeValidity, accessTokenValidity, application, authorizationFlow, clientId, clientType, includeClaimsInIdToken, issuerMode, name, ordering, page, pageSize, propertyMappings, redirectUris, refreshTokenValidity, search, signingKey, subMode }: ProvidersOauth2ListRequest): Observable<PaginatedOAuth2ProviderList>
    providersOauth2List({ accessCodeValidity, accessTokenValidity, application, authorizationFlow, clientId, clientType, includeClaimsInIdToken, issuerMode, name, ordering, page, pageSize, propertyMappings, redirectUris, refreshTokenValidity, search, signingKey, subMode }: ProvidersOauth2ListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedOAuth2ProviderList>>
    providersOauth2List({ accessCodeValidity, accessTokenValidity, application, authorizationFlow, clientId, clientType, includeClaimsInIdToken, issuerMode, name, ordering, page, pageSize, propertyMappings, redirectUris, refreshTokenValidity, search, signingKey, subMode }: ProvidersOauth2ListRequest, opts?: OperationOpts): Observable<PaginatedOAuth2ProviderList | AjaxResponse<PaginatedOAuth2ProviderList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (accessCodeValidity != null) { query['access_code_validity'] = accessCodeValidity; }
        if (accessTokenValidity != null) { query['access_token_validity'] = accessTokenValidity; }
        if (application != null) { query['application'] = application; }
        if (authorizationFlow != null) { query['authorization_flow'] = authorizationFlow; }
        if (clientId != null) { query['client_id'] = clientId; }
        if (clientType != null) { query['client_type'] = clientType; }
        if (includeClaimsInIdToken != null) { query['include_claims_in_id_token'] = includeClaimsInIdToken; }
        if (issuerMode != null) { query['issuer_mode'] = issuerMode; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (propertyMappings != null) { query['property_mappings'] = propertyMappings; }
        if (redirectUris != null) { query['redirect_uris'] = redirectUris; }
        if (refreshTokenValidity != null) { query['refresh_token_validity'] = refreshTokenValidity; }
        if (search != null) { query['search'] = search; }
        if (signingKey != null) { query['signing_key'] = signingKey; }
        if (subMode != null) { query['sub_mode'] = subMode; }

        return this.request<PaginatedOAuth2ProviderList>({
            url: '/providers/oauth2/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * OAuth2Provider Viewset
     */
    providersOauth2PartialUpdate({ id, patchedOAuth2ProviderRequest }: ProvidersOauth2PartialUpdateRequest): Observable<OAuth2Provider>
    providersOauth2PartialUpdate({ id, patchedOAuth2ProviderRequest }: ProvidersOauth2PartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<OAuth2Provider>>
    providersOauth2PartialUpdate({ id, patchedOAuth2ProviderRequest }: ProvidersOauth2PartialUpdateRequest, opts?: OperationOpts): Observable<OAuth2Provider | AjaxResponse<OAuth2Provider>> {
        throwIfNullOrUndefined(id, 'id', 'providersOauth2PartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<OAuth2Provider>({
            url: '/providers/oauth2/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedOAuth2ProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * Preview user data for provider
     */
    providersOauth2PreviewUserRetrieve({ id }: ProvidersOauth2PreviewUserRetrieveRequest): Observable<PropertyMappingPreview>
    providersOauth2PreviewUserRetrieve({ id }: ProvidersOauth2PreviewUserRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<PropertyMappingPreview>>
    providersOauth2PreviewUserRetrieve({ id }: ProvidersOauth2PreviewUserRetrieveRequest, opts?: OperationOpts): Observable<PropertyMappingPreview | AjaxResponse<PropertyMappingPreview>> {
        throwIfNullOrUndefined(id, 'id', 'providersOauth2PreviewUserRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PropertyMappingPreview>({
            url: '/providers/oauth2/{id}/preview_user/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * OAuth2Provider Viewset
     */
    providersOauth2Retrieve({ id }: ProvidersOauth2RetrieveRequest): Observable<OAuth2Provider>
    providersOauth2Retrieve({ id }: ProvidersOauth2RetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<OAuth2Provider>>
    providersOauth2Retrieve({ id }: ProvidersOauth2RetrieveRequest, opts?: OperationOpts): Observable<OAuth2Provider | AjaxResponse<OAuth2Provider>> {
        throwIfNullOrUndefined(id, 'id', 'providersOauth2Retrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<OAuth2Provider>({
            url: '/providers/oauth2/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get Providers setup URLs
     */
    providersOauth2SetupUrlsRetrieve({ id }: ProvidersOauth2SetupUrlsRetrieveRequest): Observable<OAuth2ProviderSetupURLs>
    providersOauth2SetupUrlsRetrieve({ id }: ProvidersOauth2SetupUrlsRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<OAuth2ProviderSetupURLs>>
    providersOauth2SetupUrlsRetrieve({ id }: ProvidersOauth2SetupUrlsRetrieveRequest, opts?: OperationOpts): Observable<OAuth2ProviderSetupURLs | AjaxResponse<OAuth2ProviderSetupURLs>> {
        throwIfNullOrUndefined(id, 'id', 'providersOauth2SetupUrlsRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<OAuth2ProviderSetupURLs>({
            url: '/providers/oauth2/{id}/setup_urls/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * OAuth2Provider Viewset
     */
    providersOauth2Update({ id, oAuth2ProviderRequest }: ProvidersOauth2UpdateRequest): Observable<OAuth2Provider>
    providersOauth2Update({ id, oAuth2ProviderRequest }: ProvidersOauth2UpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<OAuth2Provider>>
    providersOauth2Update({ id, oAuth2ProviderRequest }: ProvidersOauth2UpdateRequest, opts?: OperationOpts): Observable<OAuth2Provider | AjaxResponse<OAuth2Provider>> {
        throwIfNullOrUndefined(id, 'id', 'providersOauth2Update');
        throwIfNullOrUndefined(oAuth2ProviderRequest, 'oAuth2ProviderRequest', 'providersOauth2Update');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<OAuth2Provider>({
            url: '/providers/oauth2/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: oAuth2ProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    providersOauth2UsedByList({ id }: ProvidersOauth2UsedByListRequest): Observable<Array<UsedBy>>
    providersOauth2UsedByList({ id }: ProvidersOauth2UsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    providersOauth2UsedByList({ id }: ProvidersOauth2UsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'providersOauth2UsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/providers/oauth2/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ProxyProvider Viewset
     */
    providersProxyCreate({ proxyProviderRequest }: ProvidersProxyCreateRequest): Observable<ProxyProvider>
    providersProxyCreate({ proxyProviderRequest }: ProvidersProxyCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<ProxyProvider>>
    providersProxyCreate({ proxyProviderRequest }: ProvidersProxyCreateRequest, opts?: OperationOpts): Observable<ProxyProvider | AjaxResponse<ProxyProvider>> {
        throwIfNullOrUndefined(proxyProviderRequest, 'proxyProviderRequest', 'providersProxyCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ProxyProvider>({
            url: '/providers/proxy/',
            method: 'POST',
            headers,
            body: proxyProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * ProxyProvider Viewset
     */
    providersProxyDestroy({ id }: ProvidersProxyDestroyRequest): Observable<void>
    providersProxyDestroy({ id }: ProvidersProxyDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    providersProxyDestroy({ id }: ProvidersProxyDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'providersProxyDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/providers/proxy/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ProxyProvider Viewset
     */
    providersProxyList({ applicationIsnull, authorizationFlowSlugIexact, basicAuthEnabledIexact, basicAuthPasswordAttributeIexact, basicAuthUserAttributeIexact, certificateKpUuidIexact, certificateNameIexact, cookieDomainIexact, externalHostIexact, internalHostIexact, internalHostSslValidationIexact, modeIexact, nameIexact, ordering, page, pageSize, propertyMappingsIexact, redirectUrisIexact, search, skipPathRegexIexact }: ProvidersProxyListRequest): Observable<PaginatedProxyProviderList>
    providersProxyList({ applicationIsnull, authorizationFlowSlugIexact, basicAuthEnabledIexact, basicAuthPasswordAttributeIexact, basicAuthUserAttributeIexact, certificateKpUuidIexact, certificateNameIexact, cookieDomainIexact, externalHostIexact, internalHostIexact, internalHostSslValidationIexact, modeIexact, nameIexact, ordering, page, pageSize, propertyMappingsIexact, redirectUrisIexact, search, skipPathRegexIexact }: ProvidersProxyListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedProxyProviderList>>
    providersProxyList({ applicationIsnull, authorizationFlowSlugIexact, basicAuthEnabledIexact, basicAuthPasswordAttributeIexact, basicAuthUserAttributeIexact, certificateKpUuidIexact, certificateNameIexact, cookieDomainIexact, externalHostIexact, internalHostIexact, internalHostSslValidationIexact, modeIexact, nameIexact, ordering, page, pageSize, propertyMappingsIexact, redirectUrisIexact, search, skipPathRegexIexact }: ProvidersProxyListRequest, opts?: OperationOpts): Observable<PaginatedProxyProviderList | AjaxResponse<PaginatedProxyProviderList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (applicationIsnull != null) { query['application__isnull'] = applicationIsnull; }
        if (authorizationFlowSlugIexact != null) { query['authorization_flow__slug__iexact'] = authorizationFlowSlugIexact; }
        if (basicAuthEnabledIexact != null) { query['basic_auth_enabled__iexact'] = basicAuthEnabledIexact; }
        if (basicAuthPasswordAttributeIexact != null) { query['basic_auth_password_attribute__iexact'] = basicAuthPasswordAttributeIexact; }
        if (basicAuthUserAttributeIexact != null) { query['basic_auth_user_attribute__iexact'] = basicAuthUserAttributeIexact; }
        if (certificateKpUuidIexact != null) { query['certificate__kp_uuid__iexact'] = certificateKpUuidIexact; }
        if (certificateNameIexact != null) { query['certificate__name__iexact'] = certificateNameIexact; }
        if (cookieDomainIexact != null) { query['cookie_domain__iexact'] = cookieDomainIexact; }
        if (externalHostIexact != null) { query['external_host__iexact'] = externalHostIexact; }
        if (internalHostIexact != null) { query['internal_host__iexact'] = internalHostIexact; }
        if (internalHostSslValidationIexact != null) { query['internal_host_ssl_validation__iexact'] = internalHostSslValidationIexact; }
        if (modeIexact != null) { query['mode__iexact'] = modeIexact; }
        if (nameIexact != null) { query['name__iexact'] = nameIexact; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (propertyMappingsIexact != null) { query['property_mappings__iexact'] = propertyMappingsIexact; }
        if (redirectUrisIexact != null) { query['redirect_uris__iexact'] = redirectUrisIexact; }
        if (search != null) { query['search'] = search; }
        if (skipPathRegexIexact != null) { query['skip_path_regex__iexact'] = skipPathRegexIexact; }

        return this.request<PaginatedProxyProviderList>({
            url: '/providers/proxy/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * ProxyProvider Viewset
     */
    providersProxyPartialUpdate({ id, patchedProxyProviderRequest }: ProvidersProxyPartialUpdateRequest): Observable<ProxyProvider>
    providersProxyPartialUpdate({ id, patchedProxyProviderRequest }: ProvidersProxyPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<ProxyProvider>>
    providersProxyPartialUpdate({ id, patchedProxyProviderRequest }: ProvidersProxyPartialUpdateRequest, opts?: OperationOpts): Observable<ProxyProvider | AjaxResponse<ProxyProvider>> {
        throwIfNullOrUndefined(id, 'id', 'providersProxyPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ProxyProvider>({
            url: '/providers/proxy/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedProxyProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * ProxyProvider Viewset
     */
    providersProxyRetrieve({ id }: ProvidersProxyRetrieveRequest): Observable<ProxyProvider>
    providersProxyRetrieve({ id }: ProvidersProxyRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<ProxyProvider>>
    providersProxyRetrieve({ id }: ProvidersProxyRetrieveRequest, opts?: OperationOpts): Observable<ProxyProvider | AjaxResponse<ProxyProvider>> {
        throwIfNullOrUndefined(id, 'id', 'providersProxyRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ProxyProvider>({
            url: '/providers/proxy/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * ProxyProvider Viewset
     */
    providersProxyUpdate({ id, proxyProviderRequest }: ProvidersProxyUpdateRequest): Observable<ProxyProvider>
    providersProxyUpdate({ id, proxyProviderRequest }: ProvidersProxyUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<ProxyProvider>>
    providersProxyUpdate({ id, proxyProviderRequest }: ProvidersProxyUpdateRequest, opts?: OperationOpts): Observable<ProxyProvider | AjaxResponse<ProxyProvider>> {
        throwIfNullOrUndefined(id, 'id', 'providersProxyUpdate');
        throwIfNullOrUndefined(proxyProviderRequest, 'proxyProviderRequest', 'providersProxyUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<ProxyProvider>({
            url: '/providers/proxy/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: proxyProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    providersProxyUsedByList({ id }: ProvidersProxyUsedByListRequest): Observable<Array<UsedBy>>
    providersProxyUsedByList({ id }: ProvidersProxyUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    providersProxyUsedByList({ id }: ProvidersProxyUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'providersProxyUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/providers/proxy/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * RadiusProvider Viewset
     */
    providersRadiusCreate({ radiusProviderRequest }: ProvidersRadiusCreateRequest): Observable<RadiusProvider>
    providersRadiusCreate({ radiusProviderRequest }: ProvidersRadiusCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<RadiusProvider>>
    providersRadiusCreate({ radiusProviderRequest }: ProvidersRadiusCreateRequest, opts?: OperationOpts): Observable<RadiusProvider | AjaxResponse<RadiusProvider>> {
        throwIfNullOrUndefined(radiusProviderRequest, 'radiusProviderRequest', 'providersRadiusCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<RadiusProvider>({
            url: '/providers/radius/',
            method: 'POST',
            headers,
            body: radiusProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * RadiusProvider Viewset
     */
    providersRadiusDestroy({ id }: ProvidersRadiusDestroyRequest): Observable<void>
    providersRadiusDestroy({ id }: ProvidersRadiusDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    providersRadiusDestroy({ id }: ProvidersRadiusDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'providersRadiusDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/providers/radius/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * RadiusProvider Viewset
     */
    providersRadiusList({ applicationIsnull, authorizationFlowSlugIexact, clientNetworksIexact, nameIexact, ordering, page, pageSize, search }: ProvidersRadiusListRequest): Observable<PaginatedRadiusProviderList>
    providersRadiusList({ applicationIsnull, authorizationFlowSlugIexact, clientNetworksIexact, nameIexact, ordering, page, pageSize, search }: ProvidersRadiusListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedRadiusProviderList>>
    providersRadiusList({ applicationIsnull, authorizationFlowSlugIexact, clientNetworksIexact, nameIexact, ordering, page, pageSize, search }: ProvidersRadiusListRequest, opts?: OperationOpts): Observable<PaginatedRadiusProviderList | AjaxResponse<PaginatedRadiusProviderList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (applicationIsnull != null) { query['application__isnull'] = applicationIsnull; }
        if (authorizationFlowSlugIexact != null) { query['authorization_flow__slug__iexact'] = authorizationFlowSlugIexact; }
        if (clientNetworksIexact != null) { query['client_networks__iexact'] = clientNetworksIexact; }
        if (nameIexact != null) { query['name__iexact'] = nameIexact; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }

        return this.request<PaginatedRadiusProviderList>({
            url: '/providers/radius/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * RadiusProvider Viewset
     */
    providersRadiusPartialUpdate({ id, patchedRadiusProviderRequest }: ProvidersRadiusPartialUpdateRequest): Observable<RadiusProvider>
    providersRadiusPartialUpdate({ id, patchedRadiusProviderRequest }: ProvidersRadiusPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<RadiusProvider>>
    providersRadiusPartialUpdate({ id, patchedRadiusProviderRequest }: ProvidersRadiusPartialUpdateRequest, opts?: OperationOpts): Observable<RadiusProvider | AjaxResponse<RadiusProvider>> {
        throwIfNullOrUndefined(id, 'id', 'providersRadiusPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<RadiusProvider>({
            url: '/providers/radius/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedRadiusProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * RadiusProvider Viewset
     */
    providersRadiusRetrieve({ id }: ProvidersRadiusRetrieveRequest): Observable<RadiusProvider>
    providersRadiusRetrieve({ id }: ProvidersRadiusRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<RadiusProvider>>
    providersRadiusRetrieve({ id }: ProvidersRadiusRetrieveRequest, opts?: OperationOpts): Observable<RadiusProvider | AjaxResponse<RadiusProvider>> {
        throwIfNullOrUndefined(id, 'id', 'providersRadiusRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<RadiusProvider>({
            url: '/providers/radius/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * RadiusProvider Viewset
     */
    providersRadiusUpdate({ id, radiusProviderRequest }: ProvidersRadiusUpdateRequest): Observable<RadiusProvider>
    providersRadiusUpdate({ id, radiusProviderRequest }: ProvidersRadiusUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<RadiusProvider>>
    providersRadiusUpdate({ id, radiusProviderRequest }: ProvidersRadiusUpdateRequest, opts?: OperationOpts): Observable<RadiusProvider | AjaxResponse<RadiusProvider>> {
        throwIfNullOrUndefined(id, 'id', 'providersRadiusUpdate');
        throwIfNullOrUndefined(radiusProviderRequest, 'radiusProviderRequest', 'providersRadiusUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<RadiusProvider>({
            url: '/providers/radius/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: radiusProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    providersRadiusUsedByList({ id }: ProvidersRadiusUsedByListRequest): Observable<Array<UsedBy>>
    providersRadiusUsedByList({ id }: ProvidersRadiusUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    providersRadiusUsedByList({ id }: ProvidersRadiusUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'providersRadiusUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/providers/radius/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * SAMLProvider Viewset
     */
    providersSamlCreate({ sAMLProviderRequest }: ProvidersSamlCreateRequest): Observable<SAMLProvider>
    providersSamlCreate({ sAMLProviderRequest }: ProvidersSamlCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<SAMLProvider>>
    providersSamlCreate({ sAMLProviderRequest }: ProvidersSamlCreateRequest, opts?: OperationOpts): Observable<SAMLProvider | AjaxResponse<SAMLProvider>> {
        throwIfNullOrUndefined(sAMLProviderRequest, 'sAMLProviderRequest', 'providersSamlCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SAMLProvider>({
            url: '/providers/saml/',
            method: 'POST',
            headers,
            body: sAMLProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * SAMLProvider Viewset
     */
    providersSamlDestroy({ id }: ProvidersSamlDestroyRequest): Observable<void>
    providersSamlDestroy({ id }: ProvidersSamlDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    providersSamlDestroy({ id }: ProvidersSamlDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'providersSamlDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/providers/saml/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create provider from SAML Metadata
     */
    providersSamlImportMetadataCreate({ name, authorizationFlow, file }: ProvidersSamlImportMetadataCreateRequest): Observable<void>
    providersSamlImportMetadataCreate({ name, authorizationFlow, file }: ProvidersSamlImportMetadataCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    providersSamlImportMetadataCreate({ name, authorizationFlow, file }: ProvidersSamlImportMetadataCreateRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(name, 'name', 'providersSamlImportMetadataCreate');
        throwIfNullOrUndefined(authorizationFlow, 'authorizationFlow', 'providersSamlImportMetadataCreate');
        throwIfNullOrUndefined(file, 'file', 'providersSamlImportMetadataCreate');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const formData = new FormData();
        if (name !== undefined) { formData.append('name', name as any); }
        if (authorizationFlow !== undefined) { formData.append('authorization_flow', authorizationFlow as any); }
        if (file !== undefined) { formData.append('file', file as any); }

        return this.request<void>({
            url: '/providers/saml/import_metadata/',
            method: 'POST',
            headers,
            body: formData,
        }, opts?.responseOpts);
    };

    /**
     * SAMLProvider Viewset
     */
    providersSamlList({ acsUrl, assertionValidNotBefore, assertionValidNotOnOrAfter, audience, authenticationFlow, authorizationFlow, backchannelApplication, defaultRelayState, digestAlgorithm, isBackchannel, issuer, name, nameIdMapping, ordering, page, pageSize, propertyMappings, search, sessionValidNotOnOrAfter, signatureAlgorithm, signingKp, spBinding, verificationKp }: ProvidersSamlListRequest): Observable<PaginatedSAMLProviderList>
    providersSamlList({ acsUrl, assertionValidNotBefore, assertionValidNotOnOrAfter, audience, authenticationFlow, authorizationFlow, backchannelApplication, defaultRelayState, digestAlgorithm, isBackchannel, issuer, name, nameIdMapping, ordering, page, pageSize, propertyMappings, search, sessionValidNotOnOrAfter, signatureAlgorithm, signingKp, spBinding, verificationKp }: ProvidersSamlListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedSAMLProviderList>>
    providersSamlList({ acsUrl, assertionValidNotBefore, assertionValidNotOnOrAfter, audience, authenticationFlow, authorizationFlow, backchannelApplication, defaultRelayState, digestAlgorithm, isBackchannel, issuer, name, nameIdMapping, ordering, page, pageSize, propertyMappings, search, sessionValidNotOnOrAfter, signatureAlgorithm, signingKp, spBinding, verificationKp }: ProvidersSamlListRequest, opts?: OperationOpts): Observable<PaginatedSAMLProviderList | AjaxResponse<PaginatedSAMLProviderList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (acsUrl != null) { query['acs_url'] = acsUrl; }
        if (assertionValidNotBefore != null) { query['assertion_valid_not_before'] = assertionValidNotBefore; }
        if (assertionValidNotOnOrAfter != null) { query['assertion_valid_not_on_or_after'] = assertionValidNotOnOrAfter; }
        if (audience != null) { query['audience'] = audience; }
        if (authenticationFlow != null) { query['authentication_flow'] = authenticationFlow; }
        if (authorizationFlow != null) { query['authorization_flow'] = authorizationFlow; }
        if (backchannelApplication != null) { query['backchannel_application'] = backchannelApplication; }
        if (defaultRelayState != null) { query['default_relay_state'] = defaultRelayState; }
        if (digestAlgorithm != null) { query['digest_algorithm'] = digestAlgorithm; }
        if (isBackchannel != null) { query['is_backchannel'] = isBackchannel; }
        if (issuer != null) { query['issuer'] = issuer; }
        if (name != null) { query['name'] = name; }
        if (nameIdMapping != null) { query['name_id_mapping'] = nameIdMapping; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (propertyMappings != null) { query['property_mappings'] = propertyMappings; }
        if (search != null) { query['search'] = search; }
        if (sessionValidNotOnOrAfter != null) { query['session_valid_not_on_or_after'] = sessionValidNotOnOrAfter; }
        if (signatureAlgorithm != null) { query['signature_algorithm'] = signatureAlgorithm; }
        if (signingKp != null) { query['signing_kp'] = signingKp; }
        if (spBinding != null) { query['sp_binding'] = spBinding; }
        if (verificationKp != null) { query['verification_kp'] = verificationKp; }

        return this.request<PaginatedSAMLProviderList>({
            url: '/providers/saml/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Return metadata as XML string
     */
    providersSamlMetadataRetrieve({ id, download, forceBinding }: ProvidersSamlMetadataRetrieveRequest): Observable<SAMLMetadata>
    providersSamlMetadataRetrieve({ id, download, forceBinding }: ProvidersSamlMetadataRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<SAMLMetadata>>
    providersSamlMetadataRetrieve({ id, download, forceBinding }: ProvidersSamlMetadataRetrieveRequest, opts?: OperationOpts): Observable<SAMLMetadata | AjaxResponse<SAMLMetadata>> {
        throwIfNullOrUndefined(id, 'id', 'providersSamlMetadataRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (download != null) { query['download'] = download; }
        if (forceBinding != null) { query['force_binding'] = forceBinding; }

        return this.request<SAMLMetadata>({
            url: '/providers/saml/{id}/metadata/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * SAMLProvider Viewset
     */
    providersSamlPartialUpdate({ id, patchedSAMLProviderRequest }: ProvidersSamlPartialUpdateRequest): Observable<SAMLProvider>
    providersSamlPartialUpdate({ id, patchedSAMLProviderRequest }: ProvidersSamlPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<SAMLProvider>>
    providersSamlPartialUpdate({ id, patchedSAMLProviderRequest }: ProvidersSamlPartialUpdateRequest, opts?: OperationOpts): Observable<SAMLProvider | AjaxResponse<SAMLProvider>> {
        throwIfNullOrUndefined(id, 'id', 'providersSamlPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SAMLProvider>({
            url: '/providers/saml/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedSAMLProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * Preview user data for provider
     */
    providersSamlPreviewUserRetrieve({ id }: ProvidersSamlPreviewUserRetrieveRequest): Observable<PropertyMappingPreview>
    providersSamlPreviewUserRetrieve({ id }: ProvidersSamlPreviewUserRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<PropertyMappingPreview>>
    providersSamlPreviewUserRetrieve({ id }: ProvidersSamlPreviewUserRetrieveRequest, opts?: OperationOpts): Observable<PropertyMappingPreview | AjaxResponse<PropertyMappingPreview>> {
        throwIfNullOrUndefined(id, 'id', 'providersSamlPreviewUserRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<PropertyMappingPreview>({
            url: '/providers/saml/{id}/preview_user/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * SAMLProvider Viewset
     */
    providersSamlRetrieve({ id }: ProvidersSamlRetrieveRequest): Observable<SAMLProvider>
    providersSamlRetrieve({ id }: ProvidersSamlRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<SAMLProvider>>
    providersSamlRetrieve({ id }: ProvidersSamlRetrieveRequest, opts?: OperationOpts): Observable<SAMLProvider | AjaxResponse<SAMLProvider>> {
        throwIfNullOrUndefined(id, 'id', 'providersSamlRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SAMLProvider>({
            url: '/providers/saml/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * SAMLProvider Viewset
     */
    providersSamlUpdate({ id, sAMLProviderRequest }: ProvidersSamlUpdateRequest): Observable<SAMLProvider>
    providersSamlUpdate({ id, sAMLProviderRequest }: ProvidersSamlUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<SAMLProvider>>
    providersSamlUpdate({ id, sAMLProviderRequest }: ProvidersSamlUpdateRequest, opts?: OperationOpts): Observable<SAMLProvider | AjaxResponse<SAMLProvider>> {
        throwIfNullOrUndefined(id, 'id', 'providersSamlUpdate');
        throwIfNullOrUndefined(sAMLProviderRequest, 'sAMLProviderRequest', 'providersSamlUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SAMLProvider>({
            url: '/providers/saml/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: sAMLProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    providersSamlUsedByList({ id }: ProvidersSamlUsedByListRequest): Observable<Array<UsedBy>>
    providersSamlUsedByList({ id }: ProvidersSamlUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    providersSamlUsedByList({ id }: ProvidersSamlUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'providersSamlUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/providers/saml/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * SCIMProvider Viewset
     */
    providersScimCreate({ sCIMProviderRequest }: ProvidersScimCreateRequest): Observable<SCIMProvider>
    providersScimCreate({ sCIMProviderRequest }: ProvidersScimCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<SCIMProvider>>
    providersScimCreate({ sCIMProviderRequest }: ProvidersScimCreateRequest, opts?: OperationOpts): Observable<SCIMProvider | AjaxResponse<SCIMProvider>> {
        throwIfNullOrUndefined(sCIMProviderRequest, 'sCIMProviderRequest', 'providersScimCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SCIMProvider>({
            url: '/providers/scim/',
            method: 'POST',
            headers,
            body: sCIMProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * SCIMProvider Viewset
     */
    providersScimDestroy({ id }: ProvidersScimDestroyRequest): Observable<void>
    providersScimDestroy({ id }: ProvidersScimDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    providersScimDestroy({ id }: ProvidersScimDestroyRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'providersScimDestroy');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<void>({
            url: '/providers/scim/{id}/'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * SCIMProvider Viewset
     */
    providersScimList({ excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search, url }: ProvidersScimListRequest): Observable<PaginatedSCIMProviderList>
    providersScimList({ excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search, url }: ProvidersScimListRequest, opts?: OperationOpts): Observable<AjaxResponse<PaginatedSCIMProviderList>>
    providersScimList({ excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search, url }: ProvidersScimListRequest, opts?: OperationOpts): Observable<PaginatedSCIMProviderList | AjaxResponse<PaginatedSCIMProviderList>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        const query: HttpQuery = {};

        if (excludeUsersServiceAccount != null) { query['exclude_users_service_account'] = excludeUsersServiceAccount; }
        if (filterGroup != null) { query['filter_group'] = filterGroup; }
        if (name != null) { query['name'] = name; }
        if (ordering != null) { query['ordering'] = ordering; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (search != null) { query['search'] = search; }
        if (url != null) { query['url'] = url; }

        return this.request<PaginatedSCIMProviderList>({
            url: '/providers/scim/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * SCIMProvider Viewset
     */
    providersScimPartialUpdate({ id, patchedSCIMProviderRequest }: ProvidersScimPartialUpdateRequest): Observable<SCIMProvider>
    providersScimPartialUpdate({ id, patchedSCIMProviderRequest }: ProvidersScimPartialUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<SCIMProvider>>
    providersScimPartialUpdate({ id, patchedSCIMProviderRequest }: ProvidersScimPartialUpdateRequest, opts?: OperationOpts): Observable<SCIMProvider | AjaxResponse<SCIMProvider>> {
        throwIfNullOrUndefined(id, 'id', 'providersScimPartialUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SCIMProvider>({
            url: '/providers/scim/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: patchedSCIMProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * SCIMProvider Viewset
     */
    providersScimRetrieve({ id }: ProvidersScimRetrieveRequest): Observable<SCIMProvider>
    providersScimRetrieve({ id }: ProvidersScimRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<SCIMProvider>>
    providersScimRetrieve({ id }: ProvidersScimRetrieveRequest, opts?: OperationOpts): Observable<SCIMProvider | AjaxResponse<SCIMProvider>> {
        throwIfNullOrUndefined(id, 'id', 'providersScimRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SCIMProvider>({
            url: '/providers/scim/{id}/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get provider\'s sync status
     */
    providersScimSyncStatusRetrieve({ id }: ProvidersScimSyncStatusRetrieveRequest): Observable<Task>
    providersScimSyncStatusRetrieve({ id }: ProvidersScimSyncStatusRetrieveRequest, opts?: OperationOpts): Observable<AjaxResponse<Task>>
    providersScimSyncStatusRetrieve({ id }: ProvidersScimSyncStatusRetrieveRequest, opts?: OperationOpts): Observable<Task | AjaxResponse<Task>> {
        throwIfNullOrUndefined(id, 'id', 'providersScimSyncStatusRetrieve');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Task>({
            url: '/providers/scim/{id}/sync_status/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * SCIMProvider Viewset
     */
    providersScimUpdate({ id, sCIMProviderRequest }: ProvidersScimUpdateRequest): Observable<SCIMProvider>
    providersScimUpdate({ id, sCIMProviderRequest }: ProvidersScimUpdateRequest, opts?: OperationOpts): Observable<AjaxResponse<SCIMProvider>>
    providersScimUpdate({ id, sCIMProviderRequest }: ProvidersScimUpdateRequest, opts?: OperationOpts): Observable<SCIMProvider | AjaxResponse<SCIMProvider>> {
        throwIfNullOrUndefined(id, 'id', 'providersScimUpdate');
        throwIfNullOrUndefined(sCIMProviderRequest, 'sCIMProviderRequest', 'providersScimUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<SCIMProvider>({
            url: '/providers/scim/{id}/'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: sCIMProviderRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of all objects that use this object
     */
    providersScimUsedByList({ id }: ProvidersScimUsedByListRequest): Observable<Array<UsedBy>>
    providersScimUsedByList({ id }: ProvidersScimUsedByListRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UsedBy>>>
    providersScimUsedByList({ id }: ProvidersScimUsedByListRequest, opts?: OperationOpts): Observable<Array<UsedBy> | AjaxResponse<Array<UsedBy>>> {
        throwIfNullOrUndefined(id, 'id', 'providersScimUsedByList');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // authentik authentication
        };

        return this.request<Array<UsedBy>>({
            url: '/providers/scim/{id}/used_by/'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum ProvidersOauth2ListClientTypeEnum {
    Confidential = 'confidential',
    Public = 'public'
}
/**
 * @export
 * @enum {string}
 */
export enum ProvidersOauth2ListIssuerModeEnum {
    Global = 'global',
    PerProvider = 'per_provider'
}
/**
 * @export
 * @enum {string}
 */
export enum ProvidersOauth2ListSubModeEnum {
    HashedUserId = 'hashed_user_id',
    UserEmail = 'user_email',
    UserId = 'user_id',
    UserUpn = 'user_upn',
    UserUsername = 'user_username',
    UserUuid = 'user_uuid'
}
/**
 * @export
 * @enum {string}
 */
export enum ProvidersSamlListDigestAlgorithmEnum {
    _200009Xmldsigsha1 = 'http://www.w3.org/2000/09/xmldsig#sha1',
    _200104XmldsigMoresha384 = 'http://www.w3.org/2001/04/xmldsig-more#sha384',
    _200104Xmlencsha256 = 'http://www.w3.org/2001/04/xmlenc#sha256',
    _200104Xmlencsha512 = 'http://www.w3.org/2001/04/xmlenc#sha512'
}
/**
 * @export
 * @enum {string}
 */
export enum ProvidersSamlListSignatureAlgorithmEnum {
    _200009XmldsigdsaSha1 = 'http://www.w3.org/2000/09/xmldsig#dsa-sha1',
    _200009XmldsigrsaSha1 = 'http://www.w3.org/2000/09/xmldsig#rsa-sha1',
    _200104XmldsigMorersaSha256 = 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256',
    _200104XmldsigMorersaSha384 = 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384',
    _200104XmldsigMorersaSha512 = 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'
}
/**
 * @export
 * @enum {string}
 */
export enum ProvidersSamlListSpBindingEnum {
    Post = 'post',
    Redirect = 'redirect'
}
/**
 * @export
 * @enum {string}
 */
export enum ProvidersSamlMetadataRetrieveForceBindingEnum {
    Post = 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',
    Redirect = 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect'
}
