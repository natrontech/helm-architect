// tslint:disable
/**
 * Helm Architect Core API
 * The helm architect api serves the core features of the helm architect.
 *
 * The version of the OpenAPI document: alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ChartsChart,
    ChartsConfiguration,
    ChartsRevision,
    ReleasesChartReleaseOptions,
    UtilsApiError,
} from '../models';

export interface ApiAlphaChartNameDeleteRequest {
    name: string;
}

export interface ApiAlphaChartNameRevisionPostRequest {
    name: string;
    revision: ChartsRevision;
}

export interface ApiAlphaChartNameRevisionSemanticVersionDeleteRequest {
    name: string;
    semanticVersion: string;
}

export interface ApiAlphaChartNameRevisionSemanticVersionGetRequest {
    name: string;
    semanticVersion: string;
}

export interface ApiAlphaChartNameRevisionsGetRequest {
    name: string;
}

export interface ApiAlphaChartPostRequest {
    chart: ChartsChart;
}

export interface ApiAlphaReleaseChartNamePostRequest {
    chartName: string;
    releaseConfiguration: ReleasesChartReleaseOptions;
}

/**
 * no description
 */
export class ChartsApi extends BaseAPI {

    /**
     * deletes a chart and all its revisions.
     */
    apiAlphaChartNameDelete({ name }: ApiAlphaChartNameDeleteRequest): Observable<void>
    apiAlphaChartNameDelete({ name }: ApiAlphaChartNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiAlphaChartNameDelete({ name }: ApiAlphaChartNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(name, 'name', 'apiAlphaChartNameDelete');

        return this.request<void>({
            url: '/api/alpha/chart/{name}'.replace('{name}', encodeURI(name)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * create a new revision of the chart
     */
    apiAlphaChartNameRevisionPost({ name, revision }: ApiAlphaChartNameRevisionPostRequest): Observable<ChartsRevision>
    apiAlphaChartNameRevisionPost({ name, revision }: ApiAlphaChartNameRevisionPostRequest, opts?: OperationOpts): Observable<AjaxResponse<ChartsRevision>>
    apiAlphaChartNameRevisionPost({ name, revision }: ApiAlphaChartNameRevisionPostRequest, opts?: OperationOpts): Observable<ChartsRevision | AjaxResponse<ChartsRevision>> {
        throwIfNullOrUndefined(name, 'name', 'apiAlphaChartNameRevisionPost');
        throwIfNullOrUndefined(revision, 'revision', 'apiAlphaChartNameRevisionPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ChartsRevision>({
            url: '/api/alpha/chart/{name}/revision'.replace('{name}', encodeURI(name)),
            method: 'POST',
            headers,
            body: revision,
        }, opts?.responseOpts);
    };

    /**
     * deletes an existing revision of the chart
     */
    apiAlphaChartNameRevisionSemanticVersionDelete({ name, semanticVersion }: ApiAlphaChartNameRevisionSemanticVersionDeleteRequest): Observable<ChartsRevision>
    apiAlphaChartNameRevisionSemanticVersionDelete({ name, semanticVersion }: ApiAlphaChartNameRevisionSemanticVersionDeleteRequest, opts?: OperationOpts): Observable<AjaxResponse<ChartsRevision>>
    apiAlphaChartNameRevisionSemanticVersionDelete({ name, semanticVersion }: ApiAlphaChartNameRevisionSemanticVersionDeleteRequest, opts?: OperationOpts): Observable<ChartsRevision | AjaxResponse<ChartsRevision>> {
        throwIfNullOrUndefined(name, 'name', 'apiAlphaChartNameRevisionSemanticVersionDelete');
        throwIfNullOrUndefined(semanticVersion, 'semanticVersion', 'apiAlphaChartNameRevisionSemanticVersionDelete');

        return this.request<ChartsRevision>({
            url: '/api/alpha/chart/{name}/revision/{semanticVersion}'.replace('{name}', encodeURI(name)).replace('{semanticVersion}', encodeURI(semanticVersion)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * create a new revision of the chart
     */
    apiAlphaChartNameRevisionSemanticVersionGet({ name, semanticVersion }: ApiAlphaChartNameRevisionSemanticVersionGetRequest): Observable<ChartsConfiguration>
    apiAlphaChartNameRevisionSemanticVersionGet({ name, semanticVersion }: ApiAlphaChartNameRevisionSemanticVersionGetRequest, opts?: OperationOpts): Observable<AjaxResponse<ChartsConfiguration>>
    apiAlphaChartNameRevisionSemanticVersionGet({ name, semanticVersion }: ApiAlphaChartNameRevisionSemanticVersionGetRequest, opts?: OperationOpts): Observable<ChartsConfiguration | AjaxResponse<ChartsConfiguration>> {
        throwIfNullOrUndefined(name, 'name', 'apiAlphaChartNameRevisionSemanticVersionGet');
        throwIfNullOrUndefined(semanticVersion, 'semanticVersion', 'apiAlphaChartNameRevisionSemanticVersionGet');

        return this.request<ChartsConfiguration>({
            url: '/api/alpha/chart/{name}/revision/{semanticVersion}'.replace('{name}', encodeURI(name)).replace('{semanticVersion}', encodeURI(semanticVersion)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * create a new revision of the chart
     */
    apiAlphaChartNameRevisionsGet({ name }: ApiAlphaChartNameRevisionsGetRequest): Observable<Array<string>>
    apiAlphaChartNameRevisionsGet({ name }: ApiAlphaChartNameRevisionsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    apiAlphaChartNameRevisionsGet({ name }: ApiAlphaChartNameRevisionsGetRequest, opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        throwIfNullOrUndefined(name, 'name', 'apiAlphaChartNameRevisionsGet');

        return this.request<Array<string>>({
            url: '/api/alpha/chart/{name}/revisions'.replace('{name}', encodeURI(name)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * creates an empty chart.
     */
    apiAlphaChartPost({ chart }: ApiAlphaChartPostRequest): Observable<ChartsChart>
    apiAlphaChartPost({ chart }: ApiAlphaChartPostRequest, opts?: OperationOpts): Observable<AjaxResponse<ChartsChart>>
    apiAlphaChartPost({ chart }: ApiAlphaChartPostRequest, opts?: OperationOpts): Observable<ChartsChart | AjaxResponse<ChartsChart>> {
        throwIfNullOrUndefined(chart, 'chart', 'apiAlphaChartPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ChartsChart>({
            url: '/api/alpha/chart',
            method: 'POST',
            headers,
            body: chart,
        }, opts?.responseOpts);
    };

    /**
     * create a new revision of the chart
     */
    apiAlphaChartsGet(): Observable<Array<string>>
    apiAlphaChartsGet(opts?: OperationOpts): Observable<AjaxResponse<Array<string>>>
    apiAlphaChartsGet(opts?: OperationOpts): Observable<Array<string> | AjaxResponse<Array<string>>> {
        return this.request<Array<string>>({
            url: '/api/alpha/charts',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * creates a new helm release and publishes it to given registry.
     */
    apiAlphaReleaseChartNamePost({ chartName, releaseConfiguration }: ApiAlphaReleaseChartNamePostRequest): Observable<string>
    apiAlphaReleaseChartNamePost({ chartName, releaseConfiguration }: ApiAlphaReleaseChartNamePostRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    apiAlphaReleaseChartNamePost({ chartName, releaseConfiguration }: ApiAlphaReleaseChartNamePostRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        throwIfNullOrUndefined(chartName, 'chartName', 'apiAlphaReleaseChartNamePost');
        throwIfNullOrUndefined(releaseConfiguration, 'releaseConfiguration', 'apiAlphaReleaseChartNamePost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<string>({
            url: '/api/alpha/release/{chartName}'.replace('{chartName}', encodeURI(chartName)),
            method: 'POST',
            headers,
            body: releaseConfiguration,
        }, opts?.responseOpts);
    };

}
